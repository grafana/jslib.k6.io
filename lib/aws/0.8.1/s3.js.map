{"version":3,"file":"s3.js","mappings":"mBACA,IAAIA,EAAsB,CCA1BA,EAAyBC,IACxB,IAAIC,EAASD,GAAUA,EAAOE,WAC7B,IAAOF,EAAiB,QACxB,IAAM,EAEP,OADAD,EAAoBI,EAAEF,EAAQ,CAAEG,EAAGH,IAC5BA,CAAM,ECLdF,EAAwB,CAACM,EAASC,KACjC,IAAI,IAAIC,KAAOD,EACXP,EAAoBS,EAAEF,EAAYC,KAASR,EAAoBS,EAAEH,EAASE,IAC5EE,OAAOC,eAAeL,EAASE,EAAK,CAAEI,YAAY,EAAMC,IAAKN,EAAWC,IAE1E,ECNDR,EAAwB,CAACc,EAAKC,IAAUL,OAAOM,UAAUC,eAAeC,KAAKJ,EAAKC,GCClFf,EAAyBM,IACH,oBAAXa,QAA0BA,OAAOC,aAC1CV,OAAOC,eAAeL,EAASa,OAAOC,YAAa,CAAEC,MAAO,WAE7DX,OAAOC,eAAeL,EAAS,aAAc,CAAEe,OAAO,GAAO,G,82FCFvD,IAAMC,EAAS,WAsFlB,SAAAA,EAAYC,GACR,GADmCC,EAAA,KAAAF,GArFvCG,EAAA,sBAOAA,EAAA,2BAOAA,EAAA,+BAOAA,EAAA,4BAOAA,EAAA,cAKqB,SAIrBA,EAAA,gBAKmB,kBA4CVF,EAAQG,QAA6B,KAAnBH,EAAQG,OAC3B,MAAM,IAAIC,EAAsB,yFAADC,OAC+DL,EAAQG,OAAM,MAIhH,IAAKH,EAAQM,aAAuC,KAAxBN,EAAQM,YAChC,MAAM,IAAIF,EAAsB,wEAADC,OAC8CL,EAAQM,YAAW,MAIpG,GAAIN,EAAQM,YAAYC,OAAS,IAAMP,EAAQM,YAAYC,OAAS,IAChE,MAAM,IAAIH,EAAsB,wFAADC,OAC6DL,EAAQM,YAAYC,SAIpH,IAAKP,EAAQQ,iBAA+C,KAA5BR,EAAQQ,gBACpC,MAAM,IAAIJ,EAAsB,4EAADC,OACkDL,EAAQQ,gBAAe,MAI5G,GAAIR,EAAQQ,gBAAgBD,OAAS,IAAMP,EAAQQ,gBAAgBD,OAAS,IACxE,MAAM,IAAIH,EAAsB,4FAADC,OACiEL,EAAQQ,gBAAgBD,SAI5HE,KAAKN,OAASH,EAAQG,OACtBM,KAAKH,YAAcN,EAAQM,YAC3BG,KAAKD,gBAAkBR,EAAQQ,qBAEFE,IAAzBV,EAAQW,eACRF,KAAKE,aAAeX,EAAQW,mBAGTD,IAAnBV,EAAQY,SACRH,KAAKG,OAASZ,EAAQY,aAGDF,IAArBV,EAAQa,WACRJ,KAAKI,SAAWb,EAAQa,SAEhC,CAtDC,OAsDAC,EAAAf,EAAA,OAAAd,IAAA,kBAAAa,MAtED,SAAuBE,GAQnB,OAAO,IAAID,EAAU,CACjBI,OARWY,MAAMC,WASjBV,YARgBS,MAAME,kBAStBT,gBARoBO,MAAMG,sBAS1BP,aARqCI,MAAMI,kBAS3CP,OARmCZ,aAAO,EAAPA,EAASY,OAS5CC,SARiCb,aAAO,EAAPA,EAASa,UAUlD,KAACd,CAAA,CA9EiB,GA4LTK,EAAqB,SAAAgB,I,qRAAAC,CAAAjB,EAAAgB,GAAA,IAAAE,EAAAC,EAAAnB,GAC9B,SAAAA,EAAYoB,GAAiB,OAAAvB,EAAA,KAAAG,GAAAkB,EAAA3B,KAAA,KACnB6B,EACV,CAAC,OAAAV,EAAAV,EAAA,CAH6B,CAG7BqB,EAHsCC,QC/L3C,MAAM,EAA+BC,QAAQ,a,aCKhCC,EAAuB,aAEvBC,EAA4B,kBAG5BC,EAAwB,uBAKxBC,EAA4B,uBAC5BC,EAAkBJ,EAAqBK,cACvCC,EAAuBL,EAA0BI,cAEjDE,GAVyB,eASkBF,cACxBH,EAAsBG,eAKzCG,EAAuB,gBAMvBC,EAAoB,CAACD,EAAsBJ,EAL7B,QAMdM,EAAc,OAMdC,EAA4B,CACrCC,eAAe,EACf,iBAAiB,EACjBC,YAAY,EACZC,QAAQ,EACRC,MAAM,EACN,cAAc,EACd,gBAAgB,EAChBC,QAAQ,EACRC,SAAS,EACTC,IAAI,EACJC,SAAS,EACT,qBAAqB,EACrBC,SAAS,EACT,cAAc,EACd,mBAAmB,GAMVC,EAAsB,eACtBC,EAA+B,mBC3D5C,MAAM,EAA+BvB,QAAQ,W,+1ECUtC,IAAMwB,EAAQ,SAAA/B,I,qRAAAC,CAAA8B,EAAA/B,GAAA,I,MAAAE,EAAAC,EAAA4B,GAYjB,SAAAA,EAAY3B,EAAiB4B,GAAe,IAAAC,E,MAGxB,O,4FAHwBpD,CAAA,KAAAkD,GACxCE,EAAA/B,EAAA3B,KAAA,KAAM6B,G,EAZV8B,EAAAD,G,OAAA,G,MAAA,W,wFAaIA,EAAKE,KAAO,WACZF,EAAKD,KAAOA,EAAIC,CACpB,CAUC,O,EARDF,E,EAAA,EAAAlE,IAAA,WAAAa,MAKA,SAAgB0D,GACZ,IAAMC,GAAMC,EAAAA,EAAAA,WAAUF,GACtB,OAAO,IAAIL,EAASM,EAAIE,KAAK,WAAWC,OAAQH,EAAIE,KAAK,QAAQC,OACrE,K,EARA,O,8EAQCT,CAAA,CA1BgB,CA0BhB1B,EA1ByBC,Q,kkHCOvB,IAAMmC,GAAW,WAoCpB,SAAAA,EAAAC,GAMuB,IALnBC,EAAOD,EAAPC,QACA5D,EAAM2D,EAAN3D,OACA6D,EAAWF,EAAXE,YACAC,EAAaH,EAAbG,cACAC,EAAaJ,EAAbI,cAAajE,EAAA,KAAA4D,GAxCjB3D,GAAA,uBAKAA,GAAA,sBAKAA,GAAA,2BAKAA,GAAA,6BASAA,GAAA,6BAkBIO,KAAKsD,QAAUA,EACftD,KAAKN,OAASA,EACdM,KAAKuD,YAAcA,EACnBvD,KAAKwD,cAAyC,kBAAlBA,GAA8BA,EAC1DxD,KAAKyD,cAAyC,kBAAlBA,GAA8BA,CAC9D,CA0jBC,OAxjBDpD,EAAA+C,EAAA,EAAA5E,IAAA,OAAAa,MAaA,SAAKqE,GAAuF,IAAjEnE,EAAuCoE,UAAA7D,OAAA,QAAAG,IAAA0D,UAAA,GAAAA,UAAA,GAAG,CAAC,EAS5DC,EAAYC,EAAAA,EAAA,GAPK,CACnBC,YAAa,IAAIC,KACjBC,kBAAmB,IAAIC,IACvBC,gBAAiB,IAAID,MAIoB1E,GAE7C4E,EAA0CC,GAAWR,EAAaE,aAA1DO,EAAQF,EAARE,SAAUC,EAASH,EAATG,UACZhB,EAAUM,EAAaW,gBAAkBvE,KAAKsD,QAC9C5D,EAASkE,EAAaY,eAAiBxE,KAAKN,OAC5C+E,EAAQ,GAAH7E,OAAM0E,EAAS,KAAA1E,OAAIF,EAAM,KAAAE,OAAI0D,EAAO,KAAA1D,OAAI8E,GAOnDhB,EAAQiB,QAAQD,GAAyBhB,EAAQkB,SAKjD,IAAK,IAALC,EAAA,EAAAC,EAAyBpG,OAAOqG,KAAKrB,EAAQiB,SAAQE,EAAAC,EAAAhF,OAAA+E,IAAE,CAAlD,IAAMG,EAAUF,EAAAD,GACbH,EAA4BO,QAAQD,EAAWxD,gBAAkB,UAC1DkC,EAAQiB,QAAQK,EAE/B,CAEAtB,EAAQiB,QAAQD,GAA6BL,EACzCrE,KAAKuD,YAAYrD,eACjBwD,EAAQiB,QAAQD,GAA8B1E,KAAKuD,YAAYrD,cAK/DgF,YAAYC,OAAOzB,EAAQ0B,QAC3B1B,EAAQ0B,KAAO1B,EAAQ0B,KAAKC,QAI3B3B,EAAQ0B,OACT1B,EAAQ0B,KAAO,IAGnB,IAAIE,EAActF,KAAKuF,mBAAmB7B,IC3G3C,SAAmB8B,EAAsBb,GAC5Ca,EAAeA,EAAahE,cAE5B,IAAK,IAALqD,EAAA,EAAAC,EAAyBpG,OAAOqG,KAAKJ,GAAQE,EAAAC,EAAAhF,OAAA+E,IACzC,GAAIW,IADaV,EAAAD,GACerD,cAC5B,OAAO,EAIf,OAAO,CACX,CDmGaiE,CAAUf,EAAqChB,EAAQiB,UACxD3E,KAAKyD,gBAELC,EAAQiB,QAAQD,GAAuCY,GAG3D,IAAMI,EAAmB1F,KAAK2F,wBAC1BjC,EACAE,EAAaI,kBACbJ,EAAaM,iBAEX0B,EAAY5F,KAAK6F,mBACnBxB,EACAI,EACAzE,KAAK8F,iBAAiB9F,KAAKuD,YAAaD,EAAS5D,EAAQ4E,GACzDtE,KAAK+F,uBAAuBrC,EAASgC,EAAkBJ,IAQ3D5B,EAAQiB,QAAQD,GACZ,GAAA9E,OAAG8E,EAAsC,mBAAA9E,OAC3BI,KAAKuD,YAAY1D,YAAW,KAAAD,OAAI6E,EAAK,MAAI,iBAAA7E,OACtClB,OAAOqG,KAAKW,GAAkBM,OAAOC,KAAK,KAAI,MAAI,aAAArG,OACtDgG,GAGjB,IAAIM,EAAM,GAAHtG,OAAM8D,EAAQyC,SAAQ,OAAAvG,OAAM8D,EAAQkB,UAW3C,OAVIlB,EAAQ0C,OACRF,GAAOxC,EAAQ0C,MAIf1C,EAAQ2C,QAERH,GAAO,IAAJtG,OAAQI,KAAKsG,yBAAyB5C,EAAQ2C,SAGrDxC,EAAA,CACIqC,IAAKA,GACFxC,EAEX,GAEA,CAAAlF,IAAA,UAAAa,MAWA,SAAQkH,GAA+E,IAAjDhH,EAAuBoE,UAAA7D,OAAA,QAAAG,IAAA0D,UAAA,GAAAA,UAAA,GAAG,CAAC,EAC7D6C,EAQIjH,EAPAuE,YAAAA,OAAW,IAAA0C,EAAG,IAAIzC,KAAMyC,EAAAC,EAOxBlH,EANAmH,UAAAA,OAAS,IAAAD,EAAG,KAAIA,EAChBzC,EAKAzE,EALAyE,kBACA2C,EAIApH,EAJAoH,mBACAzC,EAGA3E,EAHA2E,gBACAM,EAEAjF,EAFAiF,cACAD,EACAhF,EADAgF,eAEJqC,EAA0CxC,GAAWN,GAA7CO,EAAQuC,EAARvC,SAAUC,EAASsC,EAATtC,UACZ5E,EAAS8E,GAAiBxE,KAAKN,OAC/B4D,EAAUiB,GAAkBvE,KAAKsD,QAEvC,GAAIoD,EH1IqB,OG2IrB,MAAM,IAAIG,GACN,0EAIR,IAAMpC,EAAQ,GAAH7E,OAAM0E,EAAS,KAAA1E,OAAIF,EAAM,KAAAE,OAAI0D,EAAO,KAAA1D,OAAI8E,GAC7ChB,EAAU1D,KAAK8G,mBAAmBP,EAAiB,CAAEI,mBAAAA,IAO3DjD,EAAQiB,QAAQD,GAAyB6B,EAAgB3B,SAGrD5E,KAAKuD,YAAYrD,eACjBwD,EAAQ2C,MAAM3B,GAAmC1E,KAAKuD,YAAYrD,cAKtEwD,EAAQ2C,MH9NyB,mBG8NoB3B,EACrDhB,EAAQ2C,MH9N0B,oBGgO9B,GAAHzG,OAAMI,KAAKuD,YAAY1D,YAAW,KAAAD,OAAI6E,GACvCf,EAAQ2C,MAAM3B,GAAkCL,EAChDX,EAAQ2C,MHhOuB,iBGgOoBK,EAAUK,SAAS,IAEtE,IAAMrB,EAAmB1F,KAAK2F,wBAC1BjC,EACAM,EACAE,GAEJR,EAAQ2C,MHrO8B,uBGqOoB3H,OAAOqG,KAAKW,GACjEM,OACAC,KAAK,KAEV,IAAMe,EAAahH,KAAK8F,iBAAiB9F,KAAKuD,YAAaD,EAAS5D,EAAQ4E,GAStEgB,EAActF,KAAKuF,mBAAmBgB,GACtCU,EAAmBjH,KAAK+F,uBAAuBrC,EAASgC,EAAkBJ,GAEhF5B,EAAQ2C,MAAM3B,GAAuC1E,KAAK6F,mBACtDxB,EACAI,EACAuC,EACAC,GAIJ,IAAIf,EAAM,GAAHtG,OAAM8D,EAAQyC,SAAQ,OAAAvG,OAAM8D,EAAQkB,UAU3C,OATIlB,EAAQ0C,OACRF,GAAOxC,EAAQ0C,MAIf1C,EAAQ2C,QACRH,GAAO,IAAJtG,OAAQI,KAAKsG,yBAAyB5C,EAAQ2C,SAGrDxC,EAAA,CAASqC,IAAKA,GAAQxC,EAC1B,GAEA,CAAAlF,IAAA,yBAAAa,MAYA,SACIqE,EACAgC,EACAJ,GAEA,IAAM4B,EAAgBxI,OAAOqG,KAAKW,GAAkBM,OAC9CmB,EAAyBD,EAC1BE,KAAI,SAACtE,GAAI,SAAAlD,OAAQkD,EAAI,KAAAlD,OAAI8F,EAAiB5C,GAAK,IAC/CmD,KAAK,MACJoB,EAAgBH,EAAcjB,KAAK,KAEzC,MACI,GAAArG,OAAG8D,EAAQ4D,OAAM,SAAA1H,OACdI,KAAKuH,oBAAoB7D,GAAQ,MAAI,GAAA9D,OACrCI,KAAKwH,4BAA4B9D,GAAQ,MAAI,GAAA9D,OAC7CuH,EAAsB,QAAM,GAAAvH,OAC5ByH,EAAa,MAAI,GAAAzH,OACjB0F,EAEX,GAEA,CAAA9G,IAAA,qBAAAa,MAcA,SACIgF,EACAoD,EACAR,GAEA,IAAMS,EAAyBC,IAAAA,OAAcV,EAAkB,OAE/D,MACI,GAAArH,OAAG8E,EAAsC,SAAA9E,OACtCyE,EAAQ,MAAI,GAAAzE,OACZ6H,EAAe,MAAI,GAAA7H,OACnB8H,EAEX,GAEA,CAAAlJ,IAAA,qBAAAa,MAYA,SACIgF,EACAoD,EACAT,EACAC,GAEA,IAAMW,EAAe5H,KAAK6H,mBAAmBxD,EAAUoD,EAAiBR,GACxE,OAAOU,IAAAA,KAAY,SAAUX,EAAYY,EAAc,MAC3D,GAEA,CAAApJ,IAAA,mBAAAa,MAiBA,SACIkE,EACAD,EACA5D,EACA4E,GAEA,IAAMwD,EAAkBvE,EAAYxD,gBAC9BgI,EAAaJ,IAAAA,KAAY,SAAU,OAASG,EAASxD,EAAW,UAChE0D,EAAeL,IAAAA,KAAY,SAAUI,EAAOrI,EAAQ,UACpDuI,EAAgBN,IAAAA,KAAY,SAAUK,EAAS1E,EAAS,UAG9D,OAFsBqE,IAAAA,KAAY,SAAUM,EAAU,eAAgB,SAG1E,GAEA,CAAAzJ,IAAA,sBAAAa,MAOA,SAAA6I,GAA2D,IAA7B9B,EAAI8B,EAAJ9B,KAC1B,GAAIpG,KAAKwD,cAAe,CAGpB,IAEwC2E,EAFlCC,EAAwB,GAAEC,EAAAC,EAEPlC,EAAKmC,MAAM,MAAI,IAAxC,IAAAF,EAAAG,MAAAL,EAAAE,EAAAI,KAAAC,MAA0C,KAA/BC,EAAUR,EAAA9I,MACU,KAAvBsJ,aAAU,EAAVA,EAAY7I,UAIG,MAAf6I,IAIe,OAAfA,EACAP,EAAsBQ,MAEtBR,EAAsBS,KAAKF,IAEnC,CAEA,OAAAG,GAAAT,EAAAU,EAAAD,EAAA,SAAAT,EAAAW,GAAA,CACA,IAAMC,EAAU7C,SAAAA,EAAM8C,WAAW,KAAO,IAAM,GACxCC,EAAMf,EAAsBnC,KAAK,KACjCmD,EAAWhB,EAAsBtI,OAAS,GAA/BsI,MAAoChC,GAAAA,EAAMiD,SAAS,KAAO,IAAM,GAC3EC,EAAgB,GAAH1J,OAAMqJ,GAAOrJ,OAAGuJ,GAAGvJ,OAAGwJ,GAIzC,OAFsBG,mBAAmBD,GAEpBE,QAAQ,OAAQ,IACzC,CAKA,OAAOpD,CACX,GAEA,CAAA5H,IAAA,8BAAAa,MAQA,SAAAoK,GAAyE,IAI1BC,EAJ0BC,EAAAF,EAAnCpD,MAAAA,OAAK,IAAAsD,EAAG,CAAC,EAACA,EACtC5E,EAAsB,GACtB6E,EAAqC,CAAC,EAACC,EAAA,SAAArL,GAGzC,GAAIA,EAAIgD,gBAAkBkD,EAAgC,iBAI1DK,EAAK8D,KAAKrK,GACV,IAAMa,EAAQgH,EAAM7H,GAEC,iBAAVa,EACPuK,EAAWpL,GAAO,GAAHoB,OAAMkK,GAAUtL,GAAI,KAAAoB,OAAIkK,GAAUzK,IAC1C0K,MAAMC,QAAQ3K,KACrBuK,EAAWpL,GAAOa,EACb4K,MAAM,GACNjE,OACAkE,QACG,SAACC,EAAwB9K,GAAa,OAClC8K,EAAQvK,OAAO,CAAC,GAADA,OAAIkK,GAAUtL,GAAI,KAAAoB,OAAIkK,GAAUzK,KAAU,GAC7D,IAEH4G,KAAK,KAElB,EAACmE,EAAA9B,EArBiB5J,OAAOqG,KAAKsB,GAAOL,QAAM,IAA3C,IAAAoE,EAAA5B,MAAAkB,EAAAU,EAAA3B,KAAAC,MAAcmB,EAAAH,EAAArK,MAqBb,OAAAyJ,GAAAsB,EAAArB,EAAAD,EAAA,SAAAsB,EAAApB,GAAA,CAED,OAAOjE,EACFqC,KAAI,SAAC5I,GAAG,OAAKoL,EAAWpL,EAAI,IAC5B6L,QAAO,SAACT,GAAU,OAAKA,CAAU,IACjC3D,KAAK,IACd,GAEA,CAAAzH,IAAA,0BAAAa,MAUA,SAAAiL,EAEItG,EACAE,GACa,IAGuCqG,EANlD5F,EAAO2F,EAAP3F,QAIIe,EAAkC,CAAC,EAAC8E,EAAAlC,EAEjB5J,OAAOqG,KAAKJ,GAASqB,QAAM,IAApD,IAAAwE,EAAAhC,MAAA+B,EAAAC,EAAA/B,KAAAC,MAAsD,KAA3C1D,EAAUuF,EAAAlL,MACjB,GAA2BY,MAAvB0E,EAAQK,GAAZ,CAIA,IAAMyF,EAAsBzF,EAAWxD,eAEnCiJ,KAAuB/F,GACvBV,SAAAA,EAAmB0G,IAAID,OAGlBvG,GACAA,IAAoBA,EAAgBwG,IAAID,MAMjD/E,EAAiB+E,GAAuB9F,EAAQK,GAAY2F,OAAOnB,QAAQ,OAAQ,KAfnF,CAgBJ,CAAC,OAAAV,GAAA0B,EAAAzB,EAAAD,EAAA,SAAA0B,EAAAxB,GAAA,CAED,OAAOtD,CACX,GAEA,CAAAlH,IAAA,qBAAAa,MAWA,SAAAuL,GAAmE,IE5gBzCvL,EF4gBGsF,EAAOiG,EAAPjG,QAASS,EAAIwF,EAAJxF,KASlC,OAAIT,EAAQD,GACDC,EAAQD,GAGPzE,MAARmF,EHzdgB,mEG6dA,iBAATA,IE7hBW/F,EF6hBwB+F,EE3hBvB,mBAAhBF,cACN7F,aAAiB6F,aAC4B,yBAA1CxG,OAAOM,UAAU+H,SAAS7H,KAAKG,KF0hBxBsI,IAAAA,OAAcvC,EAAM,OAAO5D,cAGlC0D,YAAYC,OAAOC,GAGZuC,IAAAA,OAAevC,EAAkBC,OAAQ,OAAO7D,cH5dnC,kBGge5B,GAEA,CAAAhD,IAAA,qBAAAa,MAaA,SACIqE,GAMA,IAJ0C,IAD1CnE,EAA6CoE,UAAA7D,OAAA,QAAAG,IAAA0D,UAAA,GAAAA,UAAA,GAAG,CAAC,EAE3CkH,EAAcC,KAAKC,MAAMD,KAAKE,UAAUtH,IACtCiB,EAA6CkG,EAA7ClG,QAAOsG,EAAsCJ,EAApCxE,MAAAA,OAAK,IAAA4E,EAAG,CAAC,EAACA,EAE3BC,EAAA,EAAAC,EAAmBzM,OAAOqG,KAAKJ,GAAQuG,EAAAC,EAAArL,OAAAoL,IAAE,KAAAE,EAA9BtI,EAAIqI,EAAAD,GACLG,EAAgBvI,EAAKtB,cAEO,WAA9B6J,EAAcpB,MAAM,EAAG,IACI,QAA3BmB,EAAC7L,EAAQoH,0BAAkB,IAAAyE,GAA1BA,EAA4BV,IAAIW,KAEjChF,EAAMvD,GAAQ6B,EAAQ7B,UACf6B,EAAQ7B,GAEvB,CAEA,OAAAe,EAAAA,EAAA,GACOgH,GAAW,IACdlG,QAAAA,EACA0B,MAAAA,GAER,GAEA,CAAA7H,IAAA,2BAAAa,MAOA,SAAiCgH,EAA0BiF,GACvD,IAG2CC,EAHrCxG,EAAsB,GACtB6E,EAAqC,CAAC,EAAC4B,EAAA,SAAAhN,GAGzC,GAAI8M,SAAAA,EAAYG,SAASjN,EAAIgD,eAAgB,iBAI7CuD,EAAK8D,KAAKrK,GACV,IAAMa,EAAQgH,EAAM7H,GAEC,iBAAVa,EACPuK,EAAWpL,GAAO,GAAHoB,OAAMkK,GAAUtL,GAAI,KAAAoB,OAAIkK,GAAUzK,IAC1C0K,MAAMC,QAAQ3K,KACrBuK,EAAWpL,GAAOa,EACb4K,MAAM,GACNjE,OACAkE,QACG,SAACC,EAAwB9K,GAAa,OAClC8K,EAAQvK,OAAO,CAAC,GAADA,OAAIkK,GAAUtL,GAAI,KAAAoB,OAAIkK,GAAUzK,KAAU,GAC7D,IAEH4G,KAAK,KAElB,EAACyF,EAAApD,EArBiB5J,OAAOqG,KAAKsB,GAAOL,QAAM,IAA3C,IAAA0F,EAAAlD,MAAA+C,EAAAG,EAAAjD,KAAAC,MAAc8C,EAAAD,EAAAlM,MAqBb,OAAAyJ,GAAA4C,EAAA3C,EAAAD,EAAA,SAAA4C,EAAA1C,GAAA,CAED,OAAOjE,EACFqC,KAAI,SAAC5I,GAAG,OAAKoL,EAAWpL,EAAI,IAC5B6L,QAAO,SAACT,GAAU,OAAKA,CAAU,IACjC3D,KAAK,IACd,KAAC7C,CAAA,CA1mBmB,GAqnBXyD,GAAqB,SAAA8E,I,qRAAA/K,CAAAiG,EAAA8E,GAAA,IAAA9K,EAAAC,EAAA+F,GAM9B,SAAAA,EAAY9F,EAAiB4B,GAAe,IAAAC,EAEL,OAFKpD,EAAA,KAAAqH,IACxCjE,EAAA/B,EAAA3B,KAAA,KAAM6B,EAAS4B,IACVG,KAAO,wBAAuBF,CACvC,CAAC,OAAAvC,EAAAwG,EAAA,CAT6B,CAASnE,GA+I3C,SAASoH,GAAUX,GAKf,OAAOI,mBAAmBJ,GAAKK,QAAQ,YAJrB,SAACoC,GACf,MAAO,IAAPhM,OAAWgM,EAAEC,WAAW,GAAG9E,SAAS,IAAI+E,cAC5C,GAGJ,CASA,SAAS1H,GAAW2H,GAChB,IAeaC,EAfP3H,GAeO2H,EAfYD,EA2B7B,SAAgBC,GACZ,MAAoB,iBAATA,EACA,IAAIjI,KAAY,IAAPiI,GAGA,iBAATA,EACHC,OAAOD,GACA,IAAIjI,KAAoB,IAAfkI,OAAOD,IAGpB,IAAIjI,KAAKiI,GAGbA,CACX,CAzBWE,CAAOF,GACTG,cACA3C,QAAQ,YAAa,MAlBKA,QAAQ,SAAU,IACjD,MAAO,CACHnF,SAAAA,EACAC,UAAWD,EAAS4F,MAAM,EAAG,GAErC,CG1yBA,MAAM,GAA+B/I,QAAQ,W,4oGCYtC,IAAMkL,GAAQ,SAAAC,GAAAzL,GAAAwL,EAAAC,GAAA,IAAAxL,EAAAC,GAAAsL,GAQjB,SAAAA,EAAYE,GAAsB,IAAA1J,EAa5B,OAb4BpD,GAAA,KAAA4M,GACR3M,GAAAoD,GAAtBD,EAAA/B,EAAA3B,KAAA,KAAMoN,EAAW,OAAK,oBAEtB1J,EAAKgD,UAAY,IAAIxC,GAAY,CAC7BE,QAASV,EAAK2J,YACd7M,OAAQkD,EAAK0J,UAAU5M,OACvB6D,YAAa,CACT1D,YAAa+C,EAAK0J,UAAUzM,YAC5BE,gBAAiB6C,EAAK0J,UAAUvM,gBAChCG,aAAc0C,EAAK0J,UAAUpM,cAEjCsD,eAAe,EACfC,eAAe,IACjBb,CACN,CA+cC,OA7cDvC,GAAA+L,EAAA,EAAA5N,IAAA,cAAAa,MASA,WACI,IAEMmN,EAAmCxM,KAAK4F,UAAU6G,KACpD,CACInF,OAAQ,MACRnB,SAAUnG,KAAKG,OACfyE,SAAU5E,KAAK0M,KACftG,KAAM,IACNzB,QAAS,CAAC,GAEd,CAAC,GAGCgI,EAAMC,KAAAA,QAbG,MAakBJ,EAActG,IAAKsG,EAAcpH,MAAQ,GAAI,CAC1ET,QAAS6H,EAAc7H,UAE3B3E,KAAK6M,cAAc,cAAeF,GAElC,IAAIG,EAA2B,GAwB/B,OAtBY7J,EAAAA,EAAAA,WAAU0J,EAAIvH,MAEtBlC,KAAK,WACJ6J,WACAC,MAAK,SAACC,EAAGC,GACN,IAAIC,EAAS,CAAC,EAEdD,EAAiBH,WAAWK,SAAQ,SAACC,GACjC,OAAQA,EAAMC,YACV,IAAK,OACD5O,OAAO6O,OAAOJ,EAAQ,CAAErK,KAAMuK,EAAMG,gBACpC,MACJ,IAAK,eACD9O,OAAO6O,OAAOJ,EAAQ,CAClBM,aAAc1J,KAAKgH,MAAMsC,EAAMG,iBAG/C,IAEAV,EAAQjE,KAAKsE,EACjB,IAEGL,CACX,GAEA,CAAAtO,IAAA,cAAAa,MAUA,SAAYqO,EAAoBC,GAE5B,IACMjB,EAAO,GAAH9M,OAAMI,KAAK0M,MAEfF,EAAmCxM,KAAK4F,UAAU6G,KACpD,CACInF,OAAQ,MACRnB,SAAUnG,KAAKG,OACfyE,SAAU8H,EACVtG,KAAM,IAAFxG,OAAM8N,EAAU,KACpBrH,MAAO,CACH,YAAa,IACbsH,OAAQA,GAAU,IAEtBhJ,QAAS,CAAC,GAEd,CAAC,GAGCgI,EAAMC,KAAAA,QAlBG,MAkBkBJ,EAActG,IAAKsG,EAAcpH,MAAQ,GAAI,CAC1ET,QAAS6H,EAAc7H,UAE3B3E,KAAK6M,cAAc,gBAAiBF,GAEpC,IAAIiB,EAA2B,GA+B/B,OA3BA3K,EAAAA,EAAAA,WAAU0J,EAAIvH,MACTlC,KAAK,YACL8J,MAAK,SAACC,EAAGY,GACN,IAAI/O,EAAM,CAAC,EAEX+O,EAAiBd,WAAWK,SAAQ,SAACC,GACjC,OAAQA,EAAMC,YACV,IAAK,MACD5O,OAAO6O,OAAOzO,EAAK,CAAEN,IAAK6O,EAAMG,gBAChC,MACJ,IAAK,eACD9O,OAAO6O,OAAOzO,EAAK,CAAEgP,aAAc/J,KAAKgH,MAAMsC,EAAMG,iBACpD,MACJ,IAAK,OACD9O,OAAO6O,OAAOzO,EAAK,CAAEiP,KAAMV,EAAMG,gBACjC,MACJ,IAAK,OACD9O,OAAO6O,OAAOzO,EAAK,CAAEkP,KAAMC,SAASZ,EAAMG,iBAC1C,MACJ,IAAK,eACD9O,OAAO6O,OAAOzO,EAAK,CAAEoP,aAAcb,EAAMG,gBAErD,IAEAI,EAAQ/E,KAAK/J,EACjB,IAEG8O,CACX,GACA,CAAApP,IAAA,YAAAa,MAWA,SAAUqO,EAAoBS,GAA6B,IAAAC,EAGjD1B,EAAO,GAAH9M,OAAMI,KAAK0M,MAEfF,EAAgBxM,KAAK4F,UAAU6G,KACjC,CACInF,OAAQ,MACRnB,SAAUnG,KAAKG,OACfyE,SAAU8H,EACVtG,KAAM,IAAFxG,OAAM8N,EAAU,KAAA9N,OAAIuO,GACxBxJ,QAAS,CAAC,GAEd,CAAC,GAGCgI,EAAMC,KAAAA,QAdG,MAckBJ,EAActG,IAAKsG,EAAcpH,MAAQ,GAAI,CAC1ET,QAAS6H,EAAc7H,UAI3B,OAFA3E,KAAK6M,cAAc,YAAaF,GAEzB,IAAI0B,GACPF,EACApK,KAAKgH,MAAM4B,EAAIhI,QAAQ,kBACvBgI,EAAIhI,QAAc,KAClBsJ,SAAStB,EAAIhI,QAAQ,mBAIc,QADnCyJ,EACCzB,EAAIhI,QAAQ,8BAAsB,IAAAyJ,EAAAA,EAAI,WAEvCzB,EAAIvH,KAEZ,GACA,CAAA5G,IAAA,YAAAa,MAWA,SAAUqO,EAAoBS,EAAmBG,GAE7C,IACM5B,EAAO,GAAH9M,OAAMI,KAAK0M,MAEfF,EAAgBxM,KAAK4F,UAAU6G,KACjC,CACInF,OALO,MAMPnB,SAAUnG,KAAKG,OACfyE,SAAU8H,EACVtG,KAAM,IAAFxG,OAAM8N,EAAU,KAAA9N,OAAIuO,GACxBxJ,QAAS,CACL4J,KAAM7B,GAEVtH,KAAMkJ,GAEV,CAAC,GAGC3B,EAAMC,KAAAA,QAjBG,MAiBkBJ,EAActG,IAAKsG,EAAcpH,KAAM,CACpET,QAAS6H,EAAc7H,UAE3B3E,KAAK6M,cAAc,YAAaF,EACpC,GAEA,CAAAnO,IAAA,eAAAa,MASA,SAAaqO,EAAoBS,GAE7B,IAAM7G,EAAS,SACToF,EAAO,GAAH9M,OAAMI,KAAK0M,MAEfF,EAAgBxM,KAAK4F,UAAU6G,KACjC,CACInF,OAAQA,EACRnB,SAAUnG,KAAKG,OACfyE,SAAU8H,EACVtG,KAAM,IAAFxG,OAAM8N,EAAU,KAAA9N,OAAIuO,GACxBxJ,QAAS,CAAC,GAEd,CAAC,GAGCgI,EAAMC,KAAAA,QAAatF,EAAQkF,EAActG,IAAKsG,EAAcpH,MAAQ,GAAI,CAC1ET,QAAS6H,EAAc7H,UAE3B3E,KAAK6M,cAAc,eAAgBF,EACvC,GAEA,CAAAnO,IAAA,aAAAa,MAUA,SAAWmP,EAAsBC,EAAmBC,EAA2BC,GAE3E,IACMjC,EAAO,GAAH9M,OAAM8O,EAAiB,KAAA9O,OAAII,KAAK0M,MAEpCF,EAAgBxM,KAAK4F,UAAU6G,KACjC,CACInF,OALO,MAMPnB,SAAUnG,KAAKG,OACfyE,SAAU8H,EACVtG,KAAM,IAAFxG,OAAM+O,GACVhK,QAAS,CACL,oBAAqB,GAAF/E,OAAK4O,EAAY,KAAA5O,OAAI6O,KAGhD,CAAC,GAGC9B,EAAMC,KAAAA,QAhBG,MAgBkBJ,EAActG,IAAKsG,EAAcpH,MAAQ,KAAM,CAC5ET,QAAS6H,EAAc7H,UAG3B3E,KAAK6M,cAAc,aAAcF,EACrC,GAEA,CAAAnO,IAAA,wBAAAa,MAUA,SAAsBqO,EAAoBS,GAEtC,IAAM7G,EAAS,OACToF,EAAO,GAAH9M,OAAM8N,EAAU,KAAA9N,OAAII,KAAK0M,MAE7BF,EAAgBxM,KAAK4F,UAAU6G,KACjC,CACInF,OAAQA,EACRnB,SAAUnG,KAAKG,OACfyE,SAAU8H,EACVtG,KAAM,IAAFxG,OAAMuO,GACVxJ,QAAS,CAAC,EACV0B,MAAO,CAAEuI,QAAS,KAEtB,CAAC,GAGCjC,EAAMC,KAAAA,QAAatF,EAAQkF,EAActG,IAAKsG,EAAcpH,MAAQ,GAAI,CAC1ET,QAAS6H,EAAc7H,UAI3B,OAFA3E,KAAK6M,cAAc,wBAAyBF,GAErC,IAAIkC,GACPV,GACAlL,EAAAA,EAAAA,WAAU0J,EAAIvH,MACTlC,KAAK,YACLC,OAEb,GAEA,CAAA3E,IAAA,aAAAa,MAUA,SACIqO,EACAS,EACAW,EACAC,EACAT,GAGA,IACM5B,EAAO,GAAH9M,OAAM8N,EAAU,KAAA9N,OAAII,KAAK0M,MAC7BF,EAAgBxM,KAAK4F,UAAU6G,KACjC,CACInF,OAJO,MAKPnB,SAAUnG,KAAKG,OACfyE,SAAU8H,EACVtG,KAAM,IAAFxG,OAAMuO,GACVxJ,QAAS,CAAC,EACVS,KAAMkJ,EACNjI,MAAO,CACH0I,WAAY,GAAFnP,OAAKmP,GACfD,SAAU,GAAFlP,OAAKkP,KAGrB,CAAC,GAGCnC,EAAMC,KAAAA,QAlBG,MAkBkBJ,EAActG,IAAKsG,EAAcpH,MAAQ,GAAI,CAC1ET,QAAS6H,EAAc7H,UAI3B,OAFA3E,KAAK6M,cAAc,aAAcF,GAE1B,IAAIqC,GAAOD,EAAYpC,EAAIhI,QAAc,KACpD,GAEA,CAAAnG,IAAA,0BAAAa,MAUA,SACIqO,EACAS,EACAW,EACAG,GAGA,IAAM3H,EAAS,OACToF,EAAO,GAAH9M,OAAM8N,EAAU,KAAA9N,OAAII,KAAK0M,MAC7BtH,EAAO,4BAAHxF,OAA+BqP,EACpC7H,KACG,SAAC8H,GAAI,2BAAAtP,OACoBsP,EAAKH,WAAU,uBAAAnP,OAAsBsP,EAAKC,KAAI,qBAE1ElJ,KAAK,IAAG,8BACPuG,EAAgBxM,KAAK4F,UAAU6G,KACjC,CACInF,OAAQA,EACRnB,SAAUnG,KAAKG,OACfyE,SAAU8H,EACVtG,KAAM,IAAFxG,OAAMuO,GACVxJ,QAAS,CAAC,EACVS,KAAMA,EACNiB,MAAO,CACHyI,SAAU,GAAFlP,OAAKkP,KAGrB,CAAC,GAGCnC,EAAMC,KAAAA,QAAatF,EAAQkF,EAActG,IAAKsG,EAAcpH,MAAQ,GAAI,CAC1ET,QAAS6H,EAAc7H,UAG3B3E,KAAK6M,cAAc,0BAA2BF,EAClD,GAEA,CAAAnO,IAAA,uBAAAa,MASA,SAAqBqO,EAAoBS,EAAmBW,GAExD,IAAMxH,EAAS,SACToF,EAAO,GAAH9M,OAAM8N,EAAU,KAAA9N,OAAII,KAAK0M,MAC7BF,EAAgBxM,KAAK4F,UAAU6G,KACjC,CACInF,OAAQA,EACRnB,SAAUnG,KAAKG,OACfyE,SAAU8H,EACVtG,KAAM,IAAFxG,OAAMuO,GACVxJ,QAAS,CAAC,EACV0B,MAAO,CACHyI,SAAU,GAAFlP,OAAKkP,KAGrB,CAAC,GAGCnC,EAAMC,KAAAA,QAAatF,EAAQkF,EAActG,IAAKsG,EAAcpH,MAAQ,GAAI,CAC1ET,QAAS6H,EAAc7H,UAE3B3E,KAAK6M,cAAc,uBAAwBF,EAC/C,GAAC,CAAAnO,IAAA,gBAAAa,MAED,SAAc+P,EAAwBC,GAClC,IAAMC,EAAiBD,EAASC,OAC1BC,EAAoBF,EAASG,WAC7BC,EAAuBJ,EAASK,MAGtC,KAAIJ,GAAU,KAAOA,EAAS,KAAuB,IAAhBG,GAAoC,IAAdF,GAA3D,CAUA,GAAc,KAAVD,GAAkBG,GAAgBA,EAAavG,WAAW,OAC1D,MAAM,IAAIyG,GAAe,qBAAsB,mBAAoBP,GAGvE,IAAMQ,EAAWlN,EAASmN,SAASR,EAASjK,MAC5C,GACS,iCADDwK,EAASjN,KAET,MAAM,IAAIkE,GAAsB+I,EAAS7O,QAAS6O,EAASjN,MAE3D,MAAM,IAAIgN,GAAeC,EAAS7O,QAAS6O,EAASjN,MAAQ,UAAWyM,EAjB/E,CAmBJ,KAAChD,CAAA,CAregB,CCFC,WAWlB,SAAA0D,EAAYxD,EAAsBC,I,4FAAqB/M,CAAA,KAAAsQ,GAAArQ,GAAA,yBAAAA,GAAA,2BAAAA,GAAA,qBAAAA,GAAA,uBACnDO,KAAKsM,UAAYA,EACjBtM,KAAKuM,YAAcA,CACvB,C,UAiCD,O,EA/BCuD,G,EAAA,EAAAtR,IAAA,OAAAK,IAIA,WAII,OAHkBoB,MAAdD,KAAK+P,QACP/P,KAAK+P,MAAQ,GAAHnQ,OAAMI,KAAKuM,YAAW,KAAA3M,OAAII,KAAKsM,UAAU5M,OAAM,KAAAE,OAAII,KAAKsM,UAAUlM,WAEvEJ,KAAK+P,KAChB,EAACC,IAED,SAAgBtD,GACZ1M,KAAK+P,MAAQrD,CACjB,GAEE,CAAAlO,IAAA,SAAAK,IAKF,WAKE,OAHoBoB,MAAhBD,KAAKiQ,UACPjQ,KAAKiQ,QAAUjQ,KAAKsM,UAAUnM,QAEzBH,KAAKiQ,OACd,EAEAD,IACA,SAAkB7P,GAChBH,KAAKiQ,QAAU9P,CACnB,M,gFAAC2P,CAAA,CA/CmB,ID2eTI,GAAQ7P,IAUjB,SAAA6P,EAAYpN,EAAc2K,GAAoBjO,GAAA,KAAA0Q,GAAAzQ,GAAA,oBAAAA,GAAA,4BAC1CO,KAAK8C,KAAOA,EACZ9C,KAAKyN,aAAeA,CACxB,IAISY,GAAQhO,IAkBjB,SAAAgO,EACI7P,EACAsP,EACAC,EACAC,EACAE,EACAI,GACF9O,GAAA,KAAA6O,GAAA5O,GAAA,mBAAAA,GAAA,4BAAAA,GAAA,oBAAAA,GAAA,oBAAAA,GAAA,4BAAAA,GAAA,oBACEO,KAAKxB,IAAMA,EACXwB,KAAK8N,aAAeA,EACpB9N,KAAK+N,KAAOA,EACZ/N,KAAKgO,KAAOA,EACZhO,KAAKkO,aAAeA,EACpBlO,KAAKsO,KAAOA,CAChB,IAISO,GAAiBxO,IAU1B,SAAAwO,EAAYrQ,EAAasQ,GAAkBtP,GAAA,KAAAqP,GAAApP,GAAA,mBAAAA,GAAA,wBACvCO,KAAKxB,IAAMA,EACXwB,KAAK8O,SAAWA,CACpB,IAISE,GAAM3O,IAUf,SAAA2O,EAAYD,EAAoBI,GAAc3P,GAAA,KAAAwP,GAAAvP,GAAA,0BAAAA,GAAA,oBAC1CO,KAAK+O,WAAaA,EAClB/O,KAAKmP,KAAOA,CAChB,IAWSQ,GAAc,SAAAhE,GAAA/K,GAAA+O,EAAAhE,GAAA,IAAAwE,EAAArP,GAAA6O,GAUvB,SAAAA,EAAY5O,EAAiB4B,EAAcyM,GAAmB,IAAAgB,EAGhC,OAHgC5Q,GAAA,KAAAmQ,GACtClQ,GAAAoD,GAApBuN,EAAAD,EAAAjR,KAAA,KAAM6B,EAAS4B,IAAK,oBACpByN,EAAKtN,KAAO,iBACZsN,EAAKhB,UAAYA,EAASgB,CAC9B,CAAC,OAAA/P,GAAAsP,EAAA,CAdsB,CAASjN,G","sources":["webpack://k6-jslib-aws/webpack/bootstrap","webpack://k6-jslib-aws/webpack/runtime/compat get default export","webpack://k6-jslib-aws/webpack/runtime/define property getters","webpack://k6-jslib-aws/webpack/runtime/hasOwnProperty shorthand","webpack://k6-jslib-aws/webpack/runtime/make namespace object","webpack://k6-jslib-aws/./src/internal/config.ts","webpack://k6-jslib-aws/external commonjs \"k6/crypto\"","webpack://k6-jslib-aws/./src/internal/constants.ts","webpack://k6-jslib-aws/external commonjs \"k6/html\"","webpack://k6-jslib-aws/./src/internal/error.ts","webpack://k6-jslib-aws/./src/internal/signature.ts","webpack://k6-jslib-aws/./src/internal/http.ts","webpack://k6-jslib-aws/./src/internal/utils.ts","webpack://k6-jslib-aws/external commonjs \"k6/http\"","webpack://k6-jslib-aws/./src/internal/s3.ts","webpack://k6-jslib-aws/./src/internal/client.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { HTTPScheme } from './http'\n\n/** Class holding an AWS connection information */\nexport class AWSConfig {\n    /**\n     * The AWS region to connect to, as listed: https://docs.aws.amazon.com/general/latest/gr/rande.html\n     *\n     * @type {string}\n     */\n    region: string\n\n    /**\n     * Your user's AWS access key id credential.\n     *\n     * @type {string}\n     */\n    accessKeyId: string\n\n    /**\n     * Your user's AWS secret access key credential.\n     *\n     * @type {string}\n     */\n    secretAccessKey: string\n\n    /**\n     * Your user's AWS session token credential.\n     *\n     * @type {string}\n     */\n    sessionToken?: string\n\n    /**\n     * The HTTP scheme to use when connecting to AWS.\n     *\n     * @type {HTTPScheme} ['https']\n     */\n    scheme: HTTPScheme = 'https'\n\n    // FIXME: Should really be called \"host\" instead. When used\n    // with localstack we pass a complete host (hostname:port) here.\n    /**\n     * The AWS hostname to connect to.\n     *\n     * @type {string} ['amazonaws.com']\n     */\n    endpoint: string = 'amazonaws.com'\n\n    /**\n     * fromEnvironment creates an AWSConfig from the environment variables.\n     *\n     * It expects to find the following compulsory environment variables:\n     *  * AWS_REGION\n     *  * AWS_ACCESS_KEY_ID\n     *  * AWS_SECRET_ACCESS_KEY\n     *\n     * If set, the following optional environment variables are also used:\n     *  * AWS_SESSION_TOKEN\n     *\n     * Finally, the options parameter allows to explicitly set the scheme and endpoint\n     * to use when connecting to AWS.\n     *\n     * @param options {AWSConnectionOptions}\n     * @returns\n     */\n    static fromEnvironment(options?: AWSConnectionOptions): AWSConfig {\n        const region = __ENV.AWS_REGION;\n        const accessKeyId = __ENV.AWS_ACCESS_KEY_ID;\n        const secretAccessKey = __ENV.AWS_SECRET_ACCESS_KEY;\n        const sessionToken: string | undefined = __ENV.AWS_SESSION_TOKEN;\n        const scheme: HTTPScheme | undefined = options?.scheme;\n        const endpoint: string | undefined = options?.endpoint;\n\n        return new AWSConfig({\n            region,\n            accessKeyId,\n            secretAccessKey,\n            sessionToken,\n            scheme: scheme,\n            endpoint: endpoint,\n        })\n    }\n\n    /**\n     * Create an AWSConfig.\n     *\n     * @param {AWSConfigOptions} options - configuration attributes to use when interacting with AWS' APIs\n     * @throws {InvalidArgumentException}\n     */\n    constructor(options: AWSConfigOptions) {\n        if (!options.region || options.region === '') {\n            throw new InvalidAWSConfigError(\n                `invalid AWS region; reason: expected a valid AWS region name (e.g. \"us-east-1\"), got \\`${options.region}\\``\n            )\n        }\n\n        if (!options.accessKeyId || options.accessKeyId === '') {\n            throw new InvalidAWSConfigError(\n                `invalid AWS access key ID; reason: expected a non empty string, got \\`${options.accessKeyId}\\``\n            )\n        }\n\n        if (options.accessKeyId.length < 16 || options.accessKeyId.length > 128) {\n            throw new InvalidAWSConfigError(\n                `invalid AWS access key ID; reason: size should be between 16 and 128 characters, got ${options.accessKeyId.length}`\n            )\n        }\n\n        if (!options.secretAccessKey || options.secretAccessKey === '') {\n            throw new InvalidAWSConfigError(\n                `invalid AWS secret access key; reason: expected a non empty string, got \\`${options.secretAccessKey}\\``\n            )\n        }\n\n        if (options.secretAccessKey.length < 16 || options.secretAccessKey.length > 128) {\n            throw new InvalidAWSConfigError(\n                `invalid AWS secret access key; reason: size should be between 16 and 128 characters, got ${options.secretAccessKey.length}`\n            )\n        }\n\n        this.region = options.region\n        this.accessKeyId = options.accessKeyId\n        this.secretAccessKey = options.secretAccessKey\n\n        if (options.sessionToken !== undefined) {\n            this.sessionToken = options.sessionToken\n        }\n\n        if (options.scheme !== undefined) {\n            this.scheme = options.scheme\n        }\n\n        if (options.endpoint !== undefined) {\n            this.endpoint = options.endpoint\n        }\n    }\n}\n\n/**\n * Interface representing AWSConfig options\n */\nexport interface AWSConfigOptions extends AWSConnectionOptions {\n    /**\n     * The AWS region to connect to, as listed: https://docs.aws.amazon.com/general/latest/gr/rande.html\n     *\n     * @type {string}\n     */\n    region: string\n\n    /**\n     * Your user's AWS access key id credential.\n     *\n     * @type {string}\n     */\n    accessKeyId: string\n\n    /**\n     * Your user's AWS secret access key credential.\n     *\n     * @type {string}\n     */\n    secretAccessKey: string\n\n    /**\n     * Your user's AWS session token credential.\n     *\n     * @type {string}\n     */\n    sessionToken?: string\n}\n\n/**\n * Interface representing AWS connection options\n */\nexport interface AWSConnectionOptions {\n    /**\n     * The HTTP scheme to use when connecting to AWS.\n     *\n     * @type {HTTPScheme}\n     */\n    scheme?: HTTPScheme\n\n    /**\n     * The AWS hostname to connect to.\n     *\n     * @type {string}\n     */\n    endpoint?: string\n}\n\n/** Class representing an invalid AWS configuration */\nexport class InvalidAWSConfigError extends Error {\n    constructor(message: string) {\n        super(message)\n    }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"k6/crypto\");","/**\n * Standard Amazon AWS query parameter names\n */\nexport const AMZ_ALGORITHM_QUERY_PARAM = 'X-Amz-Algorithm'\nexport const AMZ_CREDENTIAL_QUERY_PARAM = 'X-Amz-Credential'\nexport const AMZ_DATE_QUERY_PARAM = 'X-Amz-Date'\nexport const AMZ_EXPIRES_QUERY_PARAM = 'X-Amz-Expires'\nexport const AMZ_SIGNATURE_QUERY_PARAM = 'X-Amz-Signature'\nexport const AMZ_SIGNED_HEADERS_QUERY_PARAM = 'X-Amz-SignedHeaders'\nexport const AMZ_TARGET_QUERY_PARAM = 'X-Amz-Target'\nexport const AMZ_TOKEN_QUERY_PARAM = 'X-Amz-Security-Token'\n\n/**\n * Standard Amazon AWS header names\n */\nexport const AMZ_CONTENT_SHA256_HEADER = 'x-amz-content-sha256'\nexport const AMZ_DATE_HEADER = AMZ_DATE_QUERY_PARAM.toLowerCase()\nexport const AMZ_SIGNATURE_HEADER = AMZ_SIGNATURE_QUERY_PARAM.toLowerCase()\nexport const AMZ_TARGET_HEADER = AMZ_TARGET_QUERY_PARAM.toLowerCase()\nexport const AMZ_TOKEN_HEADER = AMZ_TOKEN_QUERY_PARAM.toLowerCase()\n\n/**\n * Common HTTP headers we rely on in the signing process\n */\nexport const AUTHORIZATION_HEADER = 'authorization'\nexport const DATE_HEADER = 'date'\n\n/**\n * Lists the headers that are generated as part of the signature process.\n */\nexport const GENERATED_HEADERS = [AUTHORIZATION_HEADER, AMZ_DATE_HEADER, DATE_HEADER]\nexport const HOST_HEADER = 'host'\n\n/**\n * Lists the headers that should never be included in the\n * request signature signature process.\n */\nexport const ALWAYS_UNSIGNABLE_HEADERS = {\n    authorization: true,\n    'cache-control': true,\n    connection: true,\n    expect: true,\n    from: true,\n    'keep-alive': true,\n    'max-forwards': true,\n    pragma: true,\n    referer: true,\n    te: true,\n    trailer: true,\n    'transfer-encoding': true,\n    upgrade: true,\n    'user-agent': true,\n    'x-amzn-trace-id': true,\n}\n\n/**\n * Signature specific constants included in the signing process\n */\nexport const KEY_TYPE_IDENTIFIER = 'aws4_request'\nexport const SIGNING_ALGORITHM_IDENTIFIER = 'AWS4-HMAC-SHA256'\n\n/**\n * Maximum time to live of a signed request in seconds: 7 days.\n */\nexport const MAX_PRESIGNED_TTL = 60 * 60 * 24 * 7\n\n/**\n * SHA256 hash of an empty string (so we don't waste cycles recomputing it)\n */\nexport const EMPTY_SHA256 = 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\n\n/**\n * SHA256 hash of the unsigned payload constant (so we don't waste cycles recomputing it)\n */\nexport const UNSIGNED_PAYLOAD_SHA256 =\n    '5a41b0751e4537c6ff868564ab44a4d4ecceec2ec5b1c5f74d97422968e04237'\n\nexport const UNSIGNED_PAYLOAD = 'UNSIGNED-PAYLOAD'\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"k6/html\");","import { parseHTML } from 'k6/html'\n\n/**\n * Base class to derive errors from\n *\n * Inspired from AWS official error types, as\n * described in:\n *   * https://aws.amazon.com/blogs/developer/service-error-handling-modular-aws-sdk-js/\n *   * https://github.com/aws/aws-sdk-js/blob/master/lib/error.d.ts\n */\nexport class AWSError extends Error {\n    /**\n     * Error code issued by the service (if any)\n     */\n    code?: string\n\n    /**\n     * Create an AWSError\n     *\n     * @param {string} message - A longer human readable error message.\n     * @param {string?} code - A unique short code representing the error that was emitted\n     */\n    constructor(message: string, code?: string) {\n        super(message)\n        this.name = 'AWSError'\n        this.code = code\n    }\n\n    /**\n     * Parse an AWSError from an XML document\n     *\n     * @param  {string} xmlDocument - Serialized XML document to parse the error from\n     */\n    static parseXML(xmlDocument: string): AWSError {\n        const doc = parseHTML(xmlDocument)\n        return new AWSError(doc.find('Message').text(), doc.find('Code').text())\n    }\n}\n","import crypto from 'k6/crypto'\n\nimport * as constants from './constants'\nimport { AWSError } from './error'\nimport { hasHeader, HTTPHeaderBag, HTTPRequest, QueryParameterBag, SignedHTTPRequest } from './http'\nimport { isArrayBuffer } from './utils'\n\n/**\n * SignatureV4 can be used to sign HTTP requests and presign URLs using the AWS Signature\n * Version 4 signing process.\n *\n * It offers two signing methods:\n * - sign: signs the request headers and payload\n * - presign: returns a presigned (authorization information contained in the query string) URL\n *\n * @see https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html\n */\nexport class SignatureV4 {\n    /**\n     * The name of the service to sign for.\n     */\n    private readonly service: string\n\n    /**\n     * The name of the region to sign for.\n     */\n    private readonly region: string\n\n    /**\n     * The credentials with which the request should be signed.\n     */\n    private readonly credentials: Credentials\n\n    /**\n     * Whether to uri-escape the request URI path as part of computing the\n     * canonical request string. This is required for every AWS service, except\n     * Amazon S3, as of late 2017.\n     *\n     * @default [true]\n     */\n    private readonly uriEscapePath: boolean\n\n    /**\n     * Whether to calculate a checksum of the request body and include it as\n     * either a request header (when signing) or as a query string parameter\n     * (when presigning). This is required for AWS Glacier and Amazon S3 and optional for\n     * every other AWS service as of late 2017.\n     *\n     * @default [true]\n     */\n    private readonly applyChecksum: boolean\n\n    // TODO: uriEscapePath and applyChecksum should not be present in the constructor\n    constructor({\n        service,\n        region,\n        credentials,\n        uriEscapePath,\n        applyChecksum,\n    }: SignatureV4Options) {\n        this.service = service\n        this.region = region\n        this.credentials = credentials\n        this.uriEscapePath = typeof uriEscapePath === 'boolean' ? uriEscapePath : true\n        this.applyChecksum = typeof applyChecksum === 'boolean' ? applyChecksum : true\n    }\n\n    /**\n     * Includes AWS v4 signing information to the provided HTTP request.\n     *\n     * This method adds an Authorization header to the request, containing\n     * the signature and other signing information. It also returns a preformatted\n     * URL that can be used to make the k6 http request.\n     *\n     * This method mutates the request object.\n     *\n     * @param request {HTTPRequest} The request to sign.\n     * @param options {Partial<RequestSigningOptions>} Options for signing the request.\n     * @returns {SignedHTTPRequest} The signed request.\n     */\n    sign(request: HTTPRequest, options: Partial<RequestSigningOptions> = {}): SignedHTTPRequest {\n        // Set default values for options which are not provided by the user.\n        const defaultOptions = {\n            signingDate: new Date(),\n            unsignableHeaders: new Set<string>(),\n            signableHeaders: new Set<string>(),\n        }\n\n        // Merge default options with the ones maybe provided by the user.\n        const finalOptions = { ...defaultOptions, ...options }\n\n        const { longDate, shortDate }: DateInfo = formatDate(finalOptions.signingDate)\n        const service = finalOptions.signingService || this.service\n        const region = finalOptions.signingRegion || this.region\n        const scope = `${shortDate}/${region}/${service}/${constants.KEY_TYPE_IDENTIFIER}`\n\n        // Required by the specification:\n        //   \"For HTTP/1.1 requests, you must include the host header at a minimum.\n        //   Standard headers like content-type are optional.\n        //   For HTTP/2 requests, you must include the :authority header instead of\n        //   the host header. Different services might require other headers.\"\n        request.headers[constants.HOST_HEADER] = request.hostname\n\n        // Filter out headers that will be generated and managed by the signing process.\n        // If the user provide any of those as part of the HTTPRequest's headers, they\n        // will be ignored.\n        for (const headerName of Object.keys(request.headers)) {\n            if (constants.GENERATED_HEADERS.indexOf(headerName.toLowerCase()) > -1) {\n                delete request.headers[headerName]\n            }\n        }\n\n        request.headers[constants.AMZ_DATE_HEADER] = longDate\n        if (this.credentials.sessionToken) {\n            request.headers[constants.AMZ_TOKEN_HEADER] = this.credentials.sessionToken\n        }\n\n        // If the request body is a typed array, we need to convert it to a buffer\n        // so that we can calculate the checksum.\n        if (ArrayBuffer.isView(request.body)) {\n            request.body = request.body.buffer\n        }\n\n        // Ensure we avoid passing undefined to the crypto hash function.\n        if (!request.body) {\n            request.body = ''\n        }\n\n        let payloadHash = this.computePayloadHash(request)\n        if (\n            !hasHeader(constants.AMZ_CONTENT_SHA256_HEADER, request.headers) &&\n            this.applyChecksum\n        ) {\n            request.headers[constants.AMZ_CONTENT_SHA256_HEADER] = payloadHash\n        }\n\n        const canonicalHeaders = this.computeCanonicalHeaders(\n            request,\n            finalOptions.unsignableHeaders,\n            finalOptions.signableHeaders\n        )\n        const signature = this.calculateSignature(\n            longDate,\n            scope,\n            this.deriveSigningKey(this.credentials, service, region, shortDate),\n            this.createCanonicalRequest(request, canonicalHeaders, payloadHash)\n        )\n\n        /**\n         * Step 4 of the signing process: add the signature to the HTTP request's headers.\n         *\n         * @see https://docs.aws.amazon.com/general/latest/gr/sigv4-add-signature-to-request.html\n         */\n        request.headers[constants.AUTHORIZATION_HEADER] =\n            `${constants.SIGNING_ALGORITHM_IDENTIFIER} ` +\n            `Credential=${this.credentials.accessKeyId}/${scope}, ` +\n            `SignedHeaders=${Object.keys(canonicalHeaders).sort().join(';')}, ` +\n            `Signature=${signature}`\n\n        // If a request path was provided, add it to the URL\n        let url = `${request.protocol}://${request.hostname}`\n        if (request.path) {\n            url += request.path\n        }\n\n        // If a request query string was provided, add it to the URL\n        if (request.query) {\n            // We exclude the signature from the query string\n            url += `?${this.serializeQueryParameters(request.query)}`\n        }\n\n        return {\n            url: url,\n            ...request,\n        }\n    }\n\n    /**\n     * Produces a presigned URL with AWS v4 signature information for the provided HTTP request.\n     *\n     * A presigned URL is a URL that contains the authorization information\n     * (signature and other signing information) in the query string. This method\n     * returns a preformatted URL that can be used to make the k6 http request.\n     *\n     * @param originalRequest - The original request to presign.\n     * @param options - Options controlling the signing of the request.\n     * @returns A signed request, including the presigned URL.\n     */\n    presign(originalRequest: HTTPRequest, options: PresignOptions = {}): SignedHTTPRequest {\n        const {\n            signingDate = new Date(),\n            expiresIn = 3600,\n            unsignableHeaders,\n            unhoistableHeaders,\n            signableHeaders,\n            signingRegion,\n            signingService,\n        } = options\n        const { longDate, shortDate }: DateInfo = formatDate(signingDate)\n        const region = signingRegion || this.region\n        const service = signingService || this.service\n\n        if (expiresIn > constants.MAX_PRESIGNED_TTL) {\n            throw new InvalidSignatureError(\n                \"Signature version 4 presigned URLs can't be valid for more than 7 days\"\n            )\n        }\n\n        const scope = `${shortDate}/${region}/${service}/${constants.KEY_TYPE_IDENTIFIER}`\n        const request = this.moveHeadersToQuery(originalRequest, { unhoistableHeaders })\n\n        // Required by the specification:\n        //   \"For HTTP/1.1 requests, you must include the host header at a minimum.\n        //   Standard headers like content-type are optional.\n        //   For HTTP/2 requests, you must include the :authority header instead of\n        //   the host header. Different services might require other headers.\"\n        request.headers[constants.HOST_HEADER] = originalRequest.hostname\n\n        // If the user provided a session token, include it in the signed url query string.\n        if (this.credentials.sessionToken) {\n            request.query[constants.AMZ_TOKEN_QUERY_PARAM] = this.credentials.sessionToken\n        }\n\n        // Add base signing query parameters to the request, as described in the documentation\n        // @see https://docs.aws.amazon.com/general/latest/gr/sigv4-add-signature-to-request.html\n        request.query[constants.AMZ_ALGORITHM_QUERY_PARAM] = constants.SIGNING_ALGORITHM_IDENTIFIER\n        request.query[\n            constants.AMZ_CREDENTIAL_QUERY_PARAM\n        ] = `${this.credentials.accessKeyId}/${scope}`\n        request.query[constants.AMZ_DATE_QUERY_PARAM] = longDate\n        request.query[constants.AMZ_EXPIRES_QUERY_PARAM] = expiresIn.toString(10)\n\n        const canonicalHeaders = this.computeCanonicalHeaders(\n            request,\n            unsignableHeaders,\n            signableHeaders\n        )\n        request.query[constants.AMZ_SIGNED_HEADERS_QUERY_PARAM] = Object.keys(canonicalHeaders)\n            .sort()\n            .join(';')\n\n        const signingKey = this.deriveSigningKey(this.credentials, service, region, shortDate)\n\n        // Computing the payload from the original request. This is required\n        // in the event the user attempts to produce a presigned URL for s3,\n        // which requires the payload hash to be 'UNSIGNED-PAYLOAD'.\n        //\n        // To that effect, users need to set the 'x-amz-content-sha256' header,\n        // and mark it as unhoistable and unsignable. When setup this way,\n        // the computePayloadHash method will then return the string 'UNSIGNED-PAYLOAD'.\n        const payloadHash = this.computePayloadHash(originalRequest)\n        const canonicalRequest = this.createCanonicalRequest(request, canonicalHeaders, payloadHash)\n\n        request.query[constants.AMZ_SIGNATURE_QUERY_PARAM] = this.calculateSignature(\n            longDate,\n            scope,\n            signingKey,\n            canonicalRequest\n        )\n\n        // If a request path was provided, add it to the URL\n        let url = `${request.protocol}://${request.hostname}`\n        if (request.path) {\n            url += request.path\n        }\n\n        // If a request query string was provided, add it to the URL\n        if (request.query) {\n            url += `?${this.serializeQueryParameters(request.query)}`\n        }\n\n        return { url: url, ...request }\n    }\n\n    /**\n     * Create a string including information from your request\n     * in a AWS signature v4 standardized (canonical) format.\n     *\n     * Step 1 of the signing process: create the canonical request string.\n     * @see https://docs.aws.amazon.com/general/latest/gr/sigv4-create-canonical-request.html\n     *\n     * @param request {HTTPRequest} The request to sign.\n     * @param canonicalHeaders {HTTPHeaderBag} The request's canonical headers.\n     * @param payloadHash {string} The hexadecimally encoded request's payload hash .\n     * @returns {string} The canonical request string.\n     */\n    private createCanonicalRequest(\n        request: HTTPRequest,\n        canonicalHeaders: HTTPHeaderBag,\n        payloadHash: string\n    ): string {\n        const sortedHeaders = Object.keys(canonicalHeaders).sort()\n        const sortedCanonicalHeaders = sortedHeaders\n            .map((name) => `${name}:${canonicalHeaders[name]}`)\n            .join('\\n')\n        const signedHeaders = sortedHeaders.join(';')\n\n        return (\n            `${request.method}\\n` +\n            `${this.computeCanonicalURI(request)}\\n` +\n            `${this.computeCanonicalQuerystring(request)}\\n` +\n            `${sortedCanonicalHeaders}\\n\\n` +\n            `${signedHeaders}\\n` +\n            `${payloadHash}`\n        )\n    }\n\n    /**\n     * Create the \"string to sign\" part of the signature Version 4 protocol.\n     *\n     * The \"string to sign\" includes meta information about your request and\n     * about the canonical request that you created with `createCanonicalRequest`.\n     * It is used hand in hand with the signing key to create the request signature.\n     * Step 2 of the signing process: create the string to sign.\n     * @see https://docs.aws.amazon.com/general/latest/gr/sigv4-create-string-to-sign.html\n     *\n     * @param longDate {string} The request's date in iso 8601 format.\n     * @param credentialScope {string} The request's credential scope.\n     * @param canonicalRequest {string} The request's canonical request.\n     * @returns {string} The \"string to sign\".\n     */\n    private createStringToSign(\n        longDate: string,\n        credentialScope: string,\n        canonicalRequest: string\n    ): string {\n        const hashedCanonicalRequest = crypto.sha256(canonicalRequest, 'hex')\n\n        return (\n            `${constants.SIGNING_ALGORITHM_IDENTIFIER}\\n` +\n            `${longDate}\\n` +\n            `${credentialScope}\\n` +\n            `${hashedCanonicalRequest}`\n        )\n    }\n\n    /**\n     * Calculte the signature for AWS signature version 4.\n     *\n     * Step 3 of the signing process: create the signature.\n     * @see https://docs.aws.amazon.com/general/latest/gr/sigv4-calculate-signature.html\n     *\n     * @param longDate {string} The request's date in iso 8601 format.\n     * @param credentialScope {string} The request's credential scope.\n     * @param signingKey {string} the signing key as computed by the deriveSigningKey method.\n     * @param canonicalRequest {string} The request's canonical request.\n     * @returns {string} The signature.\n     */\n    private calculateSignature(\n        longDate: string,\n        credentialScope: string,\n        signingKey: Uint8Array,\n        canonicalRequest: string\n    ): string {\n        const stringToSign = this.createStringToSign(longDate, credentialScope, canonicalRequest)\n        return crypto.hmac('sha256', signingKey, stringToSign, 'hex')\n    }\n\n    /**\n     * Derives the signing key for authenticating requests signed with\n     * the Signature version 4 authentication protocol.\n     *\n     * deriveSigningKey produces a signing key by creating a series of\n     * hash-based message authentication codes (HMACs) represented in\n     * a binary format.\n     *\n     * The derived signing key is specific to the date it's made at, as well as\n     * the service and region it targets.\n     *\n     * @param credentials {AWSCredentials} The credentials to use for signing.\n     * @param service {string} The service the request is targeted at.\n     * @param region {string} The region the request is targeted at.\n     * @param shortDate {string} The request's date in YYYYMMDD format.\n     * @returns {Uint8Array} The derived signing key.\n     */\n    private deriveSigningKey(\n        credentials: Credentials,\n        service: string,\n        region: string,\n        shortDate: string\n    ): Uint8Array {\n        const kSecret: string = credentials.secretAccessKey\n        const kDate: any = crypto.hmac('sha256', 'AWS4' + kSecret, shortDate, 'binary')\n        const kRegion: any = crypto.hmac('sha256', kDate, region, 'binary')\n        const kService: any = crypto.hmac('sha256', kRegion, service, 'binary')\n        const kSigning: any = crypto.hmac('sha256', kService, 'aws4_request', 'binary')\n\n        return kSigning\n    }\n\n    /**\n     * Create a string that includes information from your request\n     * in a AWS signature v4 standardized (canonical) format.\n     *\n     * @param param0 {HTTPRequest} The request to sign.\n     * @returns {string} The canonical URI.\n     */\n    private computeCanonicalURI({ path }: HTTPRequest): string {\n        if (this.uriEscapePath) {\n            // Non-S3 services, we normalize the path and then double URI encode it.\n            // Ref: \"Remove Dot Segments\" https://datatracker.ietf.org/doc/html/rfc3986#section-5.2.4\n            const normalizedURISegments = []\n\n            for (const URISegment of path.split('/')) {\n                if (URISegment?.length === 0) {\n                    continue\n                }\n\n                if (URISegment === '.') {\n                    continue\n                }\n\n                if (URISegment === '..') {\n                    normalizedURISegments.pop()\n                } else {\n                    normalizedURISegments.push(URISegment)\n                }\n            }\n\n            // Normalize the URI\n            const leading = path?.startsWith('/') ? '/' : ''\n            const URI = normalizedURISegments.join('/')\n            const trailing = normalizedURISegments.length > 0 && path?.endsWith('/') ? '/' : ''\n            const normalizedURI = `${leading}${URI}${trailing}`\n\n            const doubleEncoded = encodeURIComponent(normalizedURI)\n\n            return doubleEncoded.replace(/%2F/g, '/')\n        }\n\n        // For S3, we shouldn't normalize the path. For example, object name\n        // my-object//example//photo.user should not be normalized to\n        // my-object/example/photo.user\n        return path\n    }\n\n    /**\n     * Serializes the request's query parameters into their canonical\n     * string version. If the request does not include a query parameters,\n     * returns an empty string.\n     *\n     * @param param0 {HTTPRequest} The request containing the query parameters.\n     * @returns {string} The canonical query string.\n     */\n    private computeCanonicalQuerystring({ query = {} }: HTTPRequest): string {\n        const keys: Array<string> = []\n        const serialized: Record<string, string> = {}\n\n        for (const key of Object.keys(query).sort()) {\n            if (key.toLowerCase() === constants.AMZ_SIGNATURE_HEADER) {\n                continue\n            }\n\n            keys.push(key)\n            const value = query[key]\n\n            if (typeof value === 'string') {\n                serialized[key] = `${escapeURI(key)}=${escapeURI(value)}`\n            } else if (Array.isArray(value)) {\n                serialized[key] = value\n                    .slice(0)\n                    .sort()\n                    .reduce(\n                        (encoded: Array<string>, value: string) =>\n                            encoded.concat([`${escapeURI(key)}=${escapeURI(value)}`]),\n                        []\n                    )\n                    .join('&')\n            }\n        }\n\n        return keys\n            .map((key) => serialized[key])\n            .filter((serialized) => serialized)\n            .join('&')\n    }\n\n    /**\n     * Create the canonical form of the request's headers.\n     * Canonical headers consist of all the HTTP headers you\n     * are including with the signed request.\n     *\n     * @param param0 {HTTPRequest} The request to compute the canonical headers of.\n     * @param unsignableHeaders {Set<string>} The headers that should not be signed.\n     * @param signableHeaders {Set<string>} The headers that should be signed.\n     * @returns {string} The canonical headers.\n     */\n    private computeCanonicalHeaders(\n        { headers }: HTTPRequest,\n        unsignableHeaders?: Set<string>,\n        signableHeaders?: Set<string>\n    ): HTTPHeaderBag {\n        const canonicalHeaders: HTTPHeaderBag = {}\n\n        for (const headerName of Object.keys(headers).sort()) {\n            if (headers[headerName] == undefined) {\n                continue\n            }\n\n            const canonicalHeaderName = headerName.toLowerCase()\n            if (\n                canonicalHeaderName in constants.ALWAYS_UNSIGNABLE_HEADERS ||\n                unsignableHeaders?.has(canonicalHeaderName)\n            ) {\n                if (\n                    !signableHeaders ||\n                    (signableHeaders && !signableHeaders.has(canonicalHeaderName))\n                ) {\n                    continue\n                }\n            }\n\n            canonicalHeaders[canonicalHeaderName] = headers[headerName].trim().replace(/\\s+/g, ' ')\n        }\n\n        return canonicalHeaders\n    }\n\n    /**\n     * Computes the SHA256 cryptographic hash of the request's body.\n     *\n     * If the headers contain the 'X-Amz-Content-Sha256' header, then\n     * the value of that header is returned instead. This proves useful\n     * when, for example, presiging a URL for S3, as the payload hash\n     * must always be equal to 'UNSIGNED-PAYLOAD'.\n     *\n     * @param param0 {HTTPRequest} The request to compute the payload hash of.\n     * @returns {string} The hex encoded SHA256 payload hash, or the value of the 'X-Amz-Content-Sha256' header.\n     */\n    private computePayloadHash({ headers, body }: HTTPRequest): string {\n        // for (const headerName of Object.keys(headers)) {\n        //     // If the header is present, return its value.\n        //     // So that we let the 'UNSIGNED-PAYLOAD' value pass through.\n        //     if (headerName.toLowerCase() === constants.AMZ_CONTENT_SHA256_HEADER) {\n        //         return headers[headerName]\n        //     }\n        // }\n\n        if (headers[constants.AMZ_CONTENT_SHA256_HEADER]) {\n            return headers[constants.AMZ_CONTENT_SHA256_HEADER]\n        }\n\n        if (body == undefined) {\n            return constants.EMPTY_SHA256\n        }\n\n        if (typeof body === 'string' || isArrayBuffer(body)) {\n            return crypto.sha256(body, 'hex').toLowerCase()\n        }\n\n        if (ArrayBuffer.isView(body)) {\n            // If the request body is a typed array, we need to convert it to a buffer\n            // so that we can calculate the checksum.\n            return crypto.sha256((body as DataView).buffer, 'hex').toLowerCase()\n        }\n\n        return constants.UNSIGNED_PAYLOAD\n    }\n\n    /**\n     * Moves a request's headers to its query parameters.\n     *\n     * The operation will ignore any amazon standard headers, prefixed\n     * with 'X-Amz-'. It will also ignore any headers specified as unhoistable\n     * by the options.\n     *\n     * The operation will delete the headers from the request.\n     *\n     * @param request {HTTPRequest} The request to move the headers from.\n     * @param options\n     * @returns {HTTPRequest} The request with the headers moved to the query parameters.\n     */\n    private moveHeadersToQuery(\n        request: HTTPRequest,\n        options: { unhoistableHeaders?: Set<string> } = {}\n    ): HTTPRequest & { query: QueryParameterBag } {\n        const requestCopy = JSON.parse(JSON.stringify(request))\n        const { headers, query = {} as QueryParameterBag } = requestCopy\n\n        for (const name of Object.keys(headers)) {\n            const lowerCaseName = name.toLowerCase()\n            if (\n                lowerCaseName.slice(0, 6) === 'x-amz-' &&\n                !options.unhoistableHeaders?.has(lowerCaseName)\n            ) {\n                query[name] = headers[name]\n                delete headers[name]\n            }\n        }\n\n        return {\n            ...requestCopy,\n            headers,\n            query,\n        }\n    }\n\n    /**\n     * Serializes a HTTPRequest's query parameter bag into a string.\n     *\n     * @param query {QueryParameterBag} The query parameters to serialize.\n     * @param ignoreKeys {Set<string>} The keys to ignore.\n     * @returns {string} The serialized, and ready to use in a URL, query parameters.\n     */\n    private serializeQueryParameters(query: QueryParameterBag, ignoreKeys?: string[]): string {\n        const keys: Array<string> = []\n        const serialized: Record<string, string> = {}\n\n        for (const key of Object.keys(query).sort()) {\n            if (ignoreKeys?.includes(key.toLowerCase())) {\n                continue\n            }\n\n            keys.push(key)\n            const value = query[key]\n\n            if (typeof value === 'string') {\n                serialized[key] = `${escapeURI(key)}=${escapeURI(value)}`\n            } else if (Array.isArray(value)) {\n                serialized[key] = value\n                    .slice(0)\n                    .sort()\n                    .reduce(\n                        (encoded: Array<string>, value: string) =>\n                            encoded.concat([`${escapeURI(key)}=${escapeURI(value)}`]),\n                        []\n                    )\n                    .join('&')\n            }\n        }\n\n        return keys\n            .map((key) => serialized[key])\n            .filter((serialized) => serialized)\n            .join('&')\n    }\n}\n\n/**\n * Error indicating an Invalid signature has been sent to AWS services\n *\n * Inspired from AWS official error types, as\n * described in:\n *   * https://aws.amazon.com/blogs/developer/service-error-handling-modular-aws-sdk-js/\n *   * https://github.com/aws/aws-sdk-js/blob/master/lib/error.d.ts\n */\nexport class InvalidSignatureError extends AWSError {\n    /**\n     * Constructs an InvalidSignatureError\n     *\n     * @param  {string} message - human readable error message\n     */\n    constructor(message: string, code?: string) {\n        super(message, code)\n        this.name = 'InvalidSignatureError'\n    }\n}\n\nexport interface SignatureV4Options {\n    /**\n     * The name of the service to sign for.\n     */\n    service: string\n\n    /**\n     * The name of the region to sign for.\n     */\n    region: string\n\n    /**\n     * The credentials with which the request should be signed.\n     */\n    credentials: Credentials\n\n    /**\n     * Whether to uri-escape the request URI path as part of computing the\n     * canonical request string. This is required for every AWS service, except\n     * Amazon S3, as of late 2017.\n     *\n     * @default [true]\n     */\n    uriEscapePath?: boolean\n\n    /**\n     * Whether to calculate a checksum of the request body and include it as\n     * either a request header (when signing) or as a query string parameter\n     * (when presigning). This is required for AWS Glacier and Amazon S3 and optional for\n     * every other AWS service as of late 2017.\n     *\n     * @default [true]\n     */\n    applyChecksum?: boolean\n}\n\nexport interface SignOptions {\n    /**\n     * The date and time to be used as signature metadata. This value should be\n     * a Date object, a unix (epoch) timestamp, or a string that can be\n     * understood by the JavaScript `Date` constructor.If not supplied, the\n     * value returned by `new Date()` will be used.\n     */\n    signingDate?: Date\n\n    /**\n     * The service signing name. It will override the service name of the signer\n     * in current invocation\n     */\n    signingService?: string\n\n    /**\n     * The region name to sign the request. It will override the signing region of the\n     * signer in current invocation\n     */\n    signingRegion?: string\n}\n\nexport interface RequestSigningOptions extends SignOptions {\n    /**\n     * A set of strings whose members represents headers that cannot be signed.\n     * All headers in the provided request will have their names converted to\n     * lower case and then checked for existence in the unsignableHeaders set.\n     */\n    unsignableHeaders?: Set<string>\n\n    /**\n     * A set of strings whose members represents headers that should be signed.\n     * Any values passed here will override those provided via unsignableHeaders,\n     * allowing them to be signed.\n     *\n     * All headers in the provided request will have their names converted to\n     * lower case before signing.\n     */\n    signableHeaders?: Set<string>\n}\n\nexport interface PresignOptions extends RequestSigningOptions {\n    /**\n     * The number of seconds before the presigned URL expires\n     */\n    expiresIn?: number\n\n    /**\n     * A set of strings whose representing headers that should not be hoisted\n     * to presigned request's query string. If not supplied, the presigner\n     * moves all the AWS-specific headers (starting with `x-amz-`) to the request\n     * query string. If supplied, these headers remain in the presigned request's\n     * header.\n     * All headers in the provided request will have their names converted to\n     * lower case and then checked for existence in the unhoistableHeaders set.\n     */\n    unhoistableHeaders?: Set<string>\n}\n\nexport interface Credentials {\n    /**\n     * AWS access key ID\n     */\n    readonly accessKeyId: string\n\n    /**\n     * AWS secret access key\n     */\n    readonly secretAccessKey: string\n\n    /**\n     * A security or session token to use with these credentials. Usually\n     * present for temporary credentials.\n     */\n    readonly sessionToken?: string\n}\n\nexport interface DateInfo {\n    /**\n     * ISO8601 formatted date string\n     */\n    longDate: string\n\n    /**\n     * String in the format YYYYMMDD\n     */\n    shortDate: string\n}\n\n/**\n * Escapes a URI following the AWS signature v4 escaping rules.\n *\n * @param URI {string} The URI to escape.\n * @returns {string} The escaped URI.\n */\nfunction escapeURI(URI: string): string {\n    const hexEncode = (c: string): string => {\n        return `%${c.charCodeAt(0).toString(16).toUpperCase()}`\n    }\n\n    return encodeURIComponent(URI).replace(/[!'()*]/g, hexEncode)\n}\n\n/**\n * formatDate formats a Date object into a ISO8601 formatted date string\n * and a string in the format YYYYMMDD.\n *\n * @param date {Date} The date to format.\n * @returns {DateInfo} The formatted date.\n */\nfunction formatDate(date: Date): DateInfo {\n    const longDate = iso8601(date).replace(/[\\-:]/g, '')\n    return {\n        longDate,\n        shortDate: longDate.slice(0, 8),\n    }\n}\n\n/**\n * Formats a time into an ISO 8601 string.\n *\n * @see https://en.wikipedia.org/wiki/ISO_8601\n *\n * @param time {number | string | Date} The time to format.\n * @returns {string} The ISO 8601 formatted time.\n */\nfunction iso8601(time: number | string | Date): string {\n    return toDate(time)\n        .toISOString()\n        .replace(/\\.\\d{3}Z$/, 'Z')\n}\n\n/**\n * Converts a time value into a Date object.\n *\n * @param time {number | string | Date} The time to convert.\n * @returns {Date} The resulting Date object.\n */\nfunction toDate(time: number | string | Date): Date {\n    if (typeof time === 'number') {\n        return new Date(time * 1000)\n    }\n\n    if (typeof time === 'string') {\n        if (Number(time)) {\n            return new Date(Number(time) * 1000)\n        }\n\n        return new Date(time)\n    }\n\n    return time\n}\n","/**\n * Type representing HTTP schemes\n */\nexport type HTTPScheme = 'http' | 'https'\n\n/**\n * Type representing HTTP Methods\n *\n */\nexport type HTTPMethod = 'GET' | 'POST' | 'PUT' | 'DELETE'\n\n/**\n * Type alias representing HTTP Headers\n */\nexport type HTTPHeaders = { [key: string]: string }\n\n/**\n * HTTPHeaderBag is a type alias representing HTTP Headers\n */\nexport type HTTPHeaderBag = Record<string, string>\n\nexport function hasHeader(soughtHeader: string, headers: HTTPHeaderBag): boolean {\n    soughtHeader = soughtHeader.toLowerCase()\n\n    for (const headerName of Object.keys(headers)) {\n        if (soughtHeader === headerName.toLowerCase()) {\n            return true\n        }\n    }\n\n    return false\n}\n\n/**\n * QueryParameterBag is a type alias representing HTTP Query Parameters\n */\nexport type QueryParameterBag = Record<string, string | Array<string>>\n\n/**\n * HTTPRequest represents an HTTP request\n */\nexport interface HTTPRequest {\n    /**\n     * The HTTP method to use\n     */\n    method: HTTPMethod\n\n    /**\n     * The protocol to use (http or https)\n     */\n    protocol: HTTPScheme\n\n    /**\n     * The hostname (domain name or IP address) the request targets\n     */\n    hostname: string\n\n    /**\n     * The port to the request targets\n     */\n    port?: number\n\n    /**\n     * The path to the resource\n     */\n    path: string\n\n    /**\n     * The query parameters to include in the request\n     */\n    query?: QueryParameterBag\n\n    /**\n     * The headers to include in the request\n     */\n    headers: HTTPHeaderBag\n\n    /**\n     * The body of the request\n     */\n    body?: string | ArrayBuffer | null\n}\n\n/**\n * SignedHTTPRequest represents an HTTP request that has been signed\n * with an AWS signature. It is a superset of HTTPRequest adding\n * the following fields:\n * - url: the fully qualified URL of the request that can be used in a k6 http.request.\n */\nexport interface SignedHTTPRequest extends HTTPRequest {\n    url: string\n}\n","/**\n *\n * @param value\n * @returns\n */\nexport function isArrayBuffer(value: any): value is ArrayBuffer {\n    return (\n        typeof ArrayBuffer === 'function' &&\n        (value instanceof ArrayBuffer ||\n            Object.prototype.toString.call(value) === '[object ArrayBuffer]')\n    )\n}\n\nexport function toFormUrlEncoded(form: any): string {\n    return Object.keys(form).reduce((params, key) => {\n        let value = form[key]\n        if (value !== undefined && value !== null) {\n            params.push(`${encodeURIComponent(key)}=${encodeURIComponent(value)}`)\n        }\n        return params;\n    }, [] as string[]).join('&')\n}","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"k6/http\");","import { bytes } from 'k6'\nimport { parseHTML } from 'k6/html'\nimport http, { RefinedResponse, ResponseType } from 'k6/http'\n\nimport { AWSClient } from './client'\nimport { AWSConfig } from './config'\nimport { AWSError } from './error'\nimport { SignedHTTPRequest } from './http'\nimport { InvalidSignatureError, SignatureV4 } from './signature'\n\n\n/** Class allowing to interact with Amazon AWS's S3 service */\nexport class S3Client extends AWSClient {\n    signature: SignatureV4\n\n    /**\n     * Create a S3Client\n     *\n     * @param {AWSConfig} awsConfig - configuration attributes to use when interacting with AWS' APIs\n     */\n    constructor(awsConfig: AWSConfig) {\n        super(awsConfig, 's3')\n\n        this.signature = new SignatureV4({\n            service: this.serviceName,\n            region: this.awsConfig.region,\n            credentials: {\n                accessKeyId: this.awsConfig.accessKeyId,\n                secretAccessKey: this.awsConfig.secretAccessKey,\n                sessionToken: this.awsConfig.sessionToken,\n            },\n            uriEscapePath: false,\n            applyChecksum: true,\n        })\n    }\n\n    /**\n     * Returns a list of all buckets owned by the authenticated sender of the request.\n     * To use this operation, you must have the s3:ListAllMyBuckets permission.\n     *\n     * @return  {Array.<S3Bucket>} buckets - An array of objects describing S3 buckets\n     *     with the following fields: name, and creationDate.\n     * @throws  {S3ServiceError}\n     * @throws  {InvalidSignatureError}\n     */\n    listBuckets(): Array<S3Bucket> {\n        const method = 'GET'\n\n        const signedRequest: SignedHTTPRequest = this.signature.sign(\n            {\n                method: 'GET',\n                protocol: this.scheme,\n                hostname: this.host,\n                path: '/',\n                headers: {},\n            },\n            {}\n        )\n\n        const res = http.request(method, signedRequest.url, signedRequest.body || '', {\n            headers: signedRequest.headers,\n        })\n        this._handle_error('ListBuckets', res)\n\n        let buckets: Array<S3Bucket> = []\n\n        const doc = parseHTML(res.body as string)\n\n        doc.find('Buckets')\n            .children()\n            .each((_, bucketDefinition) => {\n                let bucket = {}\n\n                bucketDefinition.children().forEach((child) => {\n                    switch (child.nodeName()) {\n                        case 'name':\n                            Object.assign(bucket, { name: child.textContent() })\n                            break\n                        case 'creationdate':\n                            Object.assign(bucket, {\n                                creationDate: Date.parse(child.textContent()),\n                            })\n                    }\n                })\n\n                buckets.push(bucket as S3Bucket)\n            })\n\n        return buckets\n    }\n\n    /**\n     * Returns some or all (up to 1,000) of the objects in a bucket.\n     *\n     * @param  {string} bucketName - Bucket name to list.\n     * @param  {string?} prefix='' - Limits the response to keys that begin with the specified prefix.\n     * @return {Array.<S3Object>} - returns an array of objects describing S3 objects\n     *     with the following fields: key, lastModified, etag, size and storageClass.\n     * @throws  {S3ServiceError}\n     * @throws  {InvalidSignatureError}\n     */\n    listObjects(bucketName: string, prefix?: string): Array<S3Object> {\n        // Prepare request\n        const method = 'GET'\n        const host = `${this.host}`\n\n        const signedRequest: SignedHTTPRequest = this.signature.sign(\n            {\n                method: 'GET',\n                protocol: this.scheme,\n                hostname: host,\n                path: `/${bucketName}/`,\n                query: {\n                    'list-type': '2',\n                    prefix: prefix || '',\n                },\n                headers: {},\n            },\n            {}\n        )\n\n        const res = http.request(method, signedRequest.url, signedRequest.body || '', {\n            headers: signedRequest.headers,\n        })\n        this._handle_error('ListObjectsV2', res)\n\n        let objects: Array<S3Object> = []\n\n        // Extract the objects definition from\n        // the XML response\n        parseHTML(res.body as string)\n            .find('Contents')\n            .each((_, objectDefinition) => {\n                let obj = {}\n\n                objectDefinition.children().forEach((child) => {\n                    switch (child.nodeName()) {\n                        case 'key':\n                            Object.assign(obj, { key: child.textContent() })\n                            break\n                        case 'lastmodified':\n                            Object.assign(obj, { lastModified: Date.parse(child.textContent()) })\n                            break\n                        case 'etag':\n                            Object.assign(obj, { etag: child.textContent() })\n                            break\n                        case 'size':\n                            Object.assign(obj, { size: parseInt(child.textContent()) })\n                            break\n                        case 'storageclass':\n                            Object.assign(obj, { storageClass: child.textContent() })\n                    }\n                })\n\n                objects.push(obj as S3Object)\n            })\n\n        return objects\n    }\n    /**\n     * Retrieves an Object from Amazon S3.\n     *\n     * To use getObject, you must have `READ` access to the object.\n     *\n     * @param  {string} bucketName - The bucket name containing the object.\n     * @param  {string} objectKey - Key of the object to get.\n     * @return {S3Object} - returns the content of the fetched S3 Object.\n     * @throws  {S3ServiceError}\n     * @throws  {InvalidSignatureError}\n     */\n    getObject(bucketName: string, objectKey: string): S3Object {\n        // Prepare request\n        const method = 'GET'\n        const host = `${this.host}`\n\n        const signedRequest = this.signature.sign(\n            {\n                method: 'GET',\n                protocol: this.scheme,\n                hostname: host,\n                path: `/${bucketName}/${objectKey}`,\n                headers: {},\n            },\n            {}\n        )\n\n        const res = http.request(method, signedRequest.url, signedRequest.body || '', {\n            headers: signedRequest.headers,\n        })\n        this._handle_error('GetObject', res)\n\n        return new S3Object(\n            objectKey,\n            Date.parse(res.headers['Last-Modified']),\n            res.headers['ETag'],\n            parseInt(res.headers['Content-Length']),\n\n            // The X-Amz-Storage-Class header is only set if the storage class is\n            // not the default 'STANDARD' one.\n            (res.headers['X-Amz-Storage-Class'] ?? 'STANDARD') as StorageClass,\n\n            res.body\n        )\n    }\n    /**\n     * Adds an object to a bucket.\n     *\n     * You must have WRITE permissions on a bucket to add an object to it.\n     *\n     * @param  {string} bucketName - The bucket name containing the object.\n     * @param  {string} objectKey - Key of the object to put.\n     * @param  {string | ArrayBuffer} data - the content of the S3 Object to upload.\n     * @throws  {S3ServiceError}\n     * @throws  {InvalidSignatureError}\n     */\n    putObject(bucketName: string, objectKey: string, data: string | ArrayBuffer) {\n        // Prepare request\n        const method = 'PUT'\n        const host = `${this.host}`\n\n        const signedRequest = this.signature.sign(\n            {\n                method: method,\n                protocol: this.scheme,\n                hostname: host,\n                path: `/${bucketName}/${objectKey}`,\n                headers: {\n                    Host: host,\n                },\n                body: data,\n            },\n            {}\n        )\n\n        const res = http.request(method, signedRequest.url, signedRequest.body, {\n            headers: signedRequest.headers,\n        })\n        this._handle_error('PutObject', res)\n    }\n\n    /**\n     * Removes the null version (if there is one) of an object and inserts a delete marker,\n     * which becomes the latest version of the object.\n     *\n     * @param  {string} bucketName - The bucket name containing the object.\n     * @param  {string} objectKey - Key of the object to delete.\n     * @throws  {S3ServiceError}\n     * @throws  {InvalidSignatureError}\n     */\n    deleteObject(bucketName: string, objectKey: string): void {\n        // Prepare request\n        const method = 'DELETE'\n        const host = `${this.host}`\n\n        const signedRequest = this.signature.sign(\n            {\n                method: method,\n                protocol: this.scheme,\n                hostname: host,\n                path: `/${bucketName}/${objectKey}`,\n                headers: {},\n            },\n            {}\n        )\n\n        const res = http.request(method, signedRequest.url, signedRequest.body || '', {\n            headers: signedRequest.headers,\n        })\n        this._handle_error('DeleteObject', res)\n    }\n\n    /**\n     * Copies an object from one bucket to another\n     *\n     * @param  {string} sourceBucket - The source bucket name containing the object.\n     * @param  {string} sourceKey - Key of the source object to copy.\n     * @param  {string} destinationBucket - The destination bucket name containing the object.\n     * @param  {string} destinationKey - Key of the destination object.\n     * @throws  {S3ServiceError}\n     * @throws  {InvalidSignatureError}\n     */\n    copyObject(sourceBucket: string, sourceKey: string, destinationBucket: string, destinationKey: string): void {\n        // Prepare request\n        const method = 'PUT'\n        const host = `${destinationBucket}.${this.host}`\n\n        const signedRequest = this.signature.sign(\n            {\n                method: method,\n                protocol: this.scheme,\n                hostname: host,\n                path: `/${destinationKey}`,\n                headers: {\n                    'x-amz-copy-source': `${sourceBucket}/${sourceKey}`,\n                },\n            },\n            {}\n        )\n\n        const res = http.request(method, signedRequest.url, signedRequest.body || null, {\n            headers: signedRequest.headers,\n        })\n        \n        this._handle_error('CopyObject', res)\n    }\n\n    /**\n     * Creates a new multipart upload for a given objectKey.\n     * The uploadId returned can be used to upload parts to the object.\n     *\n     * @param  {string} bucketName - The bucket name containing the object.\n     * @param  {string} objectKey - Key of the object to upload.\n     * @return {S3MultipartUpload} - returns the uploadId of the newly created multipart upload.\n     * @throws  {S3ServiceError}\n     * @throws  {InvalidSignatureError}\n     */\n    createMultipartUpload(bucketName: string, objectKey: string): S3MultipartUpload {\n        // Prepare request\n        const method = 'POST'\n        const host = `${bucketName}.${this.host}`\n\n        const signedRequest = this.signature.sign(\n            {\n                method: method,\n                protocol: this.scheme,\n                hostname: host,\n                path: `/${objectKey}`,\n                headers: {},\n                query: { uploads: '' },\n            },\n            {}\n        )\n\n        const res = http.request(method, signedRequest.url, signedRequest.body || '', {\n            headers: signedRequest.headers,\n        })\n        this._handle_error('CreateMultipartUpload', res)\n\n        return new S3MultipartUpload(\n            objectKey,\n            parseHTML(res.body as string)\n                .find('UploadId')\n                .text()\n        )\n    }\n\n    /**\n     * Uploads a part in a multipart upload.\n     * @param {string} bucketName - The bucket name containing the object.\n     * @param {string} objectKey - Key of the object to upload.\n     * @param {string} uploadId - The uploadId of the multipart upload.\n     * @param {number} partNumber - The part number of the part to upload.\n     * @param {string | ArrayBuffer} data - The content of the part to upload.\n     * @return {S3Part} - returns the ETag of the uploaded part.\n     * @throws  {S3ServiceError}\n     */\n    uploadPart(\n        bucketName: string,\n        objectKey: string,\n        uploadId: string,\n        partNumber: number,\n        data: string | ArrayBuffer\n    ): S3Part {\n        // Prepare request\n        const method = 'PUT'\n        const host = `${bucketName}.${this.host}`\n        const signedRequest = this.signature.sign(\n            {\n                method: method,\n                protocol: this.scheme,\n                hostname: host,\n                path: `/${objectKey}`,\n                headers: {},\n                body: data,\n                query: {\n                    partNumber: `${partNumber}`,\n                    uploadId: `${uploadId}`,\n                },\n            },\n            {}\n        )\n\n        const res = http.request(method, signedRequest.url, signedRequest.body || '', {\n            headers: signedRequest.headers,\n        })\n        this._handle_error('UploadPart', res)\n\n        return new S3Part(partNumber, res.headers['Etag'])\n    }\n\n    /**\n     * Completes a multipart upload by assembling previously uploaded parts.\n     *\n     * @param  {string} bucketName - The bucket name containing the object.\n     * @param  {string} objectKey - Key of the object to delete.\n     * @param  {string} uploadId - The uploadId of the multipart upload to complete.\n     * @param  {S3Part[]} parts - The parts to assemble.\n     * @throws  {S3ServiceError}\n     * @throws  {InvalidSignatureError}\n     */\n    completeMultipartUpload(\n        bucketName: string,\n        objectKey: string,\n        uploadId: string,\n        parts: S3Part[]\n    ) {\n        // Prepare request\n        const method = 'POST'\n        const host = `${bucketName}.${this.host}`\n        const body = `<CompleteMultipartUpload>${parts\n            .map(\n                (part) =>\n                    `<Part><PartNumber>${part.partNumber}</PartNumber><ETag>${part.eTag}</ETag></Part>`\n            )\n            .join('')}</CompleteMultipartUpload>`\n        const signedRequest = this.signature.sign(\n            {\n                method: method,\n                protocol: this.scheme,\n                hostname: host,\n                path: `/${objectKey}`,\n                headers: {},\n                body: body,\n                query: {\n                    uploadId: `${uploadId}`,\n                },\n            },\n            {}\n        )\n\n        const res = http.request(method, signedRequest.url, signedRequest.body || '', {\n            headers: signedRequest.headers,\n        })\n\n        this._handle_error('CompleteMultipartUpload', res)\n    }\n\n    /**\n     * Aborts a multipart upload.\n     *\n     * @param  {string} bucketName - The bucket name containing the object.\n     * @param  {string} objectKey - Key of the object to delete.\n     * @param  {string} uploadId - The uploadId of the multipart upload to abort.\n     * @throws  {S3ServiceError}\n     * @throws  {InvalidSignatureError}\n     */\n    abortMultipartUpload(bucketName: string, objectKey: string, uploadId: string) {\n        // Prepare request\n        const method = 'DELETE'\n        const host = `${bucketName}.${this.host}`\n        const signedRequest = this.signature.sign(\n            {\n                method: method,\n                protocol: this.scheme,\n                hostname: host,\n                path: `/${objectKey}`,\n                headers: {},\n                query: {\n                    uploadId: `${uploadId}`,\n                },\n            },\n            {}\n        )\n\n        const res = http.request(method, signedRequest.url, signedRequest.body || '', {\n            headers: signedRequest.headers,\n        })\n        this._handle_error('AbortMultipartUpload', res)\n    }\n\n    _handle_error(operation: S3Operation, response: RefinedResponse<ResponseType | undefined>) {\n        const status: number = response.status\n        const errorCode: number = response.error_code\n        const errorMessage: string = response.error\n\n        // We consider codes 200-299 as success\n        if (status >= 200 && status < 300 && errorMessage == '' && errorCode === 0) {\n            return\n        }\n\n        // A 301 response is returned when the bucket is not found.\n        // Generally meaning that either the bucket name is wrong or the\n        // region is wrong.\n        //\n        // See: https://github.com/grafana/k6/issues/2474\n        // See: https://github.com/golang/go/issues/49281\n        if (status == 301 || (errorMessage && errorMessage.startsWith('301'))) {\n            throw new S3ServiceError('Resource not found', 'ResourceNotFound', operation)\n        }\n\n        const awsError = AWSError.parseXML(response.body as string)\n        switch (awsError.code) {\n            case 'AuthorizationHeaderMalformed':\n                throw new InvalidSignatureError(awsError.message, awsError.code)\n            default:\n                throw new S3ServiceError(awsError.message, awsError.code || 'unknown', operation)\n        }\n    }\n}\n\n/** Class representing a S3 Bucket */\nexport class S3Bucket {\n    name: string\n    creationDate: Date\n\n    /**\n     * Create an S3 Bucket\n     *\n     * @param  {string} name - S3 bucket's name\n     * @param  {Date} creationDate - S3 bucket's creation date\n     */\n    constructor(name: string, creationDate: Date) {\n        this.name = name\n        this.creationDate = creationDate\n    }\n}\n\n/** Class representing an S3 Object */\nexport class S3Object {\n    key: string\n    lastModified: number\n    etag: string\n    size: number\n    storageClass: StorageClass\n    data?: string | bytes | null\n\n    /**\n     * Create an S3 Object\n     *\n     * @param  {string} key - S3 object's key\n     * @param  {Date} lastModified - S3 object last modification date\n     * @param  {string} etag - S3 object's etag\n     * @param  {number} size - S3 object's size\n     * @param  {StorageClass} storageClass - S3 object's storage class\n     * @param  {string | bytes | null} data=null - S3 Object's data\n     */\n    constructor(\n        key: string,\n        lastModified: number,\n        etag: string,\n        size: number,\n        storageClass: StorageClass,\n        data?: string | bytes | null\n    ) {\n        this.key = key\n        this.lastModified = lastModified\n        this.etag = etag\n        this.size = size\n        this.storageClass = storageClass\n        this.data = data\n    }\n}\n\n/** Class representing a S3 Multipart Upload */\nexport class S3MultipartUpload {\n    key: string\n    uploadId: string\n\n    /**\n     * Create an S3 Multipart Upload\n     * @param  {string} key - S3 object's key\n     * @param  {string} uploadId - S3 multipart upload id\n     */\n\n    constructor(key: string, uploadId: string) {\n        this.key = key\n        this.uploadId = uploadId\n    }\n}\n\n/** Class representing a S3 Part */\nexport class S3Part {\n    partNumber: number\n    eTag: string\n\n    /**\n     * Create an S3 Part\n     * @param  {number} partNumber - Part number\n     * @param  {string} eTag - Part's etag\n     */\n\n    constructor(partNumber: number, eTag: string) {\n        this.partNumber = partNumber\n        this.eTag = eTag\n    }\n}\n\n/**\n * Error indicating a S3 operation failed\n *\n * Inspired from AWS official error types, as\n * described in:\n *   * https://aws.amazon.com/blogs/developer/service-error-handling-modular-aws-sdk-js/\n *   * https://github.com/aws/aws-sdk-js/blob/master/lib/error.d.ts\n */\nexport class S3ServiceError extends AWSError {\n    operation: string\n\n    /**\n     * Constructs a S3ServiceError\n     *\n     * @param  {string} message - human readable error message\n     * @param  {string} code - A unique short code representing the error that was emitted\n     * @param  {string} operation - Name of the failed Operation\n     */\n    constructor(message: string, code: string, operation: string) {\n        super(message, code)\n        this.name = 'S3ServiceError'\n        this.operation = operation\n    }\n}\n\n/**\n * S3Operation describes possible values for S3 API operations,\n * as defined by AWS APIs.\n */\ntype S3Operation =\n    | 'ListBuckets'\n    | 'ListObjectsV2'\n    | 'GetObject'\n    | 'PutObject'\n    | 'DeleteObject'\n    | 'CopyObject'\n    | 'CreateMultipartUpload'\n    | 'CompleteMultipartUpload'\n    | 'UploadPart'\n    | 'AbortMultipartUpload'\n\n/**\n * Describes the class of storage used to store a S3 object.\n */\ntype StorageClass =\n    | 'STANDARD'\n    | 'REDUCED_REDUNDANCY'\n    | 'GLACIER'\n    | 'STANDARD_IA'\n    | 'INTELLIGENT_TIERING'\n    | 'DEEP_ARCHIVE'\n    | 'OUTPOSTS'\n    | 'GLACIER_IR'\n    | undefined\n","import { AWSConfig } from './config'\nimport { HTTPHeaders } from './http'\nimport { HTTPScheme } from './http'\n/**\n * Class allowing to build requests targeting AWS APIs\n *\n * This class is meant to be used as a base class for specific\n * services clients. See S3Client or SecretsManagerClient for\n * usage examples.\n */\nexport class AWSClient {\n    awsConfig: AWSConfig\n    serviceName: string\n\n    private _host?: string\n    private _scheme?: HTTPScheme\n    /**\n     * @param {AWSConfig} awsConfig - configuration attributes to use when interacting with AWS' APIs\n     * @param  {string} serviceName - name of the service to target.\n     * @param  {URIEncodingConfig} URIencodingConfig - configures how requests URIs should be encoded.\n     */\n    constructor(awsConfig: AWSConfig, serviceName: string) {\n        this.awsConfig = awsConfig\n        this.serviceName = serviceName\n    }\n\n    /**\n     * Property computing the URL to send the requests to when interacting with\n     * the specific AWS service the child class implements the functionalities of.\n     */\n    public get host() {\n        if (this._host == undefined) {\n          this._host = `${this.serviceName}.${this.awsConfig.region}.${this.awsConfig.endpoint}`\n        }\n        return this._host\n    }\n\n    public set host(host: string) {\n        this._host = host\n    }\n\n      /**\n     * Property computing the scheme to use http or https. Defaults to https as per AWSConfig Defaults\n     * the specific AWS service the child class implements the functionalities of.\n     */\n  \n    public get scheme() {\n\n      if (this._scheme == undefined) {\n        this._scheme = this.awsConfig.scheme;\n      }\n      return this._scheme\n    }\n  \n    // Validatiuon should be done by the type declaration \n    public set scheme(scheme: HTTPScheme) {\n      this._scheme = scheme\n  }\n\n}\n\n/**\n * Type alias representing the result of an AWSClient.buildRequest call\n */\nexport interface AWSRequest {\n    url: string\n    headers: HTTPHeaders\n}\n"],"names":["__webpack_require__","module","getter","__esModule","d","a","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","AWSConfig","options","_classCallCheck","_defineProperty","region","InvalidAWSConfigError","concat","accessKeyId","length","secretAccessKey","this","undefined","sessionToken","scheme","endpoint","_createClass","__ENV","AWS_REGION","AWS_ACCESS_KEY_ID","AWS_SECRET_ACCESS_KEY","AWS_SESSION_TOKEN","_Error","_inherits","_super","_createSuper","message","_wrapNativeSuper","Error","require","AMZ_DATE_QUERY_PARAM","AMZ_SIGNATURE_QUERY_PARAM","AMZ_TOKEN_QUERY_PARAM","AMZ_CONTENT_SHA256_HEADER","AMZ_DATE_HEADER","toLowerCase","AMZ_SIGNATURE_HEADER","AMZ_TOKEN_HEADER","AUTHORIZATION_HEADER","GENERATED_HEADERS","HOST_HEADER","ALWAYS_UNSIGNABLE_HEADERS","authorization","connection","expect","from","pragma","referer","te","trailer","upgrade","KEY_TYPE_IDENTIFIER","SIGNING_ALGORITHM_IDENTIFIER","AWSError","code","_this","_assertThisInitialized","name","xmlDocument","doc","parseHTML","find","text","SignatureV4","_ref","service","credentials","uriEscapePath","applyChecksum","request","arguments","finalOptions","_objectSpread","signingDate","Date","unsignableHeaders","Set","signableHeaders","_formatDate","formatDate","longDate","shortDate","signingService","signingRegion","scope","constants","headers","hostname","_i","_Object$keys","keys","headerName","indexOf","ArrayBuffer","isView","body","buffer","payloadHash","computePayloadHash","soughtHeader","hasHeader","canonicalHeaders","computeCanonicalHeaders","signature","calculateSignature","deriveSigningKey","createCanonicalRequest","sort","join","url","protocol","path","query","serializeQueryParameters","originalRequest","_options$signingDate","_options$expiresIn","expiresIn","unhoistableHeaders","_formatDate2","InvalidSignatureError","moveHeadersToQuery","toString","signingKey","canonicalRequest","sortedHeaders","sortedCanonicalHeaders","map","signedHeaders","method","computeCanonicalURI","computeCanonicalQuerystring","credentialScope","hashedCanonicalRequest","crypto","stringToSign","createStringToSign","kSecret","kDate","kRegion","kService","_ref2","_step","normalizedURISegments","_iterator","_createForOfIteratorHelper","split","s","n","done","URISegment","pop","push","err","e","f","leading","startsWith","URI","trailing","endsWith","normalizedURI","encodeURIComponent","replace","_ref3","_step2","_ref3$query","serialized","_loop","escapeURI","Array","isArray","slice","reduce","encoded","_iterator2","filter","_ref4","_step3","_iterator3","canonicalHeaderName","has","trim","_ref5","requestCopy","JSON","parse","stringify","_requestCopy$query","_i2","_Object$keys2","_options$unhoistableH","lowerCaseName","ignoreKeys","_step4","_loop2","includes","_iterator4","_AWSError","c","charCodeAt","toUpperCase","date","time","Number","toDate","toISOString","S3Client","_AWSClient","awsConfig","serviceName","signedRequest","sign","host","res","http","_handle_error","buckets","children","each","_","bucketDefinition","bucket","forEach","child","nodeName","assign","textContent","creationDate","bucketName","prefix","objects","objectDefinition","lastModified","etag","size","parseInt","storageClass","objectKey","_res$headers$XAmzSt","S3Object","data","Host","sourceBucket","sourceKey","destinationBucket","destinationKey","uploads","S3MultipartUpload","uploadId","partNumber","S3Part","parts","part","eTag","operation","response","status","errorCode","error_code","errorMessage","error","S3ServiceError","awsError","parseXML","AWSClient","_host","set","_scheme","S3Bucket","_super2","_this2"],"sourceRoot":""}