{"version":3,"file":"s3.js","mappings":"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","sources":["webpack://k6-jslib-aws/webpack/bootstrap","webpack://k6-jslib-aws/webpack/runtime/compat get default export","webpack://k6-jslib-aws/webpack/runtime/define property getters","webpack://k6-jslib-aws/webpack/runtime/hasOwnProperty shorthand","webpack://k6-jslib-aws/webpack/runtime/make namespace object","webpack://k6-jslib-aws/./src/internal/endpoint.ts","webpack://k6-jslib-aws/./src/internal/config.ts","webpack://k6-jslib-aws/external commonjs \"k6/crypto\"","webpack://k6-jslib-aws/./src/internal/constants.ts","webpack://k6-jslib-aws/external commonjs \"k6/html\"","webpack://k6-jslib-aws/./src/internal/error.ts","webpack://k6-jslib-aws/./src/internal/signature.ts","webpack://k6-jslib-aws/./src/internal/http.ts","webpack://k6-jslib-aws/./src/internal/utils.ts","webpack://k6-jslib-aws/external commonjs \"k6/http\"","webpack://k6-jslib-aws/./src/internal/s3.ts","webpack://k6-jslib-aws/./src/internal/client.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/**\n * Represents an AWS service endpoint, providing utilities for parsing and handling URL details.\n */\nexport class Endpoint {\n    private _protocol: string\n    private _hostname: string\n    private _port?: number\n\n    // Default protocol, this can be globally changed as per application requirements\n    private static readonly DEFAULT_PROTOCOL = 'https' // Set this as per AWS.config\n\n    /**\n    //  * Constructs a new Endpoint instance.\n     *\n     * @param {string} endpoint - The URL to construct an endpoint from. If the URL omits a protocol, the default protocol will be used.\n     */\n    constructor(endpoint: string) {\n        const isDefaultProtocol =\n            !endpoint.startsWith('http://') && !endpoint.startsWith('https://')\n        const completeUrl = isDefaultProtocol\n            ? `${Endpoint.DEFAULT_PROTOCOL}://${endpoint}`\n            : endpoint\n\n        const protocolMatch = completeUrl.match(/^https?:/)\n        const hostAndPath = completeUrl.replace(/^https?:\\/\\//, '')\n        const [hostnameWithPort] = hostAndPath.split('/')\n\n        this._protocol = protocolMatch ? protocolMatch[0].slice(0, -1) : Endpoint.DEFAULT_PROTOCOL\n        this._hostname = hostnameWithPort.split(':')[0]\n        this._port = hostnameWithPort.split(':')[1]\n            ? parseInt(hostnameWithPort.split(':')[1])\n            : undefined\n    }\n\n    /**\n     * Creates a new Endpoint instance that is a copy of the current one.\n     *\n     * @returns {Endpoint} The copied Endpoint.\n     */\n    public copy(): Endpoint {\n        return new Endpoint(this.href)\n    }\n\n    /**\n     * Gets the host portion of the endpoint including the port.\n     *\n     * @returns {string} The host portion of the endpoint including the port.\n     */\n    public get host(): string {\n        return this._port ? `${this._hostname}:${this._port}` : this._hostname\n    }\n\n    /**\n     * Sets the host portion of the endpoint including the port.\n     *\n     * @param {string} value - The value to set for the host.\n     */\n    public set host(value: string) {\n        const [hostname, port] = value.split(':')\n        this._hostname = hostname\n        this._port = port ? parseInt(port) : undefined\n    }\n\n    /**\n     * Gets the host portion of the endpoint without the port.\n     *\n     * @returns {string} The host portion of the endpoint.\n     */\n    public get hostname(): string {\n        return this._hostname\n    }\n\n    /**\n     * Sets the host portion of the endpoint without the port.\n     *\n     * @param {string} value - The value to set for the hostname.\n     */\n    public set hostname(value: string) {\n        this._hostname = value\n    }\n\n    /**\n     * Gets the full URL of the endpoint.\n     *\n     * @returns {string} The full URL of the endpoint.\n     */\n    public get href(): string {\n        return `${this.protocol}://${this.host}`\n    }\n\n    /**\n     * Sets the full URL of the endpoint.\n     *\n     * @param {string} value - The value to set for the full URL.\n     */\n    public set href(value: string) {\n        const protocolMatch = value.match(/^https?:/)\n        const withoutProtocol = value.replace(/^https?:\\/\\//, '')\n        const [hostnameWithPort] = withoutProtocol.split('/')\n\n        this._protocol = protocolMatch ? protocolMatch[0].slice(0, -1) : Endpoint.DEFAULT_PROTOCOL // remove the trailing colon\n        this._hostname = hostnameWithPort.split(':')[0]\n        this._port = hostnameWithPort.split(':')[1]\n            ? parseInt(hostnameWithPort.split(':')[1])\n            : undefined\n    }\n\n    /**\n     * Gets the port of the endpoint.\n     *\n     * @returns {number|undefined} The port of the endpoint.\n     */\n    public get port(): number | undefined {\n        return this._port\n    }\n\n    /**\n     * Sets the port of the endpoint.\n     *\n     * @param {number|undefined} value - The value to set for the port.\n     */\n    public set port(value: number | undefined) {\n        this._port = value\n    }\n\n    /**\n     * Gets the protocol (http or https) of the endpoint URL.\n     *\n     * @returns {string} The protocol of the endpoint URL.\n     */\n    public get protocol(): string {\n        return this._protocol\n    }\n\n    /**\n     * Sets the protocol (http or https) of the endpoint URL.\n     *\n     * @param {string} value - The value to set for the protocol.\n     */\n    public set protocol(value: string) {\n        this._protocol = value\n    }\n}\n","import { HTTPScheme } from './http'\nimport { Endpoint } from './endpoint'\n\n/** Class holding an AWS connection information */\nexport class AWSConfig {\n    /**\n     * The AWS region to connect to, as listed: https://docs.aws.amazon.com/general/latest/gr/rande.html\n     *\n     * @type {string}\n     */\n    region: string\n\n    /**\n     * Your user's AWS access key id credential.\n     *\n     * @type {string}\n     */\n    accessKeyId: string\n\n    /**\n     * Your user's AWS secret access key credential.\n     *\n     * @type {string}\n     */\n    secretAccessKey: string\n\n    /**\n     * Your user's AWS session token credential.\n     *\n     * @type {string}\n     */\n    sessionToken?: string\n\n    /**\n     * The AWS hostname to connect to.\n     *\n     * @type {string} ['amazonaws.com']\n     */\n    endpoint?: Endpoint\n\n    /**\n     * fromEnvironment creates an AWSConfig from the environment variables.\n     *\n     * It expects to find the following compulsory environment variables:\n     *  * AWS_REGION\n     *  * AWS_ACCESS_KEY_ID\n     *  * AWS_SECRET_ACCESS_KEY\n     *\n     * If set, the following optional environment variables are also used:\n     *  * AWS_SESSION_TOKEN\n     *\n     * Finally, the options parameter allows to explicitly set the scheme and endpoint\n     * to use when connecting to AWS.\n     *\n     * @param options {AWSConnectionOptions}\n     * @returns\n     */\n    static fromEnvironment(options?: AWSConnectionOptions): AWSConfig {\n        const region = __ENV.AWS_REGION\n        const accessKeyId = __ENV.AWS_ACCESS_KEY_ID\n        const secretAccessKey = __ENV.AWS_SECRET_ACCESS_KEY\n        const sessionToken: string | undefined = __ENV.AWS_SESSION_TOKEN\n        const endpoint: Endpoint | string | undefined = options?.endpoint\n\n        return new AWSConfig({\n            region,\n            accessKeyId,\n            secretAccessKey,\n            sessionToken,\n            endpoint: endpoint,\n        })\n    }\n\n    /**\n     * Create an AWSConfig.\n     *\n     * @param {AWSConfigOptions} options - configuration attributes to use when interacting with AWS' APIs\n     * @throws {InvalidArgumentException}\n     */\n    constructor(options: AWSConfigOptions) {\n        if (!options.region || options.region === '') {\n            throw new InvalidAWSConfigError(\n                `invalid AWS region; reason: expected a valid AWS region name (e.g. \"us-east-1\"), got \\`${options.region}\\``\n            )\n        }\n\n        if (!options.accessKeyId || options.accessKeyId === '') {\n            throw new InvalidAWSConfigError(\n                `invalid AWS access key ID; reason: expected a non empty string, got \\`${options.accessKeyId}\\``\n            )\n        }\n\n        if (options.accessKeyId.length < 16 || options.accessKeyId.length > 128) {\n            throw new InvalidAWSConfigError(\n                `invalid AWS access key ID; reason: size should be between 16 and 128 characters, got ${options.accessKeyId.length}`\n            )\n        }\n\n        if (!options.secretAccessKey || options.secretAccessKey === '') {\n            throw new InvalidAWSConfigError(\n                `invalid AWS secret access key; reason: expected a non empty string, got \\`${options.secretAccessKey}\\``\n            )\n        }\n\n        if (options.secretAccessKey.length < 16 || options.secretAccessKey.length > 128) {\n            throw new InvalidAWSConfigError(\n                `invalid AWS secret access key; reason: size should be between 16 and 128 characters, got ${options.secretAccessKey.length}`\n            )\n        }\n\n        this.region = options.region\n        this.accessKeyId = options.accessKeyId\n        this.secretAccessKey = options.secretAccessKey\n\n        if (options.sessionToken !== undefined) {\n            this.sessionToken = options.sessionToken\n        }\n\n        if (options.endpoint !== undefined) {\n            if (typeof options.endpoint === 'string') {\n                this.endpoint = new Endpoint(options.endpoint)\n            } else {\n                this.endpoint = options.endpoint\n            }\n        }\n    }\n}\n\n/**\n * Interface representing AWSConfig options\n */\nexport interface AWSConfigOptions extends AWSConnectionOptions {\n    /**\n     * The AWS region to connect to, as listed: https://docs.aws.amazon.com/general/latest/gr/rande.html\n     *\n     * @type {string}\n     */\n    region: string\n\n    /**\n     * Your user's AWS access key id credential.\n     *\n     * @type {string}\n     */\n    accessKeyId: string\n\n    /**\n     * Your user's AWS secret access key credential.\n     *\n     * @type {string}\n     */\n    secretAccessKey: string\n\n    /**\n     * Your user's AWS session token credential.\n     *\n     * @type {string}\n     */\n    sessionToken?: string\n}\n\n/**\n * Interface representing AWS connection options\n */\nexport interface AWSConnectionOptions {\n    /**\n     * The HTTP scheme to use when connecting to AWS.\n     *\n     * @type {HTTPScheme}\n     */\n    scheme?: HTTPScheme\n\n    /**\n     * The AWS hostname to connect to.\n     *\n     * @type {string}\n     */\n    endpoint?: Endpoint | string\n}\n\n/** Class representing an invalid AWS configuration */\nexport class InvalidAWSConfigError extends Error {\n    constructor(message: string) {\n        super(message)\n    }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"k6/crypto\");","/**\n * Standard Amazon AWS query parameter names\n */\nexport const AMZ_ALGORITHM_QUERY_PARAM = 'X-Amz-Algorithm'\nexport const AMZ_CREDENTIAL_QUERY_PARAM = 'X-Amz-Credential'\nexport const AMZ_DATE_QUERY_PARAM = 'X-Amz-Date'\nexport const AMZ_EXPIRES_QUERY_PARAM = 'X-Amz-Expires'\nexport const AMZ_SIGNATURE_QUERY_PARAM = 'X-Amz-Signature'\nexport const AMZ_SIGNED_HEADERS_QUERY_PARAM = 'X-Amz-SignedHeaders'\nexport const AMZ_TARGET_QUERY_PARAM = 'X-Amz-Target'\nexport const AMZ_TOKEN_QUERY_PARAM = 'X-Amz-Security-Token'\n\n/**\n * Standard Amazon AWS header names\n */\nexport const AMZ_CONTENT_SHA256_HEADER = 'x-amz-content-sha256'\nexport const AMZ_DATE_HEADER = AMZ_DATE_QUERY_PARAM.toLowerCase()\nexport const AMZ_SIGNATURE_HEADER = AMZ_SIGNATURE_QUERY_PARAM.toLowerCase()\nexport const AMZ_TARGET_HEADER = AMZ_TARGET_QUERY_PARAM.toLowerCase()\nexport const AMZ_TOKEN_HEADER = AMZ_TOKEN_QUERY_PARAM.toLowerCase()\n\n/**\n * Common HTTP headers we rely on in the signing process\n */\nexport const AUTHORIZATION_HEADER = 'authorization'\nexport const DATE_HEADER = 'date'\n\n/**\n * Lists the headers that are generated as part of the signature process.\n */\nexport const GENERATED_HEADERS = [AUTHORIZATION_HEADER, AMZ_DATE_HEADER, DATE_HEADER]\nexport const HOST_HEADER = 'host'\n\n/**\n * Lists the headers that should never be included in the\n * request signature signature process.\n */\nexport const ALWAYS_UNSIGNABLE_HEADERS = {\n    authorization: true,\n    'cache-control': true,\n    connection: true,\n    expect: true,\n    from: true,\n    'keep-alive': true,\n    'max-forwards': true,\n    pragma: true,\n    referer: true,\n    te: true,\n    trailer: true,\n    'transfer-encoding': true,\n    upgrade: true,\n    'user-agent': true,\n    'x-amzn-trace-id': true,\n}\n\n/**\n * Signature specific constants included in the signing process\n */\nexport const KEY_TYPE_IDENTIFIER = 'aws4_request'\nexport const SIGNING_ALGORITHM_IDENTIFIER = 'AWS4-HMAC-SHA256'\n\n/**\n * Maximum time to live of a signed request in seconds: 7 days.\n */\nexport const MAX_PRESIGNED_TTL = 60 * 60 * 24 * 7\n\n/**\n * SHA256 hash of an empty string (so we don't waste cycles recomputing it)\n */\nexport const EMPTY_SHA256 = 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\n\n/**\n * SHA256 hash of the unsigned payload constant (so we don't waste cycles recomputing it)\n */\nexport const UNSIGNED_PAYLOAD_SHA256 =\n    '5a41b0751e4537c6ff868564ab44a4d4ecceec2ec5b1c5f74d97422968e04237'\n\nexport const UNSIGNED_PAYLOAD = 'UNSIGNED-PAYLOAD'\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"k6/html\");","import { parseHTML } from 'k6/html'\n\n/**\n * Base class to derive errors from\n *\n * Inspired from AWS official error types, as\n * described in:\n *   * https://aws.amazon.com/blogs/developer/service-error-handling-modular-aws-sdk-js/\n *   * https://github.com/aws/aws-sdk-js/blob/master/lib/error.d.ts\n */\nexport class AWSError extends Error {\n    /**\n     * Error code issued by the service (if any)\n     */\n    code?: string\n\n    /**\n     * Create an AWSError\n     *\n     * @param {string} message - A longer human readable error message.\n     * @param {string?} code - A unique short code representing the error that was emitted\n     */\n    constructor(message: string, code?: string) {\n        super(message)\n        this.name = 'AWSError'\n        this.code = code\n    }\n\n    /**\n     * Parse an AWSError from an XML document\n     *\n     * @param  {string} xmlDocument - Serialized XML document to parse the error from\n     */\n    static parseXML(xmlDocument: string): AWSError {\n        const doc = parseHTML(xmlDocument)\n        return new AWSError(doc.find('Message').text(), doc.find('Code').text())\n    }\n}\n","import crypto from 'k6/crypto'\n\nimport * as constants from './constants'\nimport { AWSError } from './error'\nimport { hasHeader, HTTPHeaderBag, HTTPRequest, QueryParameterBag, SignedHTTPRequest } from './http'\nimport { isArrayBuffer } from './utils'\n\n/**\n * SignatureV4 can be used to sign HTTP requests and presign URLs using the AWS Signature\n * Version 4 signing process.\n *\n * It offers two signing methods:\n * - sign: signs the request headers and payload\n * - presign: returns a presigned (authorization information contained in the query string) URL\n *\n * @see https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html\n */\nexport class SignatureV4 {\n    /**\n     * The name of the service to sign for.\n     */\n    private readonly service: string\n\n    /**\n     * The name of the region to sign for.\n     */\n    private readonly region: string\n\n    /**\n     * The credentials with which the request should be signed.\n     */\n    private readonly credentials: Credentials\n\n    /**\n     * Whether to uri-escape the request URI path as part of computing the\n     * canonical request string. This is required for every AWS service, except\n     * Amazon S3, as of late 2017.\n     *\n     * @default [true]\n     */\n    private readonly uriEscapePath: boolean\n\n    /**\n     * Whether to calculate a checksum of the request body and include it as\n     * either a request header (when signing) or as a query string parameter\n     * (when presigning). This is required for AWS Glacier and Amazon S3 and optional for\n     * every other AWS service as of late 2017.\n     *\n     * @default [true]\n     */\n    private readonly applyChecksum: boolean\n\n    // TODO: uriEscapePath and applyChecksum should not be present in the constructor\n    constructor({\n        service,\n        region,\n        credentials,\n        uriEscapePath,\n        applyChecksum,\n    }: SignatureV4Options) {\n        this.service = service\n        this.region = region\n        this.credentials = credentials\n        this.uriEscapePath = typeof uriEscapePath === 'boolean' ? uriEscapePath : true\n        this.applyChecksum = typeof applyChecksum === 'boolean' ? applyChecksum : true\n    }\n\n    /**\n     * Includes AWS v4 signing information to the provided HTTP request.\n     *\n     * This method adds an Authorization header to the request, containing\n     * the signature and other signing information. It also returns a preformatted\n     * URL that can be used to make the k6 http request.\n     *\n     * This method mutates the request object.\n     *\n     * @param request {HTTPRequest} The request to sign.\n     * @param options {Partial<RequestSigningOptions>} Options for signing the request.\n     * @returns {SignedHTTPRequest} The signed request.\n     */\n    sign(request: HTTPRequest, options: Partial<RequestSigningOptions> = {}): SignedHTTPRequest {\n        // Set default values for options which are not provided by the user.\n        const defaultOptions = {\n            signingDate: new Date(),\n            unsignableHeaders: new Set<string>(),\n            signableHeaders: new Set<string>(),\n        }\n\n        // Merge default options with the ones maybe provided by the user.\n        const finalOptions = { ...defaultOptions, ...options }\n\n        const { longDate, shortDate }: DateInfo = formatDate(finalOptions.signingDate)\n        const service = finalOptions.signingService || this.service\n        const region = finalOptions.signingRegion || this.region\n        const scope = `${shortDate}/${region}/${service}/${constants.KEY_TYPE_IDENTIFIER}`\n\n        // Required by the specification:\n        //   \"For HTTP/1.1 requests, you must include the host header at a minimum.\n        //   Standard headers like content-type are optional.\n        //   For HTTP/2 requests, you must include the :authority header instead of\n        //   the host header. Different services might require other headers.\"\n        request.headers[constants.HOST_HEADER] = request.endpoint.hostname\n\n        // Filter out headers that will be generated and managed by the signing process.\n        // If the user provide any of those as part of the HTTPRequest's headers, they\n        // will be ignored.\n        for (const headerName of Object.keys(request.headers)) {\n            if (constants.GENERATED_HEADERS.indexOf(headerName.toLowerCase()) > -1) {\n                delete request.headers[headerName]\n            }\n        }\n\n        request.headers[constants.AMZ_DATE_HEADER] = longDate\n        if (this.credentials.sessionToken) {\n            request.headers[constants.AMZ_TOKEN_HEADER] = this.credentials.sessionToken\n        }\n\n        // If the request body is a typed array, we need to convert it to a buffer\n        // so that we can calculate the checksum.\n        if (ArrayBuffer.isView(request.body)) {\n            request.body = request.body.buffer\n        }\n\n        // Ensure we avoid passing undefined to the crypto hash function.\n        if (!request.body) {\n            request.body = ''\n        }\n\n        let payloadHash = this.computePayloadHash(request)\n        if (\n            !hasHeader(constants.AMZ_CONTENT_SHA256_HEADER, request.headers) &&\n            this.applyChecksum\n        ) {\n            request.headers[constants.AMZ_CONTENT_SHA256_HEADER] = payloadHash\n        }\n\n        const canonicalHeaders = this.computeCanonicalHeaders(\n            request,\n            finalOptions.unsignableHeaders,\n            finalOptions.signableHeaders\n        )\n        const signature = this.calculateSignature(\n            longDate,\n            scope,\n            this.deriveSigningKey(this.credentials, service, region, shortDate),\n            this.createCanonicalRequest(request, canonicalHeaders, payloadHash)\n        )\n\n        /**\n         * Step 4 of the signing process: add the signature to the HTTP request's headers.\n         *\n         * @see https://docs.aws.amazon.com/general/latest/gr/sigv4-add-signature-to-request.html\n         */\n        request.headers[constants.AUTHORIZATION_HEADER] =\n            `${constants.SIGNING_ALGORITHM_IDENTIFIER} ` +\n            `Credential=${this.credentials.accessKeyId}/${scope}, ` +\n            `SignedHeaders=${Object.keys(canonicalHeaders).sort().join(';')}, ` +\n            `Signature=${signature}`\n\n        // If a request path was provided, add it to the URL\n        let url = request.endpoint.href\n        if (request.path) {\n            url += request.path\n        }\n\n        // If a request query string was provided, add it to the URL\n        if (request.query) {\n            // We exclude the signature from the query string\n            url += `?${this.serializeQueryParameters(request.query)}`\n        }\n\n        return {\n            url: url,\n            ...request,\n        }\n    }\n\n    /**\n     * Produces a presigned URL with AWS v4 signature information for the provided HTTP request.\n     *\n     * A presigned URL is a URL that contains the authorization information\n     * (signature and other signing information) in the query string. This method\n     * returns a preformatted URL that can be used to make the k6 http request.\n     *\n     * @param originalRequest - The original request to presign.\n     * @param options - Options controlling the signing of the request.\n     * @returns A signed request, including the presigned URL.\n     */\n    presign(originalRequest: HTTPRequest, options: PresignOptions = {}): SignedHTTPRequest {\n        const {\n            signingDate = new Date(),\n            expiresIn = 3600,\n            unsignableHeaders,\n            unhoistableHeaders,\n            signableHeaders,\n            signingRegion,\n            signingService,\n        } = options\n        const { longDate, shortDate }: DateInfo = formatDate(signingDate)\n        const region = signingRegion || this.region\n        const service = signingService || this.service\n\n        if (expiresIn > constants.MAX_PRESIGNED_TTL) {\n            throw new InvalidSignatureError(\n                \"Signature version 4 presigned URLs can't be valid for more than 7 days\"\n            )\n        }\n\n        const scope = `${shortDate}/${region}/${service}/${constants.KEY_TYPE_IDENTIFIER}`\n        const request = this.moveHeadersToQuery(originalRequest, { unhoistableHeaders })\n\n        // Required by the specification:\n        //   \"For HTTP/1.1 requests, you must include the host header at a minimum.\n        //   Standard headers like content-type are optional.\n        //   For HTTP/2 requests, you must include the :authority header instead of\n        //   the host header. Different services might require other headers.\"\n        request.headers[constants.HOST_HEADER] = originalRequest.endpoint.hostname\n\n        // If the user provided a session token, include it in the signed url query string.\n        if (this.credentials.sessionToken) {\n            request.query[constants.AMZ_TOKEN_QUERY_PARAM] = this.credentials.sessionToken\n        }\n\n        // Add base signing query parameters to the request, as described in the documentation\n        // @see https://docs.aws.amazon.com/general/latest/gr/sigv4-add-signature-to-request.html\n        request.query[constants.AMZ_ALGORITHM_QUERY_PARAM] = constants.SIGNING_ALGORITHM_IDENTIFIER\n        request.query[\n            constants.AMZ_CREDENTIAL_QUERY_PARAM\n        ] = `${this.credentials.accessKeyId}/${scope}`\n        request.query[constants.AMZ_DATE_QUERY_PARAM] = longDate\n        request.query[constants.AMZ_EXPIRES_QUERY_PARAM] = expiresIn.toString(10)\n\n        const canonicalHeaders = this.computeCanonicalHeaders(\n            request,\n            unsignableHeaders,\n            signableHeaders\n        )\n        request.query[constants.AMZ_SIGNED_HEADERS_QUERY_PARAM] = Object.keys(canonicalHeaders)\n            .sort()\n            .join(';')\n\n        const signingKey = this.deriveSigningKey(this.credentials, service, region, shortDate)\n\n        // Computing the payload from the original request. This is required\n        // in the event the user attempts to produce a presigned URL for s3,\n        // which requires the payload hash to be 'UNSIGNED-PAYLOAD'.\n        //\n        // To that effect, users need to set the 'x-amz-content-sha256' header,\n        // and mark it as unhoistable and unsignable. When setup this way,\n        // the computePayloadHash method will then return the string 'UNSIGNED-PAYLOAD'.\n        const payloadHash = this.computePayloadHash(originalRequest)\n        const canonicalRequest = this.createCanonicalRequest(request, canonicalHeaders, payloadHash)\n\n        request.query[constants.AMZ_SIGNATURE_QUERY_PARAM] = this.calculateSignature(\n            longDate,\n            scope,\n            signingKey,\n            canonicalRequest\n        )\n\n        // If a request path was provided, add it to the URL\n        let url = request.endpoint.href\n        if (request.path) {\n            url += request.path\n        }\n\n        // If a request query string was provided, add it to the URL\n        if (request.query) {\n            url += `?${this.serializeQueryParameters(request.query)}`\n        }\n\n        return { url: url, ...request }\n    }\n\n    /**\n     * Create a string including information from your request\n     * in a AWS signature v4 standardized (canonical) format.\n     *\n     * Step 1 of the signing process: create the canonical request string.\n     * @see https://docs.aws.amazon.com/general/latest/gr/sigv4-create-canonical-request.html\n     *\n     * @param request {HTTPRequest} The request to sign.\n     * @param canonicalHeaders {HTTPHeaderBag} The request's canonical headers.\n     * @param payloadHash {string} The hexadecimally encoded request's payload hash .\n     * @returns {string} The canonical request string.\n     */\n    private createCanonicalRequest(\n        request: HTTPRequest,\n        canonicalHeaders: HTTPHeaderBag,\n        payloadHash: string\n    ): string {\n        const sortedHeaders = Object.keys(canonicalHeaders).sort()\n        const sortedCanonicalHeaders = sortedHeaders\n            .map((name) => `${name}:${canonicalHeaders[name]}`)\n            .join('\\n')\n        const signedHeaders = sortedHeaders.join(';')\n\n        return (\n            `${request.method}\\n` +\n            `${this.computeCanonicalURI(request)}\\n` +\n            `${this.computeCanonicalQuerystring(request)}\\n` +\n            `${sortedCanonicalHeaders}\\n\\n` +\n            `${signedHeaders}\\n` +\n            `${payloadHash}`\n        )\n    }\n\n    /**\n     * Create the \"string to sign\" part of the signature Version 4 protocol.\n     *\n     * The \"string to sign\" includes meta information about your request and\n     * about the canonical request that you created with `createCanonicalRequest`.\n     * It is used hand in hand with the signing key to create the request signature.\n     * Step 2 of the signing process: create the string to sign.\n     * @see https://docs.aws.amazon.com/general/latest/gr/sigv4-create-string-to-sign.html\n     *\n     * @param longDate {string} The request's date in iso 8601 format.\n     * @param credentialScope {string} The request's credential scope.\n     * @param canonicalRequest {string} The request's canonical request.\n     * @returns {string} The \"string to sign\".\n     */\n    private createStringToSign(\n        longDate: string,\n        credentialScope: string,\n        canonicalRequest: string\n    ): string {\n        const hashedCanonicalRequest = crypto.sha256(canonicalRequest, 'hex')\n\n        return (\n            `${constants.SIGNING_ALGORITHM_IDENTIFIER}\\n` +\n            `${longDate}\\n` +\n            `${credentialScope}\\n` +\n            `${hashedCanonicalRequest}`\n        )\n    }\n\n    /**\n     * Calculte the signature for AWS signature version 4.\n     *\n     * Step 3 of the signing process: create the signature.\n     * @see https://docs.aws.amazon.com/general/latest/gr/sigv4-calculate-signature.html\n     *\n     * @param longDate {string} The request's date in iso 8601 format.\n     * @param credentialScope {string} The request's credential scope.\n     * @param signingKey {string} the signing key as computed by the deriveSigningKey method.\n     * @param canonicalRequest {string} The request's canonical request.\n     * @returns {string} The signature.\n     */\n    private calculateSignature(\n        longDate: string,\n        credentialScope: string,\n        signingKey: Uint8Array,\n        canonicalRequest: string\n    ): string {\n        const stringToSign = this.createStringToSign(longDate, credentialScope, canonicalRequest)\n        return crypto.hmac('sha256', signingKey, stringToSign, 'hex')\n    }\n\n    /**\n     * Derives the signing key for authenticating requests signed with\n     * the Signature version 4 authentication protocol.\n     *\n     * deriveSigningKey produces a signing key by creating a series of\n     * hash-based message authentication codes (HMACs) represented in\n     * a binary format.\n     *\n     * The derived signing key is specific to the date it's made at, as well as\n     * the service and region it targets.\n     *\n     * @param credentials {AWSCredentials} The credentials to use for signing.\n     * @param service {string} The service the request is targeted at.\n     * @param region {string} The region the request is targeted at.\n     * @param shortDate {string} The request's date in YYYYMMDD format.\n     * @returns {Uint8Array} The derived signing key.\n     */\n    private deriveSigningKey(\n        credentials: Credentials,\n        service: string,\n        region: string,\n        shortDate: string\n    ): Uint8Array {\n        const kSecret: string = credentials.secretAccessKey\n        const kDate: any = crypto.hmac('sha256', 'AWS4' + kSecret, shortDate, 'binary')\n        const kRegion: any = crypto.hmac('sha256', kDate, region, 'binary')\n        const kService: any = crypto.hmac('sha256', kRegion, service, 'binary')\n        const kSigning: any = crypto.hmac('sha256', kService, 'aws4_request', 'binary')\n\n        return kSigning\n    }\n\n    /**\n     * Create a string that includes information from your request\n     * in a AWS signature v4 standardized (canonical) format.\n     *\n     * @param param0 {HTTPRequest} The request to sign.\n     * @returns {string} The canonical URI.\n     */\n    private computeCanonicalURI({ path }: HTTPRequest): string {\n        if (this.uriEscapePath) {\n            // Non-S3 services, we normalize the path and then double URI encode it.\n            // Ref: \"Remove Dot Segments\" https://datatracker.ietf.org/doc/html/rfc3986#section-5.2.4\n            const normalizedURISegments = []\n\n            for (const URISegment of path.split('/')) {\n                if (URISegment?.length === 0) {\n                    continue\n                }\n\n                if (URISegment === '.') {\n                    continue\n                }\n\n                if (URISegment === '..') {\n                    normalizedURISegments.pop()\n                } else {\n                    normalizedURISegments.push(URISegment)\n                }\n            }\n\n            // Normalize the URI\n            const leading = path?.startsWith('/') ? '/' : ''\n            const URI = normalizedURISegments.join('/')\n            const trailing = normalizedURISegments.length > 0 && path?.endsWith('/') ? '/' : ''\n            const normalizedURI = `${leading}${URI}${trailing}`\n\n            const doubleEncoded = encodeURIComponent(normalizedURI)\n\n            return doubleEncoded.replace(/%2F/g, '/')\n        }\n\n        // For S3, we shouldn't normalize the path. For example, object name\n        // my-object//example//photo.user should not be normalized to\n        // my-object/example/photo.user\n        return path\n    }\n\n    /**\n     * Serializes the request's query parameters into their canonical\n     * string version. If the request does not include a query parameters,\n     * returns an empty string.\n     *\n     * @param param0 {HTTPRequest} The request containing the query parameters.\n     * @returns {string} The canonical query string.\n     */\n    private computeCanonicalQuerystring({ query = {} }: HTTPRequest): string {\n        const keys: Array<string> = []\n        const serialized: Record<string, string> = {}\n\n        for (const key of Object.keys(query).sort()) {\n            if (key.toLowerCase() === constants.AMZ_SIGNATURE_HEADER) {\n                continue\n            }\n\n            keys.push(key)\n            const value = query[key]\n\n            if (typeof value === 'string') {\n                serialized[key] = `${escapeURI(key)}=${escapeURI(value)}`\n            } else if (Array.isArray(value)) {\n                serialized[key] = value\n                    .slice(0)\n                    .sort()\n                    .reduce(\n                        (encoded: Array<string>, value: string) =>\n                            encoded.concat([`${escapeURI(key)}=${escapeURI(value)}`]),\n                        []\n                    )\n                    .join('&')\n            }\n        }\n\n        return keys\n            .map((key) => serialized[key])\n            .filter((serialized) => serialized)\n            .join('&')\n    }\n\n    /**\n     * Create the canonical form of the request's headers.\n     * Canonical headers consist of all the HTTP headers you\n     * are including with the signed request.\n     *\n     * @param param0 {HTTPRequest} The request to compute the canonical headers of.\n     * @param unsignableHeaders {Set<string>} The headers that should not be signed.\n     * @param signableHeaders {Set<string>} The headers that should be signed.\n     * @returns {string} The canonical headers.\n     */\n    private computeCanonicalHeaders(\n        { headers }: HTTPRequest,\n        unsignableHeaders?: Set<string>,\n        signableHeaders?: Set<string>\n    ): HTTPHeaderBag {\n        const canonicalHeaders: HTTPHeaderBag = {}\n\n        for (const headerName of Object.keys(headers).sort()) {\n            if (headers[headerName] == undefined) {\n                continue\n            }\n\n            const canonicalHeaderName = headerName.toLowerCase()\n            if (\n                canonicalHeaderName in constants.ALWAYS_UNSIGNABLE_HEADERS ||\n                unsignableHeaders?.has(canonicalHeaderName)\n            ) {\n                if (\n                    !signableHeaders ||\n                    (signableHeaders && !signableHeaders.has(canonicalHeaderName))\n                ) {\n                    continue\n                }\n            }\n\n            canonicalHeaders[canonicalHeaderName] = headers[headerName].trim().replace(/\\s+/g, ' ')\n        }\n\n        return canonicalHeaders\n    }\n\n    /**\n     * Computes the SHA256 cryptographic hash of the request's body.\n     *\n     * If the headers contain the 'X-Amz-Content-Sha256' header, then\n     * the value of that header is returned instead. This proves useful\n     * when, for example, presiging a URL for S3, as the payload hash\n     * must always be equal to 'UNSIGNED-PAYLOAD'.\n     *\n     * @param param0 {HTTPRequest} The request to compute the payload hash of.\n     * @returns {string} The hex encoded SHA256 payload hash, or the value of the 'X-Amz-Content-Sha256' header.\n     */\n    private computePayloadHash({ headers, body }: HTTPRequest): string {\n        // for (const headerName of Object.keys(headers)) {\n        //     // If the header is present, return its value.\n        //     // So that we let the 'UNSIGNED-PAYLOAD' value pass through.\n        //     if (headerName.toLowerCase() === constants.AMZ_CONTENT_SHA256_HEADER) {\n        //         return headers[headerName]\n        //     }\n        // }\n\n        if (headers[constants.AMZ_CONTENT_SHA256_HEADER]) {\n            return headers[constants.AMZ_CONTENT_SHA256_HEADER]\n        }\n\n        if (body == undefined) {\n            return constants.EMPTY_SHA256\n        }\n\n        if (typeof body === 'string' || isArrayBuffer(body)) {\n            return crypto.sha256(body, 'hex').toLowerCase()\n        }\n\n        if (ArrayBuffer.isView(body)) {\n            // If the request body is a typed array, we need to convert it to a buffer\n            // so that we can calculate the checksum.\n            return crypto.sha256((body as DataView).buffer, 'hex').toLowerCase()\n        }\n\n        return constants.UNSIGNED_PAYLOAD\n    }\n\n    /**\n     * Moves a request's headers to its query parameters.\n     *\n     * The operation will ignore any amazon standard headers, prefixed\n     * with 'X-Amz-'. It will also ignore any headers specified as unhoistable\n     * by the options.\n     *\n     * The operation will delete the headers from the request.\n     *\n     * @param request {HTTPRequest} The request to move the headers from.\n     * @param options\n     * @returns {HTTPRequest} The request with the headers moved to the query parameters.\n     */\n    private moveHeadersToQuery(\n        request: HTTPRequest,\n        options: { unhoistableHeaders?: Set<string> } = {}\n    ): HTTPRequest & { query: QueryParameterBag } {\n        const requestCopy = JSON.parse(JSON.stringify(request))\n        const { headers, query = {} as QueryParameterBag } = requestCopy\n\n        for (const name of Object.keys(headers)) {\n            const lowerCaseName = name.toLowerCase()\n            if (\n                lowerCaseName.slice(0, 6) === 'x-amz-' &&\n                !options.unhoistableHeaders?.has(lowerCaseName)\n            ) {\n                query[name] = headers[name]\n                delete headers[name]\n            }\n        }\n\n        return {\n            ...requestCopy,\n            headers,\n            query,\n        }\n    }\n\n    /**\n     * Serializes a HTTPRequest's query parameter bag into a string.\n     *\n     * @param query {QueryParameterBag} The query parameters to serialize.\n     * @param ignoreKeys {Set<string>} The keys to ignore.\n     * @returns {string} The serialized, and ready to use in a URL, query parameters.\n     */\n    private serializeQueryParameters(query: QueryParameterBag, ignoreKeys?: string[]): string {\n        const keys: Array<string> = []\n        const serialized: Record<string, string> = {}\n\n        for (const key of Object.keys(query).sort()) {\n            if (ignoreKeys?.includes(key.toLowerCase())) {\n                continue\n            }\n\n            keys.push(key)\n            const value = query[key]\n\n            if (typeof value === 'string') {\n                serialized[key] = `${escapeURI(key)}=${escapeURI(value)}`\n            } else if (Array.isArray(value)) {\n                serialized[key] = value\n                    .slice(0)\n                    .sort()\n                    .reduce(\n                        (encoded: Array<string>, value: string) =>\n                            encoded.concat([`${escapeURI(key)}=${escapeURI(value)}`]),\n                        []\n                    )\n                    .join('&')\n            }\n        }\n\n        return keys\n            .map((key) => serialized[key])\n            .filter((serialized) => serialized)\n            .join('&')\n    }\n}\n\n/**\n * Error indicating an Invalid signature has been sent to AWS services\n *\n * Inspired from AWS official error types, as\n * described in:\n *   * https://aws.amazon.com/blogs/developer/service-error-handling-modular-aws-sdk-js/\n *   * https://github.com/aws/aws-sdk-js/blob/master/lib/error.d.ts\n */\nexport class InvalidSignatureError extends AWSError {\n    /**\n     * Constructs an InvalidSignatureError\n     *\n     * @param  {string} message - human readable error message\n     */\n    constructor(message: string, code?: string) {\n        super(message, code)\n        this.name = 'InvalidSignatureError'\n    }\n}\n\nexport interface SignatureV4Options {\n    /**\n     * The name of the service to sign for.\n     */\n    service: string\n\n    /**\n     * The name of the region to sign for.\n     */\n    region: string\n\n    /**\n     * The credentials with which the request should be signed.\n     */\n    credentials: Credentials\n\n    /**\n     * Whether to uri-escape the request URI path as part of computing the\n     * canonical request string. This is required for every AWS service, except\n     * Amazon S3, as of late 2017.\n     *\n     * @default [true]\n     */\n    uriEscapePath?: boolean\n\n    /**\n     * Whether to calculate a checksum of the request body and include it as\n     * either a request header (when signing) or as a query string parameter\n     * (when presigning). This is required for AWS Glacier and Amazon S3 and optional for\n     * every other AWS service as of late 2017.\n     *\n     * @default [true]\n     */\n    applyChecksum?: boolean\n}\n\nexport interface SignOptions {\n    /**\n     * The date and time to be used as signature metadata. This value should be\n     * a Date object, a unix (epoch) timestamp, or a string that can be\n     * understood by the JavaScript `Date` constructor.If not supplied, the\n     * value returned by `new Date()` will be used.\n     */\n    signingDate?: Date\n\n    /**\n     * The service signing name. It will override the service name of the signer\n     * in current invocation\n     */\n    signingService?: string\n\n    /**\n     * The region name to sign the request. It will override the signing region of the\n     * signer in current invocation\n     */\n    signingRegion?: string\n}\n\nexport interface RequestSigningOptions extends SignOptions {\n    /**\n     * A set of strings whose members represents headers that cannot be signed.\n     * All headers in the provided request will have their names converted to\n     * lower case and then checked for existence in the unsignableHeaders set.\n     */\n    unsignableHeaders?: Set<string>\n\n    /**\n     * A set of strings whose members represents headers that should be signed.\n     * Any values passed here will override those provided via unsignableHeaders,\n     * allowing them to be signed.\n     *\n     * All headers in the provided request will have their names converted to\n     * lower case before signing.\n     */\n    signableHeaders?: Set<string>\n}\n\nexport interface PresignOptions extends RequestSigningOptions {\n    /**\n     * The number of seconds before the presigned URL expires\n     */\n    expiresIn?: number\n\n    /**\n     * A set of strings whose representing headers that should not be hoisted\n     * to presigned request's query string. If not supplied, the presigner\n     * moves all the AWS-specific headers (starting with `x-amz-`) to the request\n     * query string. If supplied, these headers remain in the presigned request's\n     * header.\n     * All headers in the provided request will have their names converted to\n     * lower case and then checked for existence in the unhoistableHeaders set.\n     */\n    unhoistableHeaders?: Set<string>\n}\n\nexport interface Credentials {\n    /**\n     * AWS access key ID\n     */\n    readonly accessKeyId: string\n\n    /**\n     * AWS secret access key\n     */\n    readonly secretAccessKey: string\n\n    /**\n     * A security or session token to use with these credentials. Usually\n     * present for temporary credentials.\n     */\n    readonly sessionToken?: string\n}\n\nexport interface DateInfo {\n    /**\n     * ISO8601 formatted date string\n     */\n    longDate: string\n\n    /**\n     * String in the format YYYYMMDD\n     */\n    shortDate: string\n}\n\n/**\n * Escapes a URI following the AWS signature v4 escaping rules.\n *\n * @param URI {string} The URI to escape.\n * @returns {string} The escaped URI.\n */\nfunction escapeURI(URI: string): string {\n    const hexEncode = (c: string): string => {\n        return `%${c.charCodeAt(0).toString(16).toUpperCase()}`\n    }\n\n    return encodeURIComponent(URI).replace(/[!'()*]/g, hexEncode)\n}\n\n/**\n * formatDate formats a Date object into a ISO8601 formatted date string\n * and a string in the format YYYYMMDD.\n *\n * @param date {Date} The date to format.\n * @returns {DateInfo} The formatted date.\n */\nfunction formatDate(date: Date): DateInfo {\n    const longDate = iso8601(date).replace(/[\\-:]/g, '')\n    return {\n        longDate,\n        shortDate: longDate.slice(0, 8),\n    }\n}\n\n/**\n * Formats a time into an ISO 8601 string.\n *\n * @see https://en.wikipedia.org/wiki/ISO_8601\n *\n * @param time {number | string | Date} The time to format.\n * @returns {string} The ISO 8601 formatted time.\n */\nfunction iso8601(time: number | string | Date): string {\n    return toDate(time)\n        .toISOString()\n        .replace(/\\.\\d{3}Z$/, 'Z')\n}\n\n/**\n * Converts a time value into a Date object.\n *\n * @param time {number | string | Date} The time to convert.\n * @returns {Date} The resulting Date object.\n */\nfunction toDate(time: number | string | Date): Date {\n    if (typeof time === 'number') {\n        return new Date(time * 1000)\n    }\n\n    if (typeof time === 'string') {\n        if (Number(time)) {\n            return new Date(Number(time) * 1000)\n        }\n\n        return new Date(time)\n    }\n\n    return time\n}\n","import { Endpoint } from './endpoint'\n\n/**\n * Type representing HTTP schemes\n */\nexport type HTTPScheme = 'http' | 'https'\n\n/**\n * Type representing HTTP Methods\n *\n */\nexport type HTTPMethod = 'GET' | 'POST' | 'PUT' | 'DELETE'\n\n/**\n * Type alias representing HTTP Headers\n */\nexport type HTTPHeaders = { [key: string]: string }\n\n/**\n * HTTPHeaderBag is a type alias representing HTTP Headers\n */\nexport type HTTPHeaderBag = Record<string, string>\n\nexport function hasHeader(soughtHeader: string, headers: HTTPHeaderBag): boolean {\n    soughtHeader = soughtHeader.toLowerCase()\n\n    for (const headerName of Object.keys(headers)) {\n        if (soughtHeader === headerName.toLowerCase()) {\n            return true\n        }\n    }\n\n    return false\n}\n\n/**\n * QueryParameterBag is a type alias representing HTTP Query Parameters\n */\nexport type QueryParameterBag = Record<string, string | Array<string>>\n\n/**\n * HTTPRequest represents an HTTP request\n */\nexport interface HTTPRequest {\n    /**\n     * The HTTP method to use\n     */\n    method: HTTPMethod\n\n    /**\n     * Represents an AWS service endpoint, providing utilities for parsing and handling URL details.\n     */\n    endpoint: Endpoint\n\n    /**\n     * The path to the resource\n     */\n    path: string\n\n    /**\n     * The query parameters to include in the request\n     */\n    query?: QueryParameterBag\n\n    /**\n     * The headers to include in the request\n     */\n    headers: HTTPHeaderBag\n\n    /**\n     * The body of the request\n     */\n    body?: string | ArrayBuffer | null\n}\n\n/**\n * SignedHTTPRequest represents an HTTP request that has been signed\n * with an AWS signature. It is a superset of HTTPRequest adding\n * the following fields:\n * - url: the fully qualified URL of the request that can be used in a k6 http.request.\n */\nexport interface SignedHTTPRequest extends HTTPRequest {\n    url: string\n}\n","/**\n *\n * @param value\n * @returns\n */\nexport function isArrayBuffer(value: any): value is ArrayBuffer {\n    return (\n        typeof ArrayBuffer === 'function' &&\n        (value instanceof ArrayBuffer ||\n            Object.prototype.toString.call(value) === '[object ArrayBuffer]')\n    )\n}\n\nexport function toFormUrlEncoded(form: any): string {\n    return Object.keys(form).reduce((params, key) => {\n        let value = form[key]\n        if (value !== undefined && value !== null) {\n            params.push(`${encodeURIComponent(key)}=${encodeURIComponent(value)}`)\n        }\n        return params;\n    }, [] as string[]).join('&')\n}","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"k6/http\");","import { bytes } from 'k6'\nimport { parseHTML } from 'k6/html'\nimport http, { RefinedResponse, ResponseType } from 'k6/http'\n\nimport { AWSClient } from './client'\nimport { AWSConfig } from './config'\nimport { AWSError } from './error'\nimport { SignedHTTPRequest } from './http'\nimport { InvalidSignatureError, SignatureV4 } from './signature'\n\n/** Class allowing to interact with Amazon AWS's S3 service */\nexport class S3Client extends AWSClient {\n    signature: SignatureV4\n\n    /**\n     * Create a S3Client\n     *\n     * @param {AWSConfig} awsConfig - configuration attributes to use when interacting with AWS' APIs\n     */\n    constructor(awsConfig: AWSConfig) {\n        super(awsConfig, 's3')\n\n        this.signature = new SignatureV4({\n            service: this.serviceName,\n            region: this.awsConfig.region,\n            credentials: {\n                accessKeyId: this.awsConfig.accessKeyId,\n                secretAccessKey: this.awsConfig.secretAccessKey,\n                sessionToken: this.awsConfig.sessionToken,\n            },\n            uriEscapePath: false,\n            applyChecksum: true,\n        })\n    }\n\n    /**\n     * Returns a list of all buckets owned by the authenticated sender of the request.\n     * To use this operation, you must have the s3:ListAllMyBuckets permission.\n     *\n     * @return  {Array.<S3Bucket>} buckets - An array of objects describing S3 buckets\n     *     with the following fields: name, and creationDate.\n     * @throws  {S3ServiceError}\n     * @throws  {InvalidSignatureError}\n     */\n    async listBuckets(): Promise<Array<S3Bucket>> {\n        const method = 'GET'\n\n        const signedRequest: SignedHTTPRequest = this.signature.sign(\n            {\n                method: 'GET',\n                endpoint: this.endpoint,\n                path: '/',\n                headers: {},\n            },\n            {}\n        )\n\n        const res = await http.asyncRequest(method, signedRequest.url, signedRequest.body || null, {\n            headers: signedRequest.headers,\n        })\n        this._handle_error('ListBuckets', res)\n\n        let buckets: Array<S3Bucket> = []\n\n        const doc = parseHTML(res.body as string)\n\n        doc.find('Buckets')\n            .children()\n            .each((_, bucketDefinition) => {\n                let bucket = {}\n\n                bucketDefinition.children().forEach((child) => {\n                    switch (child.nodeName()) {\n                        case 'name':\n                            Object.assign(bucket, { name: child.textContent() })\n                            break\n                        case 'creationdate':\n                            Object.assign(bucket, {\n                                creationDate: Date.parse(child.textContent()),\n                            })\n                    }\n                })\n\n                buckets.push(bucket as S3Bucket)\n            })\n\n        return buckets\n    }\n\n    /**\n     * Returns some or all (up to 1,000) of the objects in a bucket.\n     *\n     * @param  {string} bucketName - Bucket name to list.\n     * @param  {string?} prefix='' - Limits the response to keys that begin with the specified prefix.\n     * @return {Array.<S3Object>} - returns an array of objects describing S3 objects\n     *     with the following fields: key, lastModified, etag, size and storageClass.\n     * @throws  {S3ServiceError}\n     * @throws  {InvalidSignatureError}\n     */\n    async listObjects(bucketName: string, prefix?: string): Promise<Array<S3Object>> {\n        const method = 'GET'\n\n        const signedRequest: SignedHTTPRequest = this.signature.sign(\n            {\n                method: method,\n                endpoint: this.endpoint,\n                path: `/${bucketName}/`,\n                query: {\n                    'list-type': '2',\n                    prefix: prefix || '',\n                },\n                headers: {},\n            },\n            {}\n        )\n\n        const res = await http.asyncRequest(method, signedRequest.url, signedRequest.body || null, {\n            headers: signedRequest.headers,\n        })\n        this._handle_error('ListObjectsV2', res)\n\n        let objects: Array<S3Object> = []\n\n        // Extract the objects definition from\n        // the XML response\n        parseHTML(res.body as string)\n            .find('Contents')\n            .each((_, objectDefinition) => {\n                let obj = {}\n\n                objectDefinition.children().forEach((child) => {\n                    switch (child.nodeName()) {\n                        case 'key':\n                            Object.assign(obj, { key: child.textContent() })\n                            break\n                        case 'lastmodified':\n                            Object.assign(obj, { lastModified: Date.parse(child.textContent()) })\n                            break\n                        case 'etag':\n                            Object.assign(obj, { etag: child.textContent() })\n                            break\n                        case 'size':\n                            Object.assign(obj, { size: parseInt(child.textContent()) })\n                            break\n                        case 'storageclass':\n                            Object.assign(obj, { storageClass: child.textContent() })\n                    }\n                })\n\n                objects.push(obj as S3Object)\n            })\n\n        return objects\n    }\n    /**\n     * Retrieves an Object from Amazon S3.\n     *\n     * To use getObject, you must have `READ` access to the object.\n     *\n     * @param  {string} bucketName - The bucket name containing the object.\n     * @param  {string} objectKey - Key of the object to get.\n     * @return {S3Object} - returns the content of the fetched S3 Object.\n     * @throws  {S3ServiceError}\n     * @throws  {InvalidSignatureError}\n     */\n    async getObject(bucketName: string, objectKey: string): Promise<S3Object> {\n        // Prepare request\n        const method = 'GET'\n\n        const signedRequest = this.signature.sign(\n            {\n                method: method,\n                endpoint: this.endpoint,\n                path: `/${bucketName}/${objectKey}`,\n                headers: {},\n            },\n            {}\n        )\n\n        const res = await http.asyncRequest(method, signedRequest.url, signedRequest.body || null, {\n            headers: signedRequest.headers,\n        })\n        this._handle_error('GetObject', res)\n\n        return new S3Object(\n            objectKey,\n            Date.parse(res.headers['Last-Modified']),\n            res.headers['ETag'],\n            parseInt(res.headers['Content-Length']),\n\n            // The X-Amz-Storage-Class header is only set if the storage class is\n            // not the default 'STANDARD' one.\n            (res.headers['X-Amz-Storage-Class'] ?? 'STANDARD') as StorageClass,\n\n            res.body\n        )\n    }\n    /**\n     * Adds an object to a bucket.\n     *\n     * You must have WRITE permissions on a bucket to add an object to it.\n     *\n     * @param  {string} bucketName - The bucket name containing the object.\n     * @param  {string} objectKey - Key of the object to put.\n     * @param  {string | ArrayBuffer} data - the content of the S3 Object to upload.\n     * @throws  {S3ServiceError}\n     * @throws  {InvalidSignatureError}\n     */\n    async putObject(\n        bucketName: string,\n        objectKey: string,\n        data: string | ArrayBuffer\n    ): Promise<void> {\n        // Prepare request\n        const method = 'PUT'\n\n        const signedRequest = this.signature.sign(\n            {\n                method: method,\n                endpoint: this.endpoint,\n                path: `/${bucketName}/${objectKey}`,\n                headers: {\n                    Host: this.endpoint.host,\n                },\n                body: data,\n            },\n            {}\n        )\n\n        const res = await http.asyncRequest(method, signedRequest.url, signedRequest.body, {\n            headers: signedRequest.headers,\n        })\n        this._handle_error('PutObject', res)\n    }\n\n    /**\n     * Removes the null version (if there is one) of an object and inserts a delete marker,\n     * which becomes the latest version of the object.\n     *\n     * @param  {string} bucketName - The bucket name containing the object.\n     * @param  {string} objectKey - Key of the object to delete.\n     * @throws  {S3ServiceError}\n     * @throws  {InvalidSignatureError}\n     */\n    async deleteObject(bucketName: string, objectKey: string): Promise<void> {\n        // Prepare request\n        const method = 'DELETE'\n\n        const signedRequest = this.signature.sign(\n            {\n                method: method,\n                endpoint: this.endpoint,\n                path: `/${bucketName}/${objectKey}`,\n                headers: {},\n            },\n            {}\n        )\n\n        const res = await http.asyncRequest(method, signedRequest.url, signedRequest.body || null, {\n            headers: signedRequest.headers,\n        })\n        this._handle_error('DeleteObject', res)\n    }\n\n    /**\n     * Copies an object from one bucket to another\n     *\n     * @param  {string} sourceBucket - The source bucket name containing the object.\n     * @param  {string} sourceKey - Key of the source object to copy.\n     * @param  {string} destinationBucket - The destination bucket name containing the object.\n     * @param  {string} destinationKey - Key of the destination object.\n     * @throws  {S3ServiceError}\n     * @throws  {InvalidSignatureError}\n     */\n    async copyObject(\n        sourceBucket: string,\n        sourceKey: string,\n        destinationBucket: string,\n        destinationKey: string\n    ): Promise<void> {\n        const method = 'PUT'\n\n        const bucketEndpoint = this.endpoint.copy()\n        bucketEndpoint.hostname = `${destinationBucket}.${this.endpoint.hostname}`\n\n        const signedRequest = this.signature.sign(\n            {\n                method: method,\n                endpoint: bucketEndpoint,\n                path: `/${destinationKey}`,\n                headers: {\n                    'x-amz-copy-source': `${sourceBucket}/${sourceKey}`,\n                },\n            },\n            {}\n        )\n\n        const res = await http.asyncRequest(method, signedRequest.url, signedRequest.body || null, {\n            headers: signedRequest.headers,\n        })\n\n        this._handle_error('CopyObject', res)\n    }\n\n    /**\n     * Creates a new multipart upload for a given objectKey.\n     * The uploadId returned can be used to upload parts to the object.\n     *\n     * @param  {string} bucketName - The bucket name containing the object.\n     * @param  {string} objectKey - Key of the object to upload.\n     * @return {S3MultipartUpload} - returns the uploadId of the newly created multipart upload.\n     * @throws  {S3ServiceError}\n     * @throws  {InvalidSignatureError}\n     */\n    async createMultipartUpload(bucketName: string, objectKey: string): Promise<S3MultipartUpload> {\n        const method = 'POST'\n\n        const bucketEndpoint = this.endpoint.copy()\n        bucketEndpoint.hostname = `${bucketName}.${this.endpoint.hostname}`\n\n        const signedRequest = this.signature.sign(\n            {\n                method: method,\n                endpoint: bucketEndpoint,\n                path: `/${objectKey}`,\n                headers: {},\n                query: { uploads: '' },\n            },\n            {}\n        )\n\n        const res = await http.asyncRequest(method, signedRequest.url, signedRequest.body || null, {\n            headers: signedRequest.headers,\n        })\n        this._handle_error('CreateMultipartUpload', res)\n\n        return new S3MultipartUpload(\n            objectKey,\n            parseHTML(res.body as string)\n                .find('UploadId')\n                .text()\n        )\n    }\n\n    /**\n     * Uploads a part in a multipart upload.\n     * @param {string} bucketName - The bucket name containing the object.\n     * @param {string} objectKey - Key of the object to upload.\n     * @param {string} uploadId - The uploadId of the multipart upload.\n     * @param {number} partNumber - The part number of the part to upload.\n     * @param {string | ArrayBuffer} data - The content of the part to upload.\n     * @return {S3Part} - returns the ETag of the uploaded part.\n     * @throws  {S3ServiceError}\n     */\n    async uploadPart(\n        bucketName: string,\n        objectKey: string,\n        uploadId: string,\n        partNumber: number,\n        data: string | ArrayBuffer\n    ): Promise<S3Part> {\n        const method = 'PUT'\n\n        const bucketEndpoint = this.endpoint.copy()\n        bucketEndpoint.hostname = `${bucketName}.${this.endpoint.hostname}`\n\n        const signedRequest = this.signature.sign(\n            {\n                method: method,\n                endpoint: bucketEndpoint,\n                path: `/${objectKey}`,\n                headers: {},\n                body: data,\n                query: {\n                    partNumber: `${partNumber}`,\n                    uploadId: `${uploadId}`,\n                },\n            },\n            {}\n        )\n\n        const res = await http.asyncRequest(method, signedRequest.url, signedRequest.body || null, {\n            headers: signedRequest.headers,\n        })\n        this._handle_error('UploadPart', res)\n\n        return new S3Part(partNumber, res.headers['Etag'])\n    }\n\n    /**\n     * Completes a multipart upload by assembling previously uploaded parts.\n     *\n     * @param  {string} bucketName - The bucket name containing the object.\n     * @param  {string} objectKey - Key of the object to delete.\n     * @param  {string} uploadId - The uploadId of the multipart upload to complete.\n     * @param  {S3Part[]} parts - The parts to assemble.\n     * @throws  {S3ServiceError}\n     * @throws  {InvalidSignatureError}\n     */\n    async completeMultipartUpload(\n        bucketName: string,\n        objectKey: string,\n        uploadId: string,\n        parts: S3Part[]\n    ) {\n        // Prepare request\n        const method = 'POST'\n        const body = `<CompleteMultipartUpload>${parts\n            .map(\n                (part) =>\n                    `<Part><PartNumber>${part.partNumber}</PartNumber><ETag>${part.eTag}</ETag></Part>`\n            )\n            .join('')}</CompleteMultipartUpload>`\n\n        const bucketEndpoint = this.endpoint.copy()\n        bucketEndpoint.hostname = `${bucketName}.${this.endpoint.hostname}`\n\n        const signedRequest = this.signature.sign(\n            {\n                method: method,\n                endpoint: bucketEndpoint,\n                path: `/${objectKey}`,\n                headers: {},\n                body: body,\n                query: {\n                    uploadId: `${uploadId}`,\n                },\n            },\n            {}\n        )\n\n        const res = await http.asyncRequest(method, signedRequest.url, signedRequest.body || null, {\n            headers: signedRequest.headers,\n        })\n\n        this._handle_error('CompleteMultipartUpload', res)\n    }\n\n    /**\n     * Aborts a multipart upload.\n     *\n     * @param  {string} bucketName - The bucket name containing the object.\n     * @param  {string} objectKey - Key of the object to delete.\n     * @param  {string} uploadId - The uploadId of the multipart upload to abort.\n     * @throws  {S3ServiceError}\n     * @throws  {InvalidSignatureError}\n     */\n    async abortMultipartUpload(bucketName: string, objectKey: string, uploadId: string) {\n        const method = 'DELETE'\n\n        const bucketEndpoint = this.endpoint.copy()\n        bucketEndpoint.hostname = `${bucketName}.${this.endpoint.hostname}`\n\n        const signedRequest = this.signature.sign(\n            {\n                method: method,\n                endpoint: bucketEndpoint,\n                path: `/${objectKey}`,\n                headers: {},\n                query: {\n                    uploadId: `${uploadId}`,\n                },\n            },\n            {}\n        )\n\n        const res = await http.asyncRequest(method, signedRequest.url, signedRequest.body || null, {\n            headers: signedRequest.headers,\n        })\n        this._handle_error('AbortMultipartUpload', res)\n    }\n\n    _handle_error(operation: S3Operation, response: RefinedResponse<ResponseType | undefined>) {\n        const status: number = response.status\n        const errorCode: number = response.error_code\n        const errorMessage: string = response.error\n\n        // We consider codes 200-299 as success\n        if (status >= 200 && status < 300 && errorMessage == '' && errorCode === 0) {\n            return\n        }\n\n        // A 301 response is returned when the bucket is not found.\n        // Generally meaning that either the bucket name is wrong or the\n        // region is wrong.\n        //\n        // See: https://github.com/grafana/k6/issues/2474\n        // See: https://github.com/golang/go/issues/49281\n        if (status == 301 || (errorMessage && errorMessage.startsWith('301'))) {\n            throw new S3ServiceError('Resource not found', 'ResourceNotFound', operation)\n        }\n\n        const awsError = AWSError.parseXML(response.body as string)\n        switch (awsError.code) {\n            case 'AuthorizationHeaderMalformed':\n                throw new InvalidSignatureError(awsError.message, awsError.code)\n            default:\n                throw new S3ServiceError(awsError.message, awsError.code || 'unknown', operation)\n        }\n    }\n}\n\n/** Class representing a S3 Bucket */\nexport class S3Bucket {\n    name: string\n    creationDate: Date\n\n    /**\n     * Create an S3 Bucket\n     *\n     * @param  {string} name - S3 bucket's name\n     * @param  {Date} creationDate - S3 bucket's creation date\n     */\n    constructor(name: string, creationDate: Date) {\n        this.name = name\n        this.creationDate = creationDate\n    }\n}\n\n/** Class representing an S3 Object */\nexport class S3Object {\n    key: string\n    lastModified: number\n    etag: string\n    size: number\n    storageClass: StorageClass\n    data?: string | bytes | null\n\n    /**\n     * Create an S3 Object\n     *\n     * @param  {string} key - S3 object's key\n     * @param  {Date} lastModified - S3 object last modification date\n     * @param  {string} etag - S3 object's etag\n     * @param  {number} size - S3 object's size\n     * @param  {StorageClass} storageClass - S3 object's storage class\n     * @param  {string | bytes | null} data=null - S3 Object's data\n     */\n    constructor(\n        key: string,\n        lastModified: number,\n        etag: string,\n        size: number,\n        storageClass: StorageClass,\n        data?: string | bytes | null\n    ) {\n        this.key = key\n        this.lastModified = lastModified\n        this.etag = etag\n        this.size = size\n        this.storageClass = storageClass\n        this.data = data\n    }\n}\n\n/** Class representing a S3 Multipart Upload */\nexport class S3MultipartUpload {\n    key: string\n    uploadId: string\n\n    /**\n     * Create an S3 Multipart Upload\n     * @param  {string} key - S3 object's key\n     * @param  {string} uploadId - S3 multipart upload id\n     */\n\n    constructor(key: string, uploadId: string) {\n        this.key = key\n        this.uploadId = uploadId\n    }\n}\n\n/** Class representing a S3 Part */\nexport class S3Part {\n    partNumber: number\n    eTag: string\n\n    /**\n     * Create an S3 Part\n     * @param  {number} partNumber - Part number\n     * @param  {string} eTag - Part's etag\n     */\n\n    constructor(partNumber: number, eTag: string) {\n        this.partNumber = partNumber\n        this.eTag = eTag\n    }\n}\n\n/**\n * Error indicating a S3 operation failed\n *\n * Inspired from AWS official error types, as\n * described in:\n *   * https://aws.amazon.com/blogs/developer/service-error-handling-modular-aws-sdk-js/\n *   * https://github.com/aws/aws-sdk-js/blob/master/lib/error.d.ts\n */\nexport class S3ServiceError extends AWSError {\n    operation: string\n\n    /**\n     * Constructs a S3ServiceError\n     *\n     * @param  {string} message - human readable error message\n     * @param  {string} code - A unique short code representing the error that was emitted\n     * @param  {string} operation - Name of the failed Operation\n     */\n    constructor(message: string, code: string, operation: string) {\n        super(message, code)\n        this.name = 'S3ServiceError'\n        this.operation = operation\n    }\n}\n\n/**\n * S3Operation describes possible values for S3 API operations,\n * as defined by AWS APIs.\n */\ntype S3Operation =\n    | 'ListBuckets'\n    | 'ListObjectsV2'\n    | 'GetObject'\n    | 'PutObject'\n    | 'DeleteObject'\n    | 'CopyObject'\n    | 'CreateMultipartUpload'\n    | 'CompleteMultipartUpload'\n    | 'UploadPart'\n    | 'AbortMultipartUpload'\n\n/**\n * Describes the class of storage used to store a S3 object.\n */\ntype StorageClass =\n    | 'STANDARD'\n    | 'REDUCED_REDUNDANCY'\n    | 'GLACIER'\n    | 'STANDARD_IA'\n    | 'INTELLIGENT_TIERING'\n    | 'DEEP_ARCHIVE'\n    | 'OUTPOSTS'\n    | 'GLACIER_IR'\n    | undefined\n","import { AWSConfig } from './config'\nimport { Endpoint } from './endpoint'\nimport { HTTPHeaders } from './http'\n\n/**\n * Class allowing to build requests targeting AWS APIs\n *\n * This class is meant to be used as a base class for specific\n * services clients. See S3Client or SecretsManagerClient for\n * usage examples.\n */\nexport class AWSClient {\n    awsConfig: AWSConfig\n    serviceName: string\n\n    private _endpoint?: Endpoint\n\n    /**\n     * @param {AWSConfig} awsConfig - configuration attributes to use when interacting with AWS' APIs\n     * @param  {string} serviceName - name of the service to target.\n     * @param  {URIEncodingConfig} URIencodingConfig - configures how requests URIs should be encoded.\n     */\n    constructor(awsConfig: AWSConfig, serviceName: string) {\n        this.awsConfig = awsConfig\n        this.serviceName = serviceName\n\n        // If an endpoint is provided in the config, set it\n        // to ensure the default endpoint is not used.\n        if (awsConfig.endpoint != undefined) {\n            this._endpoint = awsConfig.endpoint\n        }\n    }\n\n    /**\n     * Represents the endpoint URL of the AWS service.\n     *\n     * If no custom endpoint is set, a default endpoint will be constructed\n     * using the service name and region provided in the AWS config.\n     *\n     * @type {Endpoint}\n     * @public\n     */\n    public get endpoint() {\n        if (this._endpoint == undefined) {\n            this._endpoint = new Endpoint(\n                `https://${this.serviceName}.${this.awsConfig.region}.amazonaws.com`\n            )\n        }\n        return this._endpoint\n    }\n  \n    // Validatiuon should be done by the type declaration \n    public set scheme(scheme: HTTPScheme) {\n      this._scheme = scheme\n  }\n\n    /**\n     * Updates the endpoint URL of the AWS service.\n     *\n     * This can be used to override the default AWS service endpoint or set a custom endpoint.\n     *\n     * @param {Endpoint} endpoint - The new endpoint to set for the AWS service.\n     * @public\n     */\n    public set endpoint(endpoint: Endpoint) {\n        this._endpoint = endpoint\n    }\n}\n\n/**\n * Type alias representing the result of an AWSClient.buildRequest call\n */\nexport interface AWSRequest {\n    url: string\n    headers: HTTPHeaders\n}\n"],"names":["__webpack_require__","module","getter","__esModule","d","a","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","Endpoint","endpoint","_classCallCheck","_defineProperty","completeUrl","startsWith","concat","DEFAULT_PROTOCOL","protocolMatch","match","hostnameWithPort","_slicedToArray","replace","split","this","_protocol","slice","_hostname","_port","parseInt","undefined","href","set","_value$split2","hostname","port","protocol","host","AWSConfig","options","region","InvalidAWSConfigError","accessKeyId","length","secretAccessKey","sessionToken","_createClass","__ENV","AWS_REGION","AWS_ACCESS_KEY_ID","AWS_SECRET_ACCESS_KEY","AWS_SESSION_TOKEN","_Error","_inherits","_super","_createSuper","message","_wrapNativeSuper","Error","require","AMZ_DATE_QUERY_PARAM","AMZ_SIGNATURE_QUERY_PARAM","AMZ_TOKEN_QUERY_PARAM","AMZ_CONTENT_SHA256_HEADER","AMZ_DATE_HEADER","toLowerCase","AMZ_SIGNATURE_HEADER","AMZ_TOKEN_HEADER","AUTHORIZATION_HEADER","GENERATED_HEADERS","HOST_HEADER","ALWAYS_UNSIGNABLE_HEADERS","authorization","connection","expect","from","pragma","referer","te","trailer","upgrade","KEY_TYPE_IDENTIFIER","SIGNING_ALGORITHM_IDENTIFIER","AWSError","code","_this","_assertThisInitialized","name","xmlDocument","doc","parseHTML","find","text","SignatureV4","_ref","service","credentials","uriEscapePath","applyChecksum","request","arguments","finalOptions","_objectSpread","signingDate","Date","unsignableHeaders","Set","signableHeaders","_formatDate","formatDate","longDate","shortDate","signingService","signingRegion","scope","constants","headers","_i","_Object$keys","keys","headerName","indexOf","ArrayBuffer","isView","body","buffer","payloadHash","computePayloadHash","soughtHeader","hasHeader","canonicalHeaders","computeCanonicalHeaders","signature","calculateSignature","deriveSigningKey","createCanonicalRequest","sort","join","url","path","query","serializeQueryParameters","originalRequest","_options$signingDate","_options$expiresIn","expiresIn","unhoistableHeaders","_formatDate2","InvalidSignatureError","moveHeadersToQuery","toString","signingKey","canonicalRequest","sortedHeaders","sortedCanonicalHeaders","map","signedHeaders","method","computeCanonicalURI","computeCanonicalQuerystring","credentialScope","hashedCanonicalRequest","crypto","stringToSign","createStringToSign","kSecret","kDate","kRegion","kService","_ref2","_step","normalizedURISegments","_iterator","_createForOfIteratorHelper","s","n","done","URISegment","pop","push","err","e","f","leading","URI","trailing","endsWith","normalizedURI","encodeURIComponent","_ref3","_step2","_ref3$query","serialized","_loop","escapeURI","Array","isArray","reduce","encoded","_iterator2","filter","_ref4","_step3","_iterator3","canonicalHeaderName","has","trim","_ref5","requestCopy","JSON","parse","stringify","_requestCopy$query","_i2","_Object$keys2","_options$unhoistableH","lowerCaseName","ignoreKeys","_step4","_loop2","includes","_iterator4","_AWSError","c","charCodeAt","toUpperCase","date","time","Number","toDate","toISOString","_regeneratorRuntime","t","r","i","iterator","asyncIterator","u","define","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","h","l","y","GeneratorFunction","GeneratorFunctionPrototype","p","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","_typeof","resolve","__await","then","callInvokeWithMethodAndArg","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","resetTryEntry","completion","reset","isNaN","displayName","isGeneratorFunction","constructor","mark","setPrototypeOf","__proto__","awrap","async","Promise","reverse","prev","charAt","stop","rval","handle","complete","finish","delegateYield","asyncGeneratorStep","gen","reject","_next","_throw","info","error","_asyncToGenerator","fn","self","args","apply","instance","Constructor","_defineProperties","target","props","descriptor","_toPropertyKey","protoProps","staticProps","subClass","superClass","_setPrototypeOf","bind","Derived","hasNativeReflectConstruct","Reflect","construct","sham","Proxy","Boolean","valueOf","_isNativeReflectConstruct","result","Super","_getPrototypeOf","NewTarget","_possibleConstructorReturn","ReferenceError","input","hint","prim","toPrimitive","res","String","_toPrimitive","S3Client","_AWSClient","_abortMultipartUpload","_completeMultipartUpload","_uploadPart","_createMultipartUpload","_copyObject","_deleteObject","_putObject","_getObject","_listObjects","_listBuckets","awsConfig","serviceName","_callee","signedRequest","buckets","_context","sign","http","_handle_error","children","each","_","bucketDefinition","bucket","child","nodeName","assign","textContent","creationDate","_callee2","bucketName","prefix","objects","_context2","objectDefinition","lastModified","etag","size","storageClass","_x","_x2","_callee3","objectKey","_res$headers$XAmzSt","_context3","S3Object","_x3","_x4","_callee4","data","_context4","Host","_x5","_x6","_x7","_callee5","_context5","_x8","_x9","_callee6","sourceBucket","sourceKey","destinationBucket","destinationKey","bucketEndpoint","_context6","copy","_x10","_x11","_x12","_x13","_callee7","_context7","uploads","S3MultipartUpload","_x14","_x15","_callee8","uploadId","partNumber","_context8","S3Part","_x16","_x17","_x18","_x19","_x20","_callee9","parts","_context9","part","eTag","_x21","_x22","_x23","_x24","_callee10","_context10","_x25","_x26","_x27","operation","response","status","errorCode","error_code","errorMessage","S3ServiceError","awsError","parseXML","AWSClient","_endpoint","scheme","_scheme","S3Bucket","_super2","_this2"],"sourceRoot":""}