{"version":3,"file":"signature.js","mappings":"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","sources":["webpack://k6-jslib-aws/webpack/bootstrap","webpack://k6-jslib-aws/webpack/runtime/compat get default export","webpack://k6-jslib-aws/webpack/runtime/define property getters","webpack://k6-jslib-aws/webpack/runtime/hasOwnProperty shorthand","webpack://k6-jslib-aws/webpack/runtime/make namespace object","webpack://k6-jslib-aws/./src/internal/constants.ts","webpack://k6-jslib-aws/./src/internal/endpoint.ts","webpack://k6-jslib-aws/./src/internal/config.ts","webpack://k6-jslib-aws/external commonjs \"k6/crypto\"","webpack://k6-jslib-aws/external commonjs \"k6/html\"","webpack://k6-jslib-aws/./src/internal/error.ts","webpack://k6-jslib-aws/./src/internal/signature.ts","webpack://k6-jslib-aws/./src/internal/http.ts","webpack://k6-jslib-aws/./src/internal/utils.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/**\n * Standard Amazon AWS query parameter names\n */\nexport const AMZ_ALGORITHM_QUERY_PARAM = 'X-Amz-Algorithm'\nexport const AMZ_CREDENTIAL_QUERY_PARAM = 'X-Amz-Credential'\nexport const AMZ_DATE_QUERY_PARAM = 'X-Amz-Date'\nexport const AMZ_EXPIRES_QUERY_PARAM = 'X-Amz-Expires'\nexport const AMZ_SIGNATURE_QUERY_PARAM = 'X-Amz-Signature'\nexport const AMZ_SIGNED_HEADERS_QUERY_PARAM = 'X-Amz-SignedHeaders'\nexport const AMZ_TARGET_QUERY_PARAM = 'X-Amz-Target'\nexport const AMZ_TOKEN_QUERY_PARAM = 'X-Amz-Security-Token'\n\n/**\n * Standard Amazon AWS header names\n */\nexport const AMZ_CONTENT_SHA256_HEADER = 'x-amz-content-sha256'\nexport const AMZ_DATE_HEADER = AMZ_DATE_QUERY_PARAM.toLowerCase()\nexport const AMZ_SIGNATURE_HEADER = AMZ_SIGNATURE_QUERY_PARAM.toLowerCase()\nexport const AMZ_TARGET_HEADER = AMZ_TARGET_QUERY_PARAM.toLowerCase()\nexport const AMZ_TOKEN_HEADER = AMZ_TOKEN_QUERY_PARAM.toLowerCase()\n\n/**\n * Common HTTP headers we rely on in the signing process\n */\nexport const AUTHORIZATION_HEADER = 'authorization'\nexport const DATE_HEADER = 'date'\n\n/**\n * Lists the headers that are generated as part of the signature process.\n */\nexport const GENERATED_HEADERS = [AUTHORIZATION_HEADER, AMZ_DATE_HEADER, DATE_HEADER]\nexport const HOST_HEADER = 'host'\n\n/**\n * Lists the headers that should never be included in the\n * request signature signature process.\n */\nexport const ALWAYS_UNSIGNABLE_HEADERS = {\n    authorization: true,\n    'cache-control': true,\n    connection: true,\n    expect: true,\n    from: true,\n    'keep-alive': true,\n    'max-forwards': true,\n    pragma: true,\n    referer: true,\n    te: true,\n    trailer: true,\n    'transfer-encoding': true,\n    upgrade: true,\n    'user-agent': true,\n    'x-amzn-trace-id': true,\n}\n\n/**\n * Signature specific constants included in the signing process\n */\nexport const KEY_TYPE_IDENTIFIER = 'aws4_request'\nexport const SIGNING_ALGORITHM_IDENTIFIER = 'AWS4-HMAC-SHA256'\n\n/**\n * Maximum time to live of a signed request in seconds: 7 days.\n */\nexport const MAX_PRESIGNED_TTL = 60 * 60 * 24 * 7\n\n/**\n * SHA256 hash of an empty string (so we don't waste cycles recomputing it)\n */\nexport const EMPTY_SHA256 = 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\n\n/**\n * SHA256 hash of the unsigned payload constant (so we don't waste cycles recomputing it)\n */\nexport const UNSIGNED_PAYLOAD_SHA256 =\n    '5a41b0751e4537c6ff868564ab44a4d4ecceec2ec5b1c5f74d97422968e04237'\n\nexport const UNSIGNED_PAYLOAD = 'UNSIGNED-PAYLOAD'\n","/**\n * Represents an AWS service endpoint, providing utilities for parsing and handling URL details.\n */\nexport class Endpoint {\n    private _protocol: string\n    private _hostname: string\n    private _port?: number\n\n    // Default protocol, this can be globally changed as per application requirements\n    private static readonly DEFAULT_PROTOCOL = 'https' // Set this as per AWS.config\n\n    /**\n    //  * Constructs a new Endpoint instance.\n     *\n     * @param {string} endpoint - The URL to construct an endpoint from. If the URL omits a protocol, the default protocol will be used.\n     */\n    constructor(endpoint: string) {\n        const isDefaultProtocol =\n            !endpoint.startsWith('http://') && !endpoint.startsWith('https://')\n        const completeUrl = isDefaultProtocol\n            ? `${Endpoint.DEFAULT_PROTOCOL}://${endpoint}`\n            : endpoint\n\n        const protocolMatch = completeUrl.match(/^https?:/)\n        const hostAndPath = completeUrl.replace(/^https?:\\/\\//, '')\n        const [hostnameWithPort] = hostAndPath.split('/')\n\n        this._protocol = protocolMatch ? protocolMatch[0].slice(0, -1) : Endpoint.DEFAULT_PROTOCOL\n        this._hostname = hostnameWithPort.split(':')[0]\n        this._port = hostnameWithPort.split(':')[1]\n            ? parseInt(hostnameWithPort.split(':')[1])\n            : undefined\n    }\n\n    /**\n     * Creates a new Endpoint instance that is a copy of the current one.\n     *\n     * @returns {Endpoint} The copied Endpoint.\n     */\n    public copy(): Endpoint {\n        return new Endpoint(this.href)\n    }\n\n    /**\n     * Gets the host portion of the endpoint including the port.\n     *\n     * @returns {string} The host portion of the endpoint including the port.\n     */\n    public get host(): string {\n        return this._port ? `${this._hostname}:${this._port}` : this._hostname\n    }\n\n    /**\n     * Sets the host portion of the endpoint including the port.\n     *\n     * @param {string} value - The value to set for the host.\n     */\n    public set host(value: string) {\n        const [hostname, port] = value.split(':')\n        this._hostname = hostname\n        this._port = port ? parseInt(port) : undefined\n    }\n\n    /**\n     * Gets the host portion of the endpoint without the port.\n     *\n     * @returns {string} The host portion of the endpoint.\n     */\n    public get hostname(): string {\n        return this._hostname\n    }\n\n    /**\n     * Sets the host portion of the endpoint without the port.\n     *\n     * @param {string} value - The value to set for the hostname.\n     */\n    public set hostname(value: string) {\n        this._hostname = value\n    }\n\n    /**\n     * Gets the full URL of the endpoint.\n     *\n     * @returns {string} The full URL of the endpoint.\n     */\n    public get href(): string {\n        return `${this.protocol}://${this.host}`\n    }\n\n    /**\n     * Sets the full URL of the endpoint.\n     *\n     * @param {string} value - The value to set for the full URL.\n     */\n    public set href(value: string) {\n        const protocolMatch = value.match(/^https?:/)\n        const withoutProtocol = value.replace(/^https?:\\/\\//, '')\n        const [hostnameWithPort] = withoutProtocol.split('/')\n\n        this._protocol = protocolMatch ? protocolMatch[0].slice(0, -1) : Endpoint.DEFAULT_PROTOCOL // remove the trailing colon\n        this._hostname = hostnameWithPort.split(':')[0]\n        this._port = hostnameWithPort.split(':')[1]\n            ? parseInt(hostnameWithPort.split(':')[1])\n            : undefined\n    }\n\n    /**\n     * Gets the port of the endpoint.\n     *\n     * @returns {number|undefined} The port of the endpoint.\n     */\n    public get port(): number | undefined {\n        return this._port\n    }\n\n    /**\n     * Sets the port of the endpoint.\n     *\n     * @param {number|undefined} value - The value to set for the port.\n     */\n    public set port(value: number | undefined) {\n        this._port = value\n    }\n\n    /**\n     * Gets the protocol (http or https) of the endpoint URL.\n     *\n     * @returns {string} The protocol of the endpoint URL.\n     */\n    public get protocol(): string {\n        return this._protocol\n    }\n\n    /**\n     * Sets the protocol (http or https) of the endpoint URL.\n     *\n     * @param {string} value - The value to set for the protocol.\n     */\n    public set protocol(value: string) {\n        this._protocol = value\n    }\n}\n","import { HTTPScheme } from './http'\nimport { Endpoint } from './endpoint'\n\n/** Class holding an AWS connection information */\nexport class AWSConfig {\n    /**\n     * The AWS region to connect to, as listed: https://docs.aws.amazon.com/general/latest/gr/rande.html\n     *\n     * @type {string}\n     */\n    region: string\n\n    /**\n     * Your user's AWS access key id credential.\n     *\n     * @type {string}\n     */\n    accessKeyId: string\n\n    /**\n     * Your user's AWS secret access key credential.\n     *\n     * @type {string}\n     */\n    secretAccessKey: string\n\n    /**\n     * Your user's AWS session token credential.\n     *\n     * @type {string}\n     */\n    sessionToken?: string\n\n    /**\n     * The AWS hostname to connect to.\n     *\n     * @type {string} ['amazonaws.com']\n     */\n    endpoint?: Endpoint\n\n    /**\n     * fromEnvironment creates an AWSConfig from the environment variables.\n     *\n     * It expects to find the following compulsory environment variables:\n     *  * AWS_REGION\n     *  * AWS_ACCESS_KEY_ID\n     *  * AWS_SECRET_ACCESS_KEY\n     *\n     * If set, the following optional environment variables are also used:\n     *  * AWS_SESSION_TOKEN\n     *\n     * Finally, the options parameter allows to explicitly set the scheme and endpoint\n     * to use when connecting to AWS.\n     *\n     * @param options {AWSConnectionOptions}\n     * @returns\n     */\n    static fromEnvironment(options?: AWSConnectionOptions): AWSConfig {\n        const region = __ENV.AWS_REGION\n        const accessKeyId = __ENV.AWS_ACCESS_KEY_ID\n        const secretAccessKey = __ENV.AWS_SECRET_ACCESS_KEY\n        const sessionToken: string | undefined = __ENV.AWS_SESSION_TOKEN\n        const endpoint: Endpoint | string | undefined = options?.endpoint\n\n        return new AWSConfig({\n            region,\n            accessKeyId,\n            secretAccessKey,\n            sessionToken,\n            endpoint: endpoint,\n        })\n    }\n\n    /**\n     * Create an AWSConfig.\n     *\n     * @param {AWSConfigOptions} options - configuration attributes to use when interacting with AWS' APIs\n     * @throws {InvalidArgumentException}\n     */\n    constructor(options: AWSConfigOptions) {\n        if (!options.region || options.region === '') {\n            throw new InvalidAWSConfigError(\n                `invalid AWS region; reason: expected a valid AWS region name (e.g. \"us-east-1\"), got \\`${options.region}\\``\n            )\n        }\n\n        if (!options.accessKeyId || options.accessKeyId === '') {\n            throw new InvalidAWSConfigError(\n                `invalid AWS access key ID; reason: expected a non empty string, got \\`${options.accessKeyId}\\``\n            )\n        }\n\n        if (options.accessKeyId.length < 16 || options.accessKeyId.length > 128) {\n            throw new InvalidAWSConfigError(\n                `invalid AWS access key ID; reason: size should be between 16 and 128 characters, got ${options.accessKeyId.length}`\n            )\n        }\n\n        if (!options.secretAccessKey || options.secretAccessKey === '') {\n            throw new InvalidAWSConfigError(\n                `invalid AWS secret access key; reason: expected a non empty string, got \\`${options.secretAccessKey}\\``\n            )\n        }\n\n        if (options.secretAccessKey.length < 16 || options.secretAccessKey.length > 128) {\n            throw new InvalidAWSConfigError(\n                `invalid AWS secret access key; reason: size should be between 16 and 128 characters, got ${options.secretAccessKey.length}`\n            )\n        }\n\n        this.region = options.region\n        this.accessKeyId = options.accessKeyId\n        this.secretAccessKey = options.secretAccessKey\n\n        if (options.sessionToken !== undefined) {\n            this.sessionToken = options.sessionToken\n        }\n\n        if (options.endpoint !== undefined) {\n            if (typeof options.endpoint === 'string') {\n                this.endpoint = new Endpoint(options.endpoint)\n            } else {\n                this.endpoint = options.endpoint\n            }\n        }\n    }\n}\n\n/**\n * Interface representing AWSConfig options\n */\nexport interface AWSConfigOptions extends AWSConnectionOptions {\n    /**\n     * The AWS region to connect to, as listed: https://docs.aws.amazon.com/general/latest/gr/rande.html\n     *\n     * @type {string}\n     */\n    region: string\n\n    /**\n     * Your user's AWS access key id credential.\n     *\n     * @type {string}\n     */\n    accessKeyId: string\n\n    /**\n     * Your user's AWS secret access key credential.\n     *\n     * @type {string}\n     */\n    secretAccessKey: string\n\n    /**\n     * Your user's AWS session token credential.\n     *\n     * @type {string}\n     */\n    sessionToken?: string\n}\n\n/**\n * Interface representing AWS connection options\n */\nexport interface AWSConnectionOptions {\n    /**\n     * The HTTP scheme to use when connecting to AWS.\n     *\n     * @type {HTTPScheme}\n     */\n    scheme?: HTTPScheme\n\n    /**\n     * The AWS hostname to connect to.\n     *\n     * @type {string}\n     */\n    endpoint?: Endpoint | string\n}\n\n/** Class representing an invalid AWS configuration */\nexport class InvalidAWSConfigError extends Error {\n    constructor(message: string) {\n        super(message)\n    }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"k6/crypto\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"k6/html\");","import { parseHTML } from 'k6/html'\n\n/**\n * Base class to derive errors from\n *\n * Inspired from AWS official error types, as\n * described in:\n *   * https://aws.amazon.com/blogs/developer/service-error-handling-modular-aws-sdk-js/\n *   * https://github.com/aws/aws-sdk-js/blob/master/lib/error.d.ts\n */\nexport class AWSError extends Error {\n    /**\n     * Error code issued by the service (if any)\n     */\n    code?: string\n\n    /**\n     * Create an AWSError\n     *\n     * @param {string} message - A longer human readable error message.\n     * @param {string?} code - A unique short code representing the error that was emitted\n     */\n    constructor(message: string, code?: string) {\n        super(message)\n        this.name = 'AWSError'\n        this.code = code\n    }\n\n    /**\n     * Parse an AWSError from an XML document\n     *\n     * @param  {string} xmlDocument - Serialized XML document to parse the error from\n     */\n    static parseXML(xmlDocument: string): AWSError {\n        const doc = parseHTML(xmlDocument)\n        return new AWSError(doc.find('Message').text(), doc.find('Code').text())\n    }\n}\n","import crypto from 'k6/crypto'\n\nimport * as constants from './constants'\nimport { AWSError } from './error'\nimport { hasHeader, HTTPHeaderBag, HTTPRequest, QueryParameterBag, SignedHTTPRequest } from './http'\nimport { isArrayBuffer } from './utils'\n\n/**\n * SignatureV4 can be used to sign HTTP requests and presign URLs using the AWS Signature\n * Version 4 signing process.\n *\n * It offers two signing methods:\n * - sign: signs the request headers and payload\n * - presign: returns a presigned (authorization information contained in the query string) URL\n *\n * @see https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html\n */\nexport class SignatureV4 {\n    /**\n     * The name of the service to sign for.\n     */\n    private readonly service: string\n\n    /**\n     * The name of the region to sign for.\n     */\n    private readonly region: string\n\n    /**\n     * The credentials with which the request should be signed.\n     */\n    private readonly credentials: Credentials\n\n    /**\n     * Whether to uri-escape the request URI path as part of computing the\n     * canonical request string. This is required for every AWS service, except\n     * Amazon S3, as of late 2017.\n     *\n     * @default [true]\n     */\n    private readonly uriEscapePath: boolean\n\n    /**\n     * Whether to calculate a checksum of the request body and include it as\n     * either a request header (when signing) or as a query string parameter\n     * (when presigning). This is required for AWS Glacier and Amazon S3 and optional for\n     * every other AWS service as of late 2017.\n     *\n     * @default [true]\n     */\n    private readonly applyChecksum: boolean\n\n    // TODO: uriEscapePath and applyChecksum should not be present in the constructor\n    constructor({\n        service,\n        region,\n        credentials,\n        uriEscapePath,\n        applyChecksum,\n    }: SignatureV4Options) {\n        this.service = service\n        this.region = region\n        this.credentials = credentials\n        this.uriEscapePath = typeof uriEscapePath === 'boolean' ? uriEscapePath : true\n        this.applyChecksum = typeof applyChecksum === 'boolean' ? applyChecksum : true\n    }\n\n    /**\n     * Includes AWS v4 signing information to the provided HTTP request.\n     *\n     * This method adds an Authorization header to the request, containing\n     * the signature and other signing information. It also returns a preformatted\n     * URL that can be used to make the k6 http request.\n     *\n     * This method mutates the request object.\n     *\n     * @param request {HTTPRequest} The request to sign.\n     * @param options {Partial<RequestSigningOptions>} Options for signing the request.\n     * @returns {SignedHTTPRequest} The signed request.\n     */\n    sign(request: HTTPRequest, options: Partial<RequestSigningOptions> = {}): SignedHTTPRequest {\n        // Set default values for options which are not provided by the user.\n        const defaultOptions = {\n            signingDate: new Date(),\n            unsignableHeaders: new Set<string>(),\n            signableHeaders: new Set<string>(),\n        }\n\n        // Merge default options with the ones maybe provided by the user.\n        const finalOptions = { ...defaultOptions, ...options }\n\n        const { longDate, shortDate }: DateInfo = formatDate(finalOptions.signingDate)\n        const service = finalOptions.signingService || this.service\n        const region = finalOptions.signingRegion || this.region\n        const scope = `${shortDate}/${region}/${service}/${constants.KEY_TYPE_IDENTIFIER}`\n\n        // Required by the specification:\n        //   \"For HTTP/1.1 requests, you must include the host header at a minimum.\n        //   Standard headers like content-type are optional.\n        //   For HTTP/2 requests, you must include the :authority header instead of\n        //   the host header. Different services might require other headers.\"\n        request.headers[constants.HOST_HEADER] = request.endpoint.hostname\n\n        // Filter out headers that will be generated and managed by the signing process.\n        // If the user provide any of those as part of the HTTPRequest's headers, they\n        // will be ignored.\n        for (const headerName of Object.keys(request.headers)) {\n            if (constants.GENERATED_HEADERS.indexOf(headerName.toLowerCase()) > -1) {\n                delete request.headers[headerName]\n            }\n        }\n\n        request.headers[constants.AMZ_DATE_HEADER] = longDate\n        if (this.credentials.sessionToken) {\n            request.headers[constants.AMZ_TOKEN_HEADER] = this.credentials.sessionToken\n        }\n\n        // If the request body is a typed array, we need to convert it to a buffer\n        // so that we can calculate the checksum.\n        if (ArrayBuffer.isView(request.body)) {\n            request.body = request.body.buffer\n        }\n\n        // Ensure we avoid passing undefined to the crypto hash function.\n        if (!request.body) {\n            request.body = ''\n        }\n\n        let payloadHash = this.computePayloadHash(request)\n        if (\n            !hasHeader(constants.AMZ_CONTENT_SHA256_HEADER, request.headers) &&\n            this.applyChecksum\n        ) {\n            request.headers[constants.AMZ_CONTENT_SHA256_HEADER] = payloadHash\n        }\n\n        const canonicalHeaders = this.computeCanonicalHeaders(\n            request,\n            finalOptions.unsignableHeaders,\n            finalOptions.signableHeaders\n        )\n        const signature = this.calculateSignature(\n            longDate,\n            scope,\n            this.deriveSigningKey(this.credentials, service, region, shortDate),\n            this.createCanonicalRequest(request, canonicalHeaders, payloadHash)\n        )\n\n        /**\n         * Step 4 of the signing process: add the signature to the HTTP request's headers.\n         *\n         * @see https://docs.aws.amazon.com/general/latest/gr/sigv4-add-signature-to-request.html\n         */\n        request.headers[constants.AUTHORIZATION_HEADER] =\n            `${constants.SIGNING_ALGORITHM_IDENTIFIER} ` +\n            `Credential=${this.credentials.accessKeyId}/${scope}, ` +\n            `SignedHeaders=${Object.keys(canonicalHeaders).sort().join(';')}, ` +\n            `Signature=${signature}`\n\n        // If a request path was provided, add it to the URL\n        let url = request.endpoint.href\n        if (request.path) {\n            url += request.path\n        }\n\n        // If a request query string was provided, add it to the URL\n        if (request.query) {\n            // We exclude the signature from the query string\n            url += `?${this.serializeQueryParameters(request.query)}`\n        }\n\n        return {\n            url: url,\n            ...request,\n        }\n    }\n\n    /**\n     * Produces a presigned URL with AWS v4 signature information for the provided HTTP request.\n     *\n     * A presigned URL is a URL that contains the authorization information\n     * (signature and other signing information) in the query string. This method\n     * returns a preformatted URL that can be used to make the k6 http request.\n     *\n     * @param originalRequest - The original request to presign.\n     * @param options - Options controlling the signing of the request.\n     * @returns A signed request, including the presigned URL.\n     */\n    presign(originalRequest: HTTPRequest, options: PresignOptions = {}): SignedHTTPRequest {\n        const {\n            signingDate = new Date(),\n            expiresIn = 3600,\n            unsignableHeaders,\n            unhoistableHeaders,\n            signableHeaders,\n            signingRegion,\n            signingService,\n        } = options\n        const { longDate, shortDate }: DateInfo = formatDate(signingDate)\n        const region = signingRegion || this.region\n        const service = signingService || this.service\n\n        if (expiresIn > constants.MAX_PRESIGNED_TTL) {\n            throw new InvalidSignatureError(\n                \"Signature version 4 presigned URLs can't be valid for more than 7 days\"\n            )\n        }\n\n        const scope = `${shortDate}/${region}/${service}/${constants.KEY_TYPE_IDENTIFIER}`\n        const request = this.moveHeadersToQuery(originalRequest, { unhoistableHeaders })\n\n        // Required by the specification:\n        //   \"For HTTP/1.1 requests, you must include the host header at a minimum.\n        //   Standard headers like content-type are optional.\n        //   For HTTP/2 requests, you must include the :authority header instead of\n        //   the host header. Different services might require other headers.\"\n        request.headers[constants.HOST_HEADER] = originalRequest.endpoint.hostname\n\n        // If the user provided a session token, include it in the signed url query string.\n        if (this.credentials.sessionToken) {\n            request.query[constants.AMZ_TOKEN_QUERY_PARAM] = this.credentials.sessionToken\n        }\n\n        // Add base signing query parameters to the request, as described in the documentation\n        // @see https://docs.aws.amazon.com/general/latest/gr/sigv4-add-signature-to-request.html\n        request.query[constants.AMZ_ALGORITHM_QUERY_PARAM] = constants.SIGNING_ALGORITHM_IDENTIFIER\n        request.query[\n            constants.AMZ_CREDENTIAL_QUERY_PARAM\n        ] = `${this.credentials.accessKeyId}/${scope}`\n        request.query[constants.AMZ_DATE_QUERY_PARAM] = longDate\n        request.query[constants.AMZ_EXPIRES_QUERY_PARAM] = expiresIn.toString(10)\n\n        const canonicalHeaders = this.computeCanonicalHeaders(\n            request,\n            unsignableHeaders,\n            signableHeaders\n        )\n        request.query[constants.AMZ_SIGNED_HEADERS_QUERY_PARAM] = Object.keys(canonicalHeaders)\n            .sort()\n            .join(';')\n\n        const signingKey = this.deriveSigningKey(this.credentials, service, region, shortDate)\n\n        // Computing the payload from the original request. This is required\n        // in the event the user attempts to produce a presigned URL for s3,\n        // which requires the payload hash to be 'UNSIGNED-PAYLOAD'.\n        //\n        // To that effect, users need to set the 'x-amz-content-sha256' header,\n        // and mark it as unhoistable and unsignable. When setup this way,\n        // the computePayloadHash method will then return the string 'UNSIGNED-PAYLOAD'.\n        const payloadHash = this.computePayloadHash(originalRequest)\n        const canonicalRequest = this.createCanonicalRequest(request, canonicalHeaders, payloadHash)\n\n        request.query[constants.AMZ_SIGNATURE_QUERY_PARAM] = this.calculateSignature(\n            longDate,\n            scope,\n            signingKey,\n            canonicalRequest\n        )\n\n        // If a request path was provided, add it to the URL\n        let url = request.endpoint.href\n        if (request.path) {\n            url += request.path\n        }\n\n        // If a request query string was provided, add it to the URL\n        if (request.query) {\n            url += `?${this.serializeQueryParameters(request.query)}`\n        }\n\n        return { url: url, ...request }\n    }\n\n    /**\n     * Create a string including information from your request\n     * in a AWS signature v4 standardized (canonical) format.\n     *\n     * Step 1 of the signing process: create the canonical request string.\n     * @see https://docs.aws.amazon.com/general/latest/gr/sigv4-create-canonical-request.html\n     *\n     * @param request {HTTPRequest} The request to sign.\n     * @param canonicalHeaders {HTTPHeaderBag} The request's canonical headers.\n     * @param payloadHash {string} The hexadecimally encoded request's payload hash .\n     * @returns {string} The canonical request string.\n     */\n    private createCanonicalRequest(\n        request: HTTPRequest,\n        canonicalHeaders: HTTPHeaderBag,\n        payloadHash: string\n    ): string {\n        const sortedHeaders = Object.keys(canonicalHeaders).sort()\n        const sortedCanonicalHeaders = sortedHeaders\n            .map((name) => `${name}:${canonicalHeaders[name]}`)\n            .join('\\n')\n        const signedHeaders = sortedHeaders.join(';')\n\n        return (\n            `${request.method}\\n` +\n            `${this.computeCanonicalURI(request)}\\n` +\n            `${this.computeCanonicalQuerystring(request)}\\n` +\n            `${sortedCanonicalHeaders}\\n\\n` +\n            `${signedHeaders}\\n` +\n            `${payloadHash}`\n        )\n    }\n\n    /**\n     * Create the \"string to sign\" part of the signature Version 4 protocol.\n     *\n     * The \"string to sign\" includes meta information about your request and\n     * about the canonical request that you created with `createCanonicalRequest`.\n     * It is used hand in hand with the signing key to create the request signature.\n     * Step 2 of the signing process: create the string to sign.\n     * @see https://docs.aws.amazon.com/general/latest/gr/sigv4-create-string-to-sign.html\n     *\n     * @param longDate {string} The request's date in iso 8601 format.\n     * @param credentialScope {string} The request's credential scope.\n     * @param canonicalRequest {string} The request's canonical request.\n     * @returns {string} The \"string to sign\".\n     */\n    private createStringToSign(\n        longDate: string,\n        credentialScope: string,\n        canonicalRequest: string\n    ): string {\n        const hashedCanonicalRequest = crypto.sha256(canonicalRequest, 'hex')\n\n        return (\n            `${constants.SIGNING_ALGORITHM_IDENTIFIER}\\n` +\n            `${longDate}\\n` +\n            `${credentialScope}\\n` +\n            `${hashedCanonicalRequest}`\n        )\n    }\n\n    /**\n     * Calculte the signature for AWS signature version 4.\n     *\n     * Step 3 of the signing process: create the signature.\n     * @see https://docs.aws.amazon.com/general/latest/gr/sigv4-calculate-signature.html\n     *\n     * @param longDate {string} The request's date in iso 8601 format.\n     * @param credentialScope {string} The request's credential scope.\n     * @param signingKey {string} the signing key as computed by the deriveSigningKey method.\n     * @param canonicalRequest {string} The request's canonical request.\n     * @returns {string} The signature.\n     */\n    private calculateSignature(\n        longDate: string,\n        credentialScope: string,\n        signingKey: Uint8Array,\n        canonicalRequest: string\n    ): string {\n        const stringToSign = this.createStringToSign(longDate, credentialScope, canonicalRequest)\n        return crypto.hmac('sha256', signingKey, stringToSign, 'hex')\n    }\n\n    /**\n     * Derives the signing key for authenticating requests signed with\n     * the Signature version 4 authentication protocol.\n     *\n     * deriveSigningKey produces a signing key by creating a series of\n     * hash-based message authentication codes (HMACs) represented in\n     * a binary format.\n     *\n     * The derived signing key is specific to the date it's made at, as well as\n     * the service and region it targets.\n     *\n     * @param credentials {AWSCredentials} The credentials to use for signing.\n     * @param service {string} The service the request is targeted at.\n     * @param region {string} The region the request is targeted at.\n     * @param shortDate {string} The request's date in YYYYMMDD format.\n     * @returns {Uint8Array} The derived signing key.\n     */\n    private deriveSigningKey(\n        credentials: Credentials,\n        service: string,\n        region: string,\n        shortDate: string\n    ): Uint8Array {\n        const kSecret: string = credentials.secretAccessKey\n        const kDate: any = crypto.hmac('sha256', 'AWS4' + kSecret, shortDate, 'binary')\n        const kRegion: any = crypto.hmac('sha256', kDate, region, 'binary')\n        const kService: any = crypto.hmac('sha256', kRegion, service, 'binary')\n        const kSigning: any = crypto.hmac('sha256', kService, 'aws4_request', 'binary')\n\n        return kSigning\n    }\n\n    /**\n     * Create a string that includes information from your request\n     * in a AWS signature v4 standardized (canonical) format.\n     *\n     * @param param0 {HTTPRequest} The request to sign.\n     * @returns {string} The canonical URI.\n     */\n    private computeCanonicalURI({ path }: HTTPRequest): string {\n        if (this.uriEscapePath) {\n            // Non-S3 services, we normalize the path and then double URI encode it.\n            // Ref: \"Remove Dot Segments\" https://datatracker.ietf.org/doc/html/rfc3986#section-5.2.4\n            const normalizedURISegments = []\n\n            for (const URISegment of path.split('/')) {\n                if (URISegment?.length === 0) {\n                    continue\n                }\n\n                if (URISegment === '.') {\n                    continue\n                }\n\n                if (URISegment === '..') {\n                    normalizedURISegments.pop()\n                } else {\n                    normalizedURISegments.push(URISegment)\n                }\n            }\n\n            // Normalize the URI\n            const leading = path?.startsWith('/') ? '/' : ''\n            const URI = normalizedURISegments.join('/')\n            const trailing = normalizedURISegments.length > 0 && path?.endsWith('/') ? '/' : ''\n            const normalizedURI = `${leading}${URI}${trailing}`\n\n            const doubleEncoded = encodeURIComponent(normalizedURI)\n\n            return doubleEncoded.replace(/%2F/g, '/')\n        }\n\n        // For S3, we shouldn't normalize the path. For example, object name\n        // my-object//example//photo.user should not be normalized to\n        // my-object/example/photo.user\n        return path\n    }\n\n    /**\n     * Serializes the request's query parameters into their canonical\n     * string version. If the request does not include a query parameters,\n     * returns an empty string.\n     *\n     * @param param0 {HTTPRequest} The request containing the query parameters.\n     * @returns {string} The canonical query string.\n     */\n    private computeCanonicalQuerystring({ query = {} }: HTTPRequest): string {\n        const keys: Array<string> = []\n        const serialized: Record<string, string> = {}\n\n        for (const key of Object.keys(query).sort()) {\n            if (key.toLowerCase() === constants.AMZ_SIGNATURE_HEADER) {\n                continue\n            }\n\n            keys.push(key)\n            const value = query[key]\n\n            if (typeof value === 'string') {\n                serialized[key] = `${escapeURI(key)}=${escapeURI(value)}`\n            } else if (Array.isArray(value)) {\n                serialized[key] = value\n                    .slice(0)\n                    .sort()\n                    .reduce(\n                        (encoded: Array<string>, value: string) =>\n                            encoded.concat([`${escapeURI(key)}=${escapeURI(value)}`]),\n                        []\n                    )\n                    .join('&')\n            }\n        }\n\n        return keys\n            .map((key) => serialized[key])\n            .filter((serialized) => serialized)\n            .join('&')\n    }\n\n    /**\n     * Create the canonical form of the request's headers.\n     * Canonical headers consist of all the HTTP headers you\n     * are including with the signed request.\n     *\n     * @param param0 {HTTPRequest} The request to compute the canonical headers of.\n     * @param unsignableHeaders {Set<string>} The headers that should not be signed.\n     * @param signableHeaders {Set<string>} The headers that should be signed.\n     * @returns {string} The canonical headers.\n     */\n    private computeCanonicalHeaders(\n        { headers }: HTTPRequest,\n        unsignableHeaders?: Set<string>,\n        signableHeaders?: Set<string>\n    ): HTTPHeaderBag {\n        const canonicalHeaders: HTTPHeaderBag = {}\n\n        for (const headerName of Object.keys(headers).sort()) {\n            if (headers[headerName] == undefined) {\n                continue\n            }\n\n            const canonicalHeaderName = headerName.toLowerCase()\n            if (\n                canonicalHeaderName in constants.ALWAYS_UNSIGNABLE_HEADERS ||\n                unsignableHeaders?.has(canonicalHeaderName)\n            ) {\n                if (\n                    !signableHeaders ||\n                    (signableHeaders && !signableHeaders.has(canonicalHeaderName))\n                ) {\n                    continue\n                }\n            }\n\n            canonicalHeaders[canonicalHeaderName] = headers[headerName].trim().replace(/\\s+/g, ' ')\n        }\n\n        return canonicalHeaders\n    }\n\n    /**\n     * Computes the SHA256 cryptographic hash of the request's body.\n     *\n     * If the headers contain the 'X-Amz-Content-Sha256' header, then\n     * the value of that header is returned instead. This proves useful\n     * when, for example, presiging a URL for S3, as the payload hash\n     * must always be equal to 'UNSIGNED-PAYLOAD'.\n     *\n     * @param param0 {HTTPRequest} The request to compute the payload hash of.\n     * @returns {string} The hex encoded SHA256 payload hash, or the value of the 'X-Amz-Content-Sha256' header.\n     */\n    private computePayloadHash({ headers, body }: HTTPRequest): string {\n        // for (const headerName of Object.keys(headers)) {\n        //     // If the header is present, return its value.\n        //     // So that we let the 'UNSIGNED-PAYLOAD' value pass through.\n        //     if (headerName.toLowerCase() === constants.AMZ_CONTENT_SHA256_HEADER) {\n        //         return headers[headerName]\n        //     }\n        // }\n\n        if (headers[constants.AMZ_CONTENT_SHA256_HEADER]) {\n            return headers[constants.AMZ_CONTENT_SHA256_HEADER]\n        }\n\n        if (body == undefined) {\n            return constants.EMPTY_SHA256\n        }\n\n        if (typeof body === 'string' || isArrayBuffer(body)) {\n            return crypto.sha256(body, 'hex').toLowerCase()\n        }\n\n        if (ArrayBuffer.isView(body)) {\n            // If the request body is a typed array, we need to convert it to a buffer\n            // so that we can calculate the checksum.\n            return crypto.sha256((body as DataView).buffer, 'hex').toLowerCase()\n        }\n\n        return constants.UNSIGNED_PAYLOAD\n    }\n\n    /**\n     * Moves a request's headers to its query parameters.\n     *\n     * The operation will ignore any amazon standard headers, prefixed\n     * with 'X-Amz-'. It will also ignore any headers specified as unhoistable\n     * by the options.\n     *\n     * The operation will delete the headers from the request.\n     *\n     * @param request {HTTPRequest} The request to move the headers from.\n     * @param options\n     * @returns {HTTPRequest} The request with the headers moved to the query parameters.\n     */\n    private moveHeadersToQuery(\n        request: HTTPRequest,\n        options: { unhoistableHeaders?: Set<string> } = {}\n    ): HTTPRequest & { query: QueryParameterBag } {\n        const requestCopy = JSON.parse(JSON.stringify(request))\n        const { headers, query = {} as QueryParameterBag } = requestCopy\n\n        for (const name of Object.keys(headers)) {\n            const lowerCaseName = name.toLowerCase()\n            if (\n                lowerCaseName.slice(0, 6) === 'x-amz-' &&\n                !options.unhoistableHeaders?.has(lowerCaseName)\n            ) {\n                query[name] = headers[name]\n                delete headers[name]\n            }\n        }\n\n        return {\n            ...requestCopy,\n            headers,\n            query,\n        }\n    }\n\n    /**\n     * Serializes a HTTPRequest's query parameter bag into a string.\n     *\n     * @param query {QueryParameterBag} The query parameters to serialize.\n     * @param ignoreKeys {Set<string>} The keys to ignore.\n     * @returns {string} The serialized, and ready to use in a URL, query parameters.\n     */\n    private serializeQueryParameters(query: QueryParameterBag, ignoreKeys?: string[]): string {\n        const keys: Array<string> = []\n        const serialized: Record<string, string> = {}\n\n        for (const key of Object.keys(query).sort()) {\n            if (ignoreKeys?.includes(key.toLowerCase())) {\n                continue\n            }\n\n            keys.push(key)\n            const value = query[key]\n\n            if (typeof value === 'string') {\n                serialized[key] = `${escapeURI(key)}=${escapeURI(value)}`\n            } else if (Array.isArray(value)) {\n                serialized[key] = value\n                    .slice(0)\n                    .sort()\n                    .reduce(\n                        (encoded: Array<string>, value: string) =>\n                            encoded.concat([`${escapeURI(key)}=${escapeURI(value)}`]),\n                        []\n                    )\n                    .join('&')\n            }\n        }\n\n        return keys\n            .map((key) => serialized[key])\n            .filter((serialized) => serialized)\n            .join('&')\n    }\n}\n\n/**\n * Error indicating an Invalid signature has been sent to AWS services\n *\n * Inspired from AWS official error types, as\n * described in:\n *   * https://aws.amazon.com/blogs/developer/service-error-handling-modular-aws-sdk-js/\n *   * https://github.com/aws/aws-sdk-js/blob/master/lib/error.d.ts\n */\nexport class InvalidSignatureError extends AWSError {\n    /**\n     * Constructs an InvalidSignatureError\n     *\n     * @param  {string} message - human readable error message\n     */\n    constructor(message: string, code?: string) {\n        super(message, code)\n        this.name = 'InvalidSignatureError'\n    }\n}\n\nexport interface SignatureV4Options {\n    /**\n     * The name of the service to sign for.\n     */\n    service: string\n\n    /**\n     * The name of the region to sign for.\n     */\n    region: string\n\n    /**\n     * The credentials with which the request should be signed.\n     */\n    credentials: Credentials\n\n    /**\n     * Whether to uri-escape the request URI path as part of computing the\n     * canonical request string. This is required for every AWS service, except\n     * Amazon S3, as of late 2017.\n     *\n     * @default [true]\n     */\n    uriEscapePath?: boolean\n\n    /**\n     * Whether to calculate a checksum of the request body and include it as\n     * either a request header (when signing) or as a query string parameter\n     * (when presigning). This is required for AWS Glacier and Amazon S3 and optional for\n     * every other AWS service as of late 2017.\n     *\n     * @default [true]\n     */\n    applyChecksum?: boolean\n}\n\nexport interface SignOptions {\n    /**\n     * The date and time to be used as signature metadata. This value should be\n     * a Date object, a unix (epoch) timestamp, or a string that can be\n     * understood by the JavaScript `Date` constructor.If not supplied, the\n     * value returned by `new Date()` will be used.\n     */\n    signingDate?: Date\n\n    /**\n     * The service signing name. It will override the service name of the signer\n     * in current invocation\n     */\n    signingService?: string\n\n    /**\n     * The region name to sign the request. It will override the signing region of the\n     * signer in current invocation\n     */\n    signingRegion?: string\n}\n\nexport interface RequestSigningOptions extends SignOptions {\n    /**\n     * A set of strings whose members represents headers that cannot be signed.\n     * All headers in the provided request will have their names converted to\n     * lower case and then checked for existence in the unsignableHeaders set.\n     */\n    unsignableHeaders?: Set<string>\n\n    /**\n     * A set of strings whose members represents headers that should be signed.\n     * Any values passed here will override those provided via unsignableHeaders,\n     * allowing them to be signed.\n     *\n     * All headers in the provided request will have their names converted to\n     * lower case before signing.\n     */\n    signableHeaders?: Set<string>\n}\n\nexport interface PresignOptions extends RequestSigningOptions {\n    /**\n     * The number of seconds before the presigned URL expires\n     */\n    expiresIn?: number\n\n    /**\n     * A set of strings whose representing headers that should not be hoisted\n     * to presigned request's query string. If not supplied, the presigner\n     * moves all the AWS-specific headers (starting with `x-amz-`) to the request\n     * query string. If supplied, these headers remain in the presigned request's\n     * header.\n     * All headers in the provided request will have their names converted to\n     * lower case and then checked for existence in the unhoistableHeaders set.\n     */\n    unhoistableHeaders?: Set<string>\n}\n\nexport interface Credentials {\n    /**\n     * AWS access key ID\n     */\n    readonly accessKeyId: string\n\n    /**\n     * AWS secret access key\n     */\n    readonly secretAccessKey: string\n\n    /**\n     * A security or session token to use with these credentials. Usually\n     * present for temporary credentials.\n     */\n    readonly sessionToken?: string\n}\n\nexport interface DateInfo {\n    /**\n     * ISO8601 formatted date string\n     */\n    longDate: string\n\n    /**\n     * String in the format YYYYMMDD\n     */\n    shortDate: string\n}\n\n/**\n * Escapes a URI following the AWS signature v4 escaping rules.\n *\n * @param URI {string} The URI to escape.\n * @returns {string} The escaped URI.\n */\nfunction escapeURI(URI: string): string {\n    const hexEncode = (c: string): string => {\n        return `%${c.charCodeAt(0).toString(16).toUpperCase()}`\n    }\n\n    return encodeURIComponent(URI).replace(/[!'()*]/g, hexEncode)\n}\n\n/**\n * formatDate formats a Date object into a ISO8601 formatted date string\n * and a string in the format YYYYMMDD.\n *\n * @param date {Date} The date to format.\n * @returns {DateInfo} The formatted date.\n */\nfunction formatDate(date: Date): DateInfo {\n    const longDate = iso8601(date).replace(/[\\-:]/g, '')\n    return {\n        longDate,\n        shortDate: longDate.slice(0, 8),\n    }\n}\n\n/**\n * Formats a time into an ISO 8601 string.\n *\n * @see https://en.wikipedia.org/wiki/ISO_8601\n *\n * @param time {number | string | Date} The time to format.\n * @returns {string} The ISO 8601 formatted time.\n */\nfunction iso8601(time: number | string | Date): string {\n    return toDate(time)\n        .toISOString()\n        .replace(/\\.\\d{3}Z$/, 'Z')\n}\n\n/**\n * Converts a time value into a Date object.\n *\n * @param time {number | string | Date} The time to convert.\n * @returns {Date} The resulting Date object.\n */\nfunction toDate(time: number | string | Date): Date {\n    if (typeof time === 'number') {\n        return new Date(time * 1000)\n    }\n\n    if (typeof time === 'string') {\n        if (Number(time)) {\n            return new Date(Number(time) * 1000)\n        }\n\n        return new Date(time)\n    }\n\n    return time\n}\n","import { Endpoint } from './endpoint'\n\n/**\n * Type representing HTTP schemes\n */\nexport type HTTPScheme = 'http' | 'https'\n\n/**\n * Type representing HTTP Methods\n *\n */\nexport type HTTPMethod = 'GET' | 'POST' | 'PUT' | 'DELETE'\n\n/**\n * Type alias representing HTTP Headers\n */\nexport type HTTPHeaders = { [key: string]: string }\n\n/**\n * HTTPHeaderBag is a type alias representing HTTP Headers\n */\nexport type HTTPHeaderBag = Record<string, string>\n\nexport function hasHeader(soughtHeader: string, headers: HTTPHeaderBag): boolean {\n    soughtHeader = soughtHeader.toLowerCase()\n\n    for (const headerName of Object.keys(headers)) {\n        if (soughtHeader === headerName.toLowerCase()) {\n            return true\n        }\n    }\n\n    return false\n}\n\n/**\n * QueryParameterBag is a type alias representing HTTP Query Parameters\n */\nexport type QueryParameterBag = Record<string, string | Array<string>>\n\n/**\n * HTTPRequest represents an HTTP request\n */\nexport interface HTTPRequest {\n    /**\n     * The HTTP method to use\n     */\n    method: HTTPMethod\n\n    /**\n     * Represents an AWS service endpoint, providing utilities for parsing and handling URL details.\n     */\n    endpoint: Endpoint\n\n    /**\n     * The path to the resource\n     */\n    path: string\n\n    /**\n     * The query parameters to include in the request\n     */\n    query?: QueryParameterBag\n\n    /**\n     * The headers to include in the request\n     */\n    headers: HTTPHeaderBag\n\n    /**\n     * The body of the request\n     */\n    body?: string | ArrayBuffer | null\n}\n\n/**\n * SignedHTTPRequest represents an HTTP request that has been signed\n * with an AWS signature. It is a superset of HTTPRequest adding\n * the following fields:\n * - url: the fully qualified URL of the request that can be used in a k6 http.request.\n */\nexport interface SignedHTTPRequest extends HTTPRequest {\n    url: string\n}\n","/**\n *\n * @param value\n * @returns\n */\nexport function isArrayBuffer(value: any): value is ArrayBuffer {\n    return (\n        typeof ArrayBuffer === 'function' &&\n        (value instanceof ArrayBuffer ||\n            Object.prototype.toString.call(value) === '[object ArrayBuffer]')\n    )\n}\n\nexport function toFormUrlEncoded(form: any): string {\n    return Object.keys(form).reduce((params, key) => {\n        let value = form[key]\n        if (value !== undefined && value !== null) {\n            params.push(`${encodeURIComponent(key)}=${encodeURIComponent(value)}`)\n        }\n        return params;\n    }, [] as string[]).join('&')\n}"],"names":["__webpack_require__","module","getter","__esModule","d","a","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","AMZ_ALGORITHM_QUERY_PARAM","AMZ_CREDENTIAL_QUERY_PARAM","AMZ_DATE_QUERY_PARAM","AMZ_EXPIRES_QUERY_PARAM","AMZ_SIGNATURE_QUERY_PARAM","AMZ_SIGNED_HEADERS_QUERY_PARAM","AMZ_TOKEN_QUERY_PARAM","AMZ_CONTENT_SHA256_HEADER","AMZ_DATE_HEADER","toLowerCase","AMZ_SIGNATURE_HEADER","AMZ_TOKEN_HEADER","AUTHORIZATION_HEADER","GENERATED_HEADERS","HOST_HEADER","ALWAYS_UNSIGNABLE_HEADERS","authorization","connection","expect","from","pragma","referer","te","trailer","upgrade","KEY_TYPE_IDENTIFIER","SIGNING_ALGORITHM_IDENTIFIER","UNSIGNED_PAYLOAD","Endpoint","endpoint","_classCallCheck","_defineProperty","completeUrl","startsWith","concat","DEFAULT_PROTOCOL","protocolMatch","match","hostnameWithPort","_slicedToArray","replace","split","this","_protocol","slice","_hostname","_port","parseInt","undefined","href","set","_value$split2","hostname","port","protocol","host","AWSConfig","options","region","InvalidAWSConfigError","accessKeyId","length","secretAccessKey","sessionToken","_createClass","__ENV","AWS_REGION","AWS_ACCESS_KEY_ID","AWS_SECRET_ACCESS_KEY","AWS_SESSION_TOKEN","_Error","_inherits","_super","_createSuper","message","_wrapNativeSuper","Error","require","AWSError","code","_this","_assertThisInitialized","name","xmlDocument","doc","parseHTML","find","text","SignatureV4","_ref","service","credentials","uriEscapePath","applyChecksum","request","arguments","finalOptions","_objectSpread","signingDate","Date","unsignableHeaders","Set","signableHeaders","_formatDate","formatDate","longDate","shortDate","signingService","signingRegion","scope","constants","headers","_i","_Object$keys","keys","headerName","indexOf","ArrayBuffer","isView","body","buffer","payloadHash","computePayloadHash","soughtHeader","hasHeader","canonicalHeaders","computeCanonicalHeaders","signature","calculateSignature","deriveSigningKey","createCanonicalRequest","sort","join","url","path","query","serializeQueryParameters","originalRequest","_options$signingDate","_options$expiresIn","expiresIn","unhoistableHeaders","_formatDate2","InvalidSignatureError","moveHeadersToQuery","toString","signingKey","canonicalRequest","sortedHeaders","sortedCanonicalHeaders","map","signedHeaders","method","computeCanonicalURI","computeCanonicalQuerystring","credentialScope","hashedCanonicalRequest","crypto","stringToSign","createStringToSign","kSecret","kDate","kRegion","kService","_ref2","_step","normalizedURISegments","_iterator","_createForOfIteratorHelper","s","n","done","URISegment","pop","push","err","e","f","leading","URI","trailing","endsWith","normalizedURI","encodeURIComponent","_ref3","_step2","_ref3$query","serialized","_loop","escapeURI","Array","isArray","reduce","encoded","_iterator2","filter","_ref4","_step3","_iterator3","canonicalHeaderName","has","trim","_ref5","requestCopy","JSON","parse","stringify","_requestCopy$query","_i2","_Object$keys2","_options$unhoistableH","lowerCaseName","ignoreKeys","_step4","_loop2","includes","_iterator4","_AWSError","c","charCodeAt","toUpperCase","date","time","Number","toDate","toISOString"],"sourceRoot":""}