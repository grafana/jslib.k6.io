{"version":3,"file":"ssm.js","mappings":";mBACA,IAAIA,EAAsB,CCA1BA,EAAyBC,IACxB,IAAIC,EAASD,GAAUA,EAAOE,WAC7B,IAAOF,EAAiB,QACxB,IAAM,EAEP,OADAD,EAAoBI,EAAEF,EAAQ,CAAEG,EAAGH,IAC5BA,CAAM,ECLdF,EAAwB,CAACM,EAASC,KACjC,IAAI,IAAIC,KAAOD,EACXP,EAAoBS,EAAEF,EAAYC,KAASR,EAAoBS,EAAEH,EAASE,IAC5EE,OAAOC,eAAeL,EAASE,EAAK,CAAEI,YAAY,EAAMC,IAAKN,EAAWC,IAE1E,ECNDR,EAAwB,CAACc,EAAKC,IAAUL,OAAOM,UAAUC,eAAeC,KAAKJ,EAAKC,GCClFf,EAAyBM,IACH,oBAAXa,QAA0BA,OAAOC,aAC1CV,OAAOC,eAAeL,EAASa,OAAOC,YAAa,CAAEC,MAAO,WAE7DX,OAAOC,eAAeL,EAAS,aAAc,CAAEe,OAAO,GAAO,onECFvD,IAAMC,EAAQ,WAajB,SAAAA,EAAYC,gGAAkBC,CAAA,KAAAF,GAAAG,EAAA,yBAAAA,EAAA,yBAAAA,EAAA,qBAC1B,IAEMC,GADDH,EAASI,WAAW,aAAeJ,EAASI,WAAW,YACvB,GAAAC,OAC5BN,EAASO,iBAAgB,OAAAD,OAAML,GAClCA,EAEAO,EAAgBJ,EAAYK,MAAM,YAEjCC,EAA0CC,EAD7BP,EAAYQ,QAAQ,eAAgB,IACjBC,MAAM,KAAI,GAA1B,GAEvBC,KAAKC,UAAYP,EAAgBA,EAAc,GAAGQ,MAAM,GAAI,GAAKhB,EAASO,iBAC1EO,KAAKG,UAAYP,EAAiBG,MAAM,KAAK,GAC7CC,KAAKI,MAAQR,EAAiBG,MAAM,KAAK,GACnCM,SAAST,EAAiBG,MAAM,KAAK,SACrCO,CACV,CAEA,SAAApB,KAAA,EAAAd,IAAA,OAAAa,MAKA,WACI,OAAO,IAAIC,EAASc,KAAKO,KAC7B,GAEA,CAAAnC,IAAA,OAAAK,IAKA,WACI,OAAOuB,KAAKI,MAAQ,GAAHZ,OAAMQ,KAAKG,UAAS,KAAAX,OAAIQ,KAAKI,OAAUJ,KAAKG,SACjE,EAEAK,IAKA,SAAgBvB,GACZ,IAAyCwB,EAAAZ,EAAhBZ,EAAMc,MAAM,KAAI,GAAlCW,EAAQD,EAAA,GAAEE,EAAIF,EAAA,GACrBT,KAAKG,UAAYO,EACjBV,KAAKI,MAAQO,EAAON,SAASM,QAAQL,CACzC,GAEA,CAAAlC,IAAA,WAAAK,IAKA,WACI,OAAOuB,KAAKG,SAChB,EAEAK,IAKA,SAAoBvB,GAChBe,KAAKG,UAAYlB,CACrB,GAEA,CAAAb,IAAA,OAAAK,IAKA,WACI,MAAO,GAAPe,OAAUQ,KAAKY,SAAQ,OAAApB,OAAMQ,KAAKa,KACtC,EAEAL,IAKA,SAAgBvB,GACZ,IAAMS,EAAgBT,EAAMU,MAAM,YAE3BC,EAA8CC,EAD7BZ,EAAMa,QAAQ,eAAgB,IACXC,MAAM,KAAI,GAA9B,GAEvBC,KAAKC,UAAYP,EAAgBA,EAAc,GAAGQ,MAAM,GAAI,GAAKhB,EAASO,iBAC1EO,KAAKG,UAAYP,EAAiBG,MAAM,KAAK,GAC7CC,KAAKI,MAAQR,EAAiBG,MAAM,KAAK,GACnCM,SAAST,EAAiBG,MAAM,KAAK,SACrCO,CACV,GAEA,CAAAlC,IAAA,OAAAK,IAKA,WACI,OAAOuB,KAAKI,KAChB,EAEAI,IAKA,SAAgBvB,GACZe,KAAKI,MAAQnB,CACjB,GAEA,CAAAb,IAAA,WAAAK,IAKA,WACI,OAAOuB,KAAKC,SAChB,EAEAO,IAKA,SAAoBvB,GAChBe,KAAKC,UAAYhB,CACrB,+FAAC,CA1IgB,i/EAKjBI,EALSH,EAAQ,mBAM0B,SCLxC,IAAM4B,EAAS,WA2ElB,SAAAA,EAAYC,GACR,GADmC3B,EAAA,KAAA0B,GA1EvCzB,EAAA,sBAOAA,EAAA,2BAOAA,EAAA,+BAOAA,EAAA,4BAOAA,EAAA,yBA+CS0B,EAAQC,QAA6B,KAAnBD,EAAQC,OAC3B,MAAM,IAAIC,EAAsB,yFAADzB,OAC+DuB,EAAQC,OAAM,MAIhH,IAAKD,EAAQG,aAAuC,KAAxBH,EAAQG,YAChC,MAAM,IAAID,EAAsB,wEAADzB,OAC8CuB,EAAQG,YAAW,MAIpG,GAAIH,EAAQG,YAAYC,OAAS,IAAMJ,EAAQG,YAAYC,OAAS,IAChE,MAAM,IAAIF,EAAsB,wFAADzB,OAC6DuB,EAAQG,YAAYC,SAIpH,IAAKJ,EAAQK,iBAA+C,KAA5BL,EAAQK,gBACpC,MAAM,IAAIH,EAAsB,4EAADzB,OACkDuB,EAAQK,gBAAe,MAI5GpB,KAAKgB,OAASD,EAAQC,OACtBhB,KAAKkB,YAAcH,EAAQG,YAC3BlB,KAAKoB,gBAAkBL,EAAQK,qBAEFd,IAAzBS,EAAQM,eACRrB,KAAKqB,aAAeN,EAAQM,mBAGPf,IAArBS,EAAQ5B,WACwB,iBAArB4B,EAAQ5B,SACfa,KAAKb,SAAW,IAAID,EAAS6B,EAAQ5B,UAErCa,KAAKb,SAAW4B,EAAQ5B,SAGpC,CAAC,OAAAmC,EAAAR,EAAA,OAAA1C,IAAA,kBAAAa,MA9DD,SAAuB8B,GAOnB,OAAO,IAAID,EAAU,CACjBE,OAPWO,MAAMC,WAQjBN,YAPgBK,MAAME,kBAQtBL,gBAPoBG,MAAMG,sBAQ1BL,aAPqCE,MAAMI,kBAQ3CxC,SAP4C4B,aAAO,EAAPA,EAAS5B,UAS7D,IAAC,CAnEiB,GA2KT8B,EAAqB,SAAAW,GAC9B,SAAAX,EAAYY,GAAiB,OAAAzC,EAAA,KAAA6B,GAAAa,EAAA,KAAAb,EAAA,CACnBY,GACV,CAAC,4RAAAE,CAAAd,EAAAW,GAAAN,EAAAL,EAAA,CAH6B,CAG7Be,EAHsCC,QC/K3C,MAAM,EAA+BC,QAAQ,sxFCYtC,IAAMC,EAAQ,SAAAP,GAYjB,SAAAO,EAAYN,EAAiBO,GAAe,IAAAC,EAGxB,OAHwBjD,EAAA,KAAA+C,GAX5C9C,EAYIgD,EAAAP,EAAA,KAAAK,EAAA,CAAMN,IAZV,eAaIQ,EAAKC,KAAO,WACZD,EAAKD,KAAOA,EAAIC,CACpB,CAEA,OAAAN,EAAAI,EAAAP,GAAAN,EAAAa,EAAA,OAAA/D,IAAA,WAAAa,MAMA,SAAgBsD,GACZ,IAAMC,GAAMC,EAAAA,EAAAA,WAAUF,GACtB,OAAO,IAAIJ,EAASK,EAAIE,KAAK,WAAWC,OAAQH,EAAIE,KAAK,QAAQC,OACrE,GAEA,CAAAvE,IAAA,QAAAa,MAMA,SAAa2D,GACT,GAAyC,qBAArCA,EAASC,QAAQ,gBAAwC,CACzD,IAAMC,EAASF,EAASG,QAAyB,CAAC,EAOlD,OAAO,IAAIZ,EALPW,EAAME,SACNF,EAAMjB,SACNiB,EAAMG,QACN,uCACSL,EAASC,QAAQ,qBAAuBC,EAAMG,OAE/D,CACI,OAAOd,EAASe,SAASN,EAASO,KAE1C,IAAC,CAhDgB,CAgDhBnB,EAhDyBC,QA4DjBmB,EAAY,SAAAC,GAUrB,SAAAD,EAAYd,EAASF,GAAS,IAAAkB,EAGV,OAHUlE,EAAA,KAAAgE,GAC+B/D,EAAzDiE,EAAAxB,EAAA,KAAAsB,EAAA,CAAMG,EAAcnB,IAAS,8BAA4B,eAAA/C,EAAAiE,EAAA,eACzDA,EAAKhB,KAAOA,EACZgB,EAAKlB,KAAOA,EAAIkB,CACpB,CAAC,OAAAvB,EAAAqB,EAAAC,GAAA/B,EAAA8B,EAAA,CAdoB,CAcpBpB,EAd8EC,QAqBtEuB,EAAY,SAAAC,GAMrB,SAAAD,EAAYpB,GAAwB,OAAAhD,EAAA,KAAAoE,GAAA1B,EAAA,KAAA0B,EAAA,CAC1B,eAAgBpB,GAC1B,CAAC,OAAAL,EAAAyB,EAAAC,GAAAnC,EAAAkC,EAAA,CARoB,CAASJ,GAerBM,EAAQ,SAAAC,GAMjB,SAAAD,EAAYtB,GAAoB,OAAAhD,EAAA,KAAAsE,GAAA5B,EAAA,KAAA4B,EAAA,CACtB,WAAYtB,GACtB,CAAC,OAAAL,EAAA2B,EAAAC,GAAArC,EAAAoC,EAAA,CARgB,CAASN,GAejBQ,EAAQ,SAAAC,GAMjB,SAAAD,EAAYxB,GAAoB,OAAAhD,EAAA,KAAAwE,GAAA9B,EAAA,KAAA8B,EAAA,CACtB,WAAYxB,GACtB,CAAC,OAAAL,EAAA6B,EAAAC,GAAAvC,EAAAsC,EAAA,CARgB,CAASR,GAejBU,EAAQ,SAAAC,GAMjB,SAAAD,EAAY1B,GAAoB,OAAAhD,EAAA,KAAA0E,GAAAhC,EAAA,KAAAgC,EAAA,CACtB,WAAY1B,GACtB,CAAC,OAAAL,EAAA+B,EAAAC,GAAAzC,EAAAwC,EAAA,CARgB,CAASV,GAejBY,EAAU,SAAAC,GAMnB,SAAAD,EAAY5B,GAAsB,OAAAhD,EAAA,KAAA4E,GAAAlC,EAAA,KAAAkC,EAAA,CACxB,aAAc5B,GACxB,CAAC,OAAAL,EAAAiC,EAAAC,GAAA3C,EAAA0C,EAAA,CARkB,CAASZ,GA2BpBc,EAAgB,SAAhBA,GAAgB,OAAhBA,EAAAA,EAAgB,iCAAhBA,EAAAA,EAAgB,8CAAhBA,EAAAA,EAAgB,8BAAhBA,EAAAA,EAAgB,8CAAhBA,CAAgB,MAWhBC,EAAY,SAAZA,GAAY,OAAZA,EAAAA,EAAY,wCAAZA,EAAAA,EAAY,4BAAZA,EAAAA,EAAY,oCAAZA,EAAAA,EAAY,gDAAZA,CAAY,MAWZC,EAAY,SAAZA,GAAY,OAAZA,EAAAA,EAAY,wCAAZA,EAAAA,EAAY,4CAAZA,EAAAA,EAAY,wCAAZA,EAAAA,EAAY,gDAAZA,EAAAA,EAAY,0CAAZA,EAAAA,EAAY,oDAAZA,EAAAA,EAAY,0CAAZA,EAAAA,EAAY,gCAAZA,CAAY,MAeZC,EAAY,SAAZA,GAAY,OAAZA,EAAAA,EAAY,wCAAZA,EAAAA,EAAY,0CAAZA,EAAAA,EAAY,gEAAZA,CAAY,MAUZC,EAAc,SAAdA,GAAc,OAAdA,EAAAA,EAAc,4CAAdA,EAAAA,EAAc,wDAAdA,CAAc,MASpBf,GAA6ClE,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAkF,EAAG,CAAC,EAClDL,EAAiBM,aAAe,2DAChCN,EAAiBO,mBACd,uGACHP,EAAiBQ,WAAa,gCAC9BR,EAAiBS,mBAAqB,kCACtCR,EAAaS,gBAAkB,+DAC/BT,EAAaU,UAAY,yCACzBV,EAAaW,cACV,mFACHX,EAAaY,oBAAsB,yDACnCX,EAAaY,gBAAkB,+DAC/BZ,EAAaa,kBACV,8EAA4E5F,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAkF,EAC/EH,EAAac,gBACV,oPACHd,EAAae,oBAAsB,0BACnCf,EAAagB,iBAAmB,6DAChChB,EAAaiB,sBACV,mFACHjB,EAAakB,iBAAmB,sBAChClB,EAAamB,YACV,qFACHlB,EAAamB,gBAAkB,qBAC/BnB,EAAaoB,iBAAmB,yDAChCpB,EAAaqB,4BAA8B,8CAC3CpB,EAAeqB,kBACZ,kEAAgEtG,EAAAkF,EACnED,EAAesB,wBAA0B,kCCxQ9C,MAAM,EAA+B1D,QAAQ,0BCKhC2D,EAAuB,aAEvBC,EAA4B,kBAG5BC,EAAwB,uBAKxBC,GAA4B,uBAC5BC,GAAkBJ,EAAqBK,cACvCC,GAAuBL,EAA0BI,cACjDE,GATyB,eASkBF,cAC3CG,GAAmBN,EAAsBG,cAKzCI,GAAuB,gBAMvBC,GAAoB,CAACD,GAAsBL,GAL7B,QAMdO,GAAc,OAMdC,GAA4B,CACrCC,eAAe,EACf,iBAAiB,EACjBC,YAAY,EACZC,QAAQ,EACRC,MAAM,EACN,cAAc,EACd,gBAAgB,EAChBC,QAAQ,EACRC,SAAS,EACTC,IAAI,EACJC,SAAS,EACT,qBAAqB,EACrBC,SAAS,EACT,cAAc,EACd,mBAAmB,GAMVC,GAAsB,eACtBC,GAA+B,m5GC1CrC,IAAMC,GAAW,WAkDpB,OAAA/F,IAdA,SAAA+F,EAAAC,GAMuB,IALnBC,EAAOD,EAAPC,QACAvG,EAAMsG,EAANtG,OACAwG,EAAWF,EAAXE,YACAC,EAAaH,EAAbG,cACAC,EAAaJ,EAAbI,cAAatI,GAAA,KAAAiI,GAxCjBhI,GAAA,uBAKAA,GAAA,sBAKAA,GAAA,2BAKAA,GAAA,6BASAA,GAAA,6BAkBIW,KAAKuH,QAAUA,EACfvH,KAAKgB,OAASA,EACdhB,KAAKwH,YAAcA,EACnBxH,KAAKyH,cAAyC,kBAAlBA,GAA8BA,EAC1DzH,KAAK0H,cAAyC,kBAAlBA,GAA8BA,CAC9D,GAEA,EAAAtJ,IAAA,OAAAa,MAaA,SAAK0I,GAAuF,IAAjE5G,EAAuC6G,UAAAzG,OAAA,QAAAb,IAAAsH,UAAA,GAAAA,UAAA,GAAG,CAAC,EAS5DC,EAAYC,GAAAA,GAAA,GAPK,CACnBC,YAAa,IAAIC,KACjBC,kBAAmB,IAAIC,IACvBC,gBAAiB,IAAID,MAIoBnH,GAE7CqH,EAA0CC,GAAWR,EAAaE,aAA1DO,EAAQF,EAARE,SAAUC,EAASH,EAATG,UACZhB,EAAUM,EAAaW,gBAAkBxI,KAAKuH,QAC9CvG,EAAS6G,EAAaY,eAAiBzI,KAAKgB,OAC5C0H,EAAQ,GAAHlJ,OAAM+I,EAAS,KAAA/I,OAAIwB,EAAM,KAAAxB,OAAI+H,EAAO,KAAA/H,OAAImJ,IAO9ChB,EAAQ9E,QAAQ8F,MACjBhB,EAAQ9E,QAAQ8F,IAAyBhB,EAAQxI,SAASuB,UAM9D,IAAK,IAALkI,EAAA,EAAAC,EAAyBvK,OAAOwK,KAAKnB,EAAQ9E,SAAQ+F,EAAAC,EAAA1H,OAAAyH,IAAE,CAAlD,IAAMG,EAAUF,EAAAD,GACbD,GAA4BK,QAAQD,EAAW7C,gBAAkB,UAC1DyB,EAAQ9E,QAAQkG,EAE/B,CAEApB,EAAQ9E,QAAQ8F,IAA6BL,EACzCtI,KAAKwH,YAAYnG,eACjBsG,EAAQ9E,QAAQ8F,IAA8B3I,KAAKwH,YAAYnG,cAK/D4H,YAAYC,OAAOvB,EAAQxE,QAC3BwE,EAAQxE,KAAOwE,EAAQxE,KAAKgG,QAI3BxB,EAAQxE,OACTwE,EAAQxE,KAAO,IAGnB,IAAMiG,EAAcpJ,KAAKqJ,mBAAmB1B,IC3G7C,SAAmB2B,EAAsBzG,GAC5CyG,EAAeA,EAAapD,cAE5B,IAAK,IAAL0C,EAAA,EAAAC,EAAyBvK,OAAOwK,KAAKjG,GAAQ+F,EAAAC,EAAA1H,OAAAyH,IACzC,GAAIU,IADaT,EAAAD,GACe1C,cAC5B,OAAO,EAIf,OAAO,CACX,CDmGaqD,CAAUZ,GAAqChB,EAAQ9E,UACxD7C,KAAK0H,gBAELC,EAAQ9E,QAAQ8F,IAAuCS,GAG3D,IAAMI,EAAmBxJ,KAAKyJ,wBAC1B9B,EACAE,EAAaI,kBACbJ,EAAaM,iBAEXuB,EAAY1J,KAAK2J,mBACnBrB,EACAI,EACA1I,KAAK4J,iBAAiB5J,KAAKwH,YAAaD,EAASvG,EAAQuH,GACzDvI,KAAK6J,uBAAuBlC,EAAS6B,EAAkBJ,IAQ3DzB,EAAQ9E,QAAQ8F,IACZ,GAAAnJ,OAAGmJ,GAAsC,mBAAAnJ,OAC3BQ,KAAKwH,YAAYtG,YAAW,KAAA1B,OAAIkJ,EAAK,MAAI,iBAAAlJ,OACtClB,OAAOwK,KAAKU,GAAkBM,OAAOC,KAAK,KAAI,MAAI,aAAAvK,OACtDkK,GAGjB,IAAIM,EAAMrC,EAAQxI,SAASoB,KAkB3B,OAjBIoH,EAAQsC,OAGHD,EAAIE,SAAS,MAASvC,EAAQsC,KAAK1K,WAAW,OAC/CyK,GAAO,KAIXA,GAAOrC,EAAQsC,MAIftC,EAAQwC,QAERH,GAAO,IAAJxK,OAAQQ,KAAKoK,yBAAyBzC,EAAQwC,SAGrDrC,GAAA,CACIkC,IAAKA,GACFrC,EAEX,GAEA,CAAAvJ,IAAA,UAAAa,MAWA,SAAQoL,GAA+E,IAAjDtJ,EAAuB6G,UAAAzG,OAAA,QAAAb,IAAAsH,UAAA,GAAAA,UAAA,GAAG,CAAC,EAC7D0C,EAQIvJ,EAPAgH,YAAAA,OAAW,IAAAuC,EAAG,IAAItC,KAAMsC,EAAAC,EAOxBxJ,EANAyJ,UAAAA,OAAS,IAAAD,EAAG,KAAIA,EAChBtC,EAKAlH,EALAkH,kBACAwC,EAIA1J,EAJA0J,mBACAtC,EAGApH,EAHAoH,gBACAM,EAEA1H,EAFA0H,cACAD,EACAzH,EADAyH,eAEJkC,EAA0CrC,GAAWN,GAA7CO,EAAQoC,EAARpC,SAAUC,EAASmC,EAATnC,UACZvH,EAASyH,GAAiBzI,KAAKgB,OAC/BuG,EAAUiB,GAAkBxI,KAAKuH,QAEvC,GAAIiD,EDnJqB,OCoJrB,MAAM,IAAIG,GACN,0EAIR,IAAMjC,EAAQ,GAAHlJ,OAAM+I,EAAS,KAAA/I,OAAIwB,EAAM,KAAAxB,OAAI+H,EAAO,KAAA/H,OAAImJ,IAC7ChB,EAAU3H,KAAK4K,mBAAmBP,EAAiB,CAAEI,mBAAAA,IAOtD9C,EAAQ9E,QAAQ8F,MACjBhB,EAAQ9E,QAAQ8F,IAAyB0B,EAAgBlL,SAASuB,UAIlEV,KAAKwH,YAAYnG,eACjBsG,EAAQwC,MAAMxB,GAAmC3I,KAAKwH,YAAYnG,cAItEsG,EAAQwC,MDxOyB,mBCwOoBxB,GACrDhB,EAAQwC,MDxO0B,oBC0O9B,GAAH3K,OAAMQ,KAAKwH,YAAYtG,YAAW,KAAA1B,OAAIkJ,GACvCf,EAAQwC,MAAMxB,GAAkCL,EAChDX,EAAQwC,MD1OuB,iBC0OoBK,EAAUK,SAAS,IAEtE,IAAMrB,EAAmBxJ,KAAKyJ,wBAC1B9B,EACAM,EACAE,GAEJR,EAAQwC,MD/O8B,uBC+OoB7L,OAAOwK,KAAKU,GACjEM,OACAC,KAAK,KAEV,IAAMe,EAAa9K,KAAK4J,iBAAiB5J,KAAKwH,YAAaD,EAASvG,EAAQuH,GAStEa,EAAcpJ,KAAKqJ,mBAAmBgB,GACtCU,EAAmB/K,KAAK6J,uBAAuBlC,EAAS6B,EAAkBJ,GAEhFzB,EAAQwC,MAAMxB,GAAuC3I,KAAK2J,mBACtDrB,EACAI,EACAoC,EACAC,GAIJ,IACkBC,EADdhB,EAAMK,EAAgBlL,SAASoB,KAC/BoH,EAAQsC,OAGRD,EAAS,QAAHgB,EAAAhB,SAAG,IAAAgB,GAAHA,EAAKd,SAAS,KAAOF,EAAMA,EAAM,IAGvCA,GAAOrC,EAAQsC,MAQnB,OAJItC,EAAQwC,QACRH,GAAO,IAAJxK,OAAQQ,KAAKoK,yBAAyBzC,EAAQwC,SAGrDrC,GAAA,CAASkC,IAAKA,GAAQrC,EAC1B,GAEA,CAAAvJ,IAAA,yBAAAa,MAYA,SACI0I,EACA6B,EACAJ,GAEA,IAAM6B,EAAgB3M,OAAOwK,KAAKU,GAAkBM,OAC9CoB,EAAyBD,EAC1BE,KAAI,SAAC7I,GAAI,SAAA9C,OAAQ8C,EAAI,KAAA9C,OAAIgK,EAAiBlH,GAAK,IAC/CyH,KAAK,MACJqB,EAAgBH,EAAclB,KAAK,KAEzC,MACI,GAAAvK,OAAGmI,EAAQ0D,OAAM,SAAA7L,OACdQ,KAAKsL,oBAAoB3D,GAAQ,MAAI,GAAAnI,OACrCQ,KAAKuL,4BAA4B5D,GAAQ,MAAI,GAAAnI,OAC7C0L,EAAsB,QAAM,GAAA1L,OAC5B4L,EAAa,MAAI,GAAA5L,OACjB4J,EAEX,GAEA,CAAAhL,IAAA,qBAAAa,MAcA,SACIqJ,EACAkD,EACAT,GAEA,IAAMU,EAAyBC,IAAAA,OAAcX,EAAkB,OAE/D,MACI,GAAAvL,OAAGmJ,GAAsC,SAAAnJ,OACtC8I,EAAQ,MAAI,GAAA9I,OACZgM,EAAe,MAAI,GAAAhM,OACnBiM,EAEX,GAEA,CAAArN,IAAA,qBAAAa,MAYA,SACIqJ,EACAkD,EACAV,EACAC,GAEA,IAAMY,EAAe3L,KAAK4L,mBAAmBtD,EAAUkD,EAAiBT,GACxE,OAAOW,IAAAA,KAAY,SAAUZ,EAAYa,EAAc,MAC3D,GAEA,CAAAvN,IAAA,mBAAAa,MAiBA,SACIuI,EACAD,EACAvG,EACAuH,GAEA,IAAMsD,EAAkBrE,EAAYpG,gBAS9B0K,EAAaJ,IAAAA,KAAY,SAAU,OAASG,EAAStD,EAAW,UAChEwD,EAAeL,IAAAA,KAAY,SAAUI,EAAO9K,EAAQ,UACpDgL,EAAgBN,IAAAA,KAAY,SAAUK,EAASxE,EAAS,UAI9D,OAHsBmE,IAAAA,KAAY,SAAUM,EAAU,eAAgB,SAI1E,GAEA,CAAA5N,IAAA,sBAAAa,MAOA,SAA2BgN,GAAgC,IAA7BhC,EAAIgC,EAAJhC,KAC1B,GAAIjK,KAAKyH,cAAe,CAGpB,IAEwCyE,EAFlCC,EAAwB,GAAEC,EAAAC,GAEPpC,EAAKlK,MAAM,MAAI,IAAxC,IAAAqM,EAAAE,MAAAJ,EAAAE,EAAAG,KAAAC,MAA0C,KAA/BC,EAAUP,EAAAjN,MACU,KAAvBwN,aAAU,EAAVA,EAAYtL,UAIG,MAAfsL,IAIe,OAAfA,EACAN,EAAsBO,MAEtBP,EAAsBQ,KAAKF,IAEnC,CAEA,OAAAG,GAAAR,EAAAS,EAAAD,EAAA,SAAAR,EAAAU,GAAA,CACA,IAAMC,EAAU9C,SAAAA,EAAM1K,WAAW,KAAO,IAAM,GACxCyN,EAAMb,EAAsBpC,KAAK,KACjCkD,EAAWd,EAAsBhL,OAAS,GAA/BgL,MAAoClC,GAAAA,EAAMC,SAAS,KAAO,IAAM,GAC3EgD,EAAgB,GAAH1N,OAAMuN,GAAOvN,OAAGwN,GAAGxN,OAAGyN,GAIzC,OAFsBE,mBAAmBD,GAEpBpN,QAAQ,OAAQ,IACzC,CAKA,OAAOmK,CACX,GAEA,CAAA7L,IAAA,8BAAAa,MAQA,SAAmCmO,GAAsC,IAI1BC,EAJ0BC,EAAAF,EAAnCjD,MAAAA,OAAK,IAAAmD,EAAG,CAAC,EAACA,EACtCxE,EAAsB,GACtByE,EAAqC,CAAC,EAACC,EAAA,SAAApP,GAGzC,GAAIA,EAAI8H,gBAAkByC,GAAgC,SAI1DG,EAAK6D,KAAKvO,GACV,IAAMa,EAAQkL,EAAM/L,GAEC,iBAAVa,EACPsO,EAAWnP,GAAO,GAAHoB,OAAMiO,GAAUrP,GAAI,KAAAoB,OAAIiO,GAAUxO,IAC1CyO,MAAMC,QAAQ1O,KACrBsO,EAAWnP,GAAOa,EACbiB,MAAM,GACN4J,OACA8D,QACG,SAACC,EAAwB5O,GAAa,OAClC4O,EAAQrO,OAAO,CAAC,GAADA,OAAIiO,GAAUrP,GAAI,KAAAoB,OAAIiO,GAAUxO,KAAU,GAC7D,IAEH8K,KAAK,KAElB,EAAC+D,EAAAzB,GArBiB/N,OAAOwK,KAAKqB,GAAOL,QAAM,IAA3C,IAAAgE,EAAAxB,MAAAe,EAAAS,EAAAvB,KAAAC,MAAA,CAAcgB,EAAAH,EAAApO,MAEE,CAmBf,OAAA2N,GAAAkB,EAAAjB,EAAAD,EAAA,SAAAkB,EAAAhB,GAAA,CAED,OAAOhE,EACFqC,KAAI,SAAC/M,GAAG,OAAKmP,EAAWnP,EAAI,IAC5B2P,QAAO,SAACR,GAAU,OAAKA,CAAU,IACjCxD,KAAK,IACd,GAEA,CAAA3L,IAAA,0BAAAa,MAUA,SAA+B+O,EAE3B/F,EACAE,GACa,IAGuC8F,EANlDpL,EAAOmL,EAAPnL,QAII2G,EAAkC,CAAC,EAAC0E,EAAA7B,GAEjB/N,OAAOwK,KAAKjG,GAASiH,QAAM,IAApD,IAAAoE,EAAA5B,MAAA2B,EAAAC,EAAA3B,KAAAC,MAAsD,KAA3CzD,EAAUkF,EAAAhP,MACjB,GAA2BqB,MAAvBuC,EAAQkG,GAAZ,CAIA,IAAMoF,EAAsBpF,EAAW7C,eAEnCiI,KAAuBxF,IACvBV,SAAAA,EAAmBmG,IAAID,OAGlBhG,GACAA,IAAoBA,EAAgBiG,IAAID,KAMd,iBAAxBtL,EAAQkG,KACfS,EAAiB2E,GAAuBtL,EAAQkG,GAAclG,EAAQkG,GACjEsF,OACAvO,QAAQ,OAAQ,KAlBzB,CAoBJ,CAAC,OAAA8M,GAAAsB,EAAArB,EAAAD,EAAA,SAAAsB,EAAApB,GAAA,CAED,OAAOtD,CACX,GAEA,CAAApL,IAAA,qBAAAa,MAWA,SAA0BqP,GAAyC,IExiBzCrP,EFwiBG4D,EAAOyL,EAAPzL,QAASM,EAAImL,EAAJnL,KASlC,OAAIN,EAAQ8F,IACD9F,EAAQ8F,IAGPrI,MAAR6C,EDrfgB,mECyfA,iBAATA,IEzjBWlE,EFyjBwBkE,EEvjBvB,mBAAhB8F,cACNhK,aAAiBgK,aAC4B,yBAA1C3K,OAAOM,UAAUiM,SAAS/L,KAAKG,KFsjBxByM,IAAAA,OAAcvI,EAAM,OAAO+C,cAGlC+C,YAAYC,OAAO/F,GAGZuI,IAAAA,OAAevI,EAAkBgG,OAAQ,OAAOjD,cDxfnC,kBC4f5B,GAEA,CAAA9H,IAAA,qBAAAa,MAaA,SACI0I,GAMA,IAJ0C,IAD1C5G,EAA6C6G,UAAAzG,OAAA,QAAAb,IAAAsH,UAAA,GAAAA,UAAA,GAAG,CAAC,EAE3C2G,EAAcC,KAAKC,MAAMD,KAAKE,UAAU/G,IACtC9E,EAA6C0L,EAA7C1L,QAAO8L,EAAsCJ,EAApCpE,MAAAA,OAAK,IAAAwE,EAAG,CAAC,EAACA,EAE3BC,EAAA,EAAAC,EAAmBvQ,OAAOwK,KAAKjG,GAAQ+L,EAAAC,EAAA1N,OAAAyN,IAAE,KAAAE,EAA9BxM,EAAIuM,EAAAD,GACLG,EAAgBzM,EAAK4D,cAEO,WAA9B6I,EAAc7O,MAAM,EAAG,IACI,QAA3B4O,EAAC/N,EAAQ0J,0BAAkB,IAAAqE,GAA1BA,EAA4BV,IAAIW,KAEjC5E,EAAM7H,GAAQO,EAAQP,UACfO,EAAQP,GAEvB,CAEA,OAAAwF,GAAAA,GAAA,GACOyG,GAAW,IACd1L,QAAAA,EACAsH,MAAAA,GAER,GAEA,CAAA/L,IAAA,2BAAAa,MAOA,SAAiCkL,EAA0B6E,GACvD,IAG2CC,EAHrCnG,EAAsB,GACtByE,EAAqC,CAAC,EAAC2B,EAAA,SAAA9Q,GAGzC,GAAI4Q,SAAAA,EAAYG,SAAS/Q,EAAI8H,eAAgB,SAI7C4C,EAAK6D,KAAKvO,GACV,IAAMa,EAAQkL,EAAM/L,GAEC,iBAAVa,EACPsO,EAAWnP,GAAO,GAAHoB,OAAMiO,GAAUrP,GAAI,KAAAoB,OAAIiO,GAAUxO,IAC1CyO,MAAMC,QAAQ1O,KACrBsO,EAAWnP,GAAOa,EACbiB,MAAM,GACN4J,OACA8D,QACG,SAACC,EAAwB5O,GAAa,OAClC4O,EAAQrO,OAAO,CAAC,GAADA,OAAIiO,GAAUrP,GAAI,KAAAoB,OAAIiO,GAAUxO,KAAU,GAC7D,IAEH8K,KAAK,KAElB,EAACqF,EAAA/C,GArBiB/N,OAAOwK,KAAKqB,GAAOL,QAAM,IAA3C,IAAAsF,EAAA9C,MAAA2C,EAAAG,EAAA7C,KAAAC,MAAA,CAAc0C,EAAAD,EAAAhQ,MAEE,CAmBf,OAAA2N,GAAAwC,EAAAvC,EAAAD,EAAA,SAAAwC,EAAAtC,GAAA,CAED,OAAOhE,EACFqC,KAAI,SAAC/M,GAAG,OAAKmP,EAAWnP,EAAI,IAC5B2P,QAAO,SAACR,GAAU,OAAKA,CAAU,IACjCxD,KAAK,IACd,IAAC,CAtoBmB,GAipBXY,GAAqB,SAAA0E,GAM9B,SAAA1E,EAAY9I,EAAiBO,GAAe,IAAAC,EAEL,OAFKjD,GAAA,KAAAuL,IACxCtI,EAAAP,GAAA,KAAA6I,EAAA,CAAM9I,EAASO,KACVE,KAAO,wBAAuBD,CACvC,CAAC,6RAAAN,CAAA4I,EAAA0E,GAAA/N,GAAAqJ,EAAA,CAT6B,CAASxI,GA+I3C,SAASsL,GAAUT,GAKf,OAAOG,mBAAmBH,GAAKlN,QAAQ,YAJrB,SAACwP,GACf,MAAO,IAAP9P,OAAW8P,EAAEC,WAAW,GAAG1E,SAAS,IAAI2E,cAC5C,GAGJ,CASA,SAASnH,GAAWoH,GAChB,IAeaC,EAfPpH,GAeOoH,EAfYD,EA2B7B,SAAgBC,GACZ,MAAoB,iBAATA,EACA,IAAI1H,KAAY,IAAP0H,GAGA,iBAATA,EACHC,OAAOD,GACA,IAAI1H,KAAoB,IAAf2H,OAAOD,IAGpB,IAAI1H,KAAK0H,GAGbA,CACX,CAzBWE,CAAOF,GACTG,cACA/P,QAAQ,YAAa,MAlBKA,QAAQ,QAAS,IAChD,MAAO,CACHwI,SAAAA,EACAC,UAAWD,EAASpI,MAAM,EAAG,GAErC,CGt0BA,MAAM,GAA+BgC,QAAQ,+lCCC7C4N,GAAA,kBAAAjD,CAAA,MAAAkD,EAAAlD,EAAA,GAAAmD,EAAA1R,OAAAM,UAAA2N,EAAAyD,EAAAnR,eAAAR,EAAAC,OAAAC,gBAAA,SAAAwR,EAAAlD,EAAAmD,GAAAD,EAAAlD,GAAAmD,EAAA/Q,KAAA,EAAAgR,EAAA,mBAAAlR,OAAAA,OAAA,GAAAd,EAAAgS,EAAAC,UAAA,aAAAZ,EAAAW,EAAAE,eAAA,kBAAAC,EAAAH,EAAAjR,aAAA,yBAAAqR,EAAAN,EAAAlD,EAAAmD,GAAA,OAAA1R,OAAAC,eAAAwR,EAAAlD,EAAA,CAAA5N,MAAA+Q,EAAAxR,YAAA,EAAA8R,cAAA,EAAAC,UAAA,IAAAR,EAAAlD,EAAA,KAAAwD,EAAA,aAAAN,GAAAM,EAAA,SAAAN,EAAAlD,EAAAmD,GAAA,OAAAD,EAAAlD,GAAAmD,CAAA,WAAAQ,EAAAT,EAAAlD,EAAAmD,EAAAzD,GAAA,IAAA0D,EAAApD,GAAAA,EAAAjO,qBAAA6R,EAAA5D,EAAA4D,EAAAxS,EAAAK,OAAAoS,OAAAT,EAAArR,WAAA0Q,EAAA,IAAAqB,EAAApE,GAAA,WAAAlO,EAAAJ,EAAA,WAAAgB,MAAA2R,EAAAb,EAAAC,EAAAV,KAAArR,CAAA,UAAA4S,EAAAd,EAAAlD,EAAAmD,GAAA,WAAAc,KAAA,SAAAC,IAAAhB,EAAAjR,KAAA+N,EAAAmD,GAAA,OAAAD,GAAA,OAAAe,KAAA,QAAAC,IAAAhB,EAAA,EAAAlD,EAAA2D,KAAAA,EAAA,IAAAQ,EAAA,iBAAAC,EAAA,iBAAAnE,EAAA,YAAAR,EAAA,YAAA4E,EAAA,YAAAT,IAAA,UAAAU,IAAA,UAAAC,IAAA,KAAAC,EAAA,GAAAhB,EAAAgB,EAAApT,GAAA,8BAAAD,EAAAM,OAAAgT,eAAAC,EAAAvT,GAAAA,EAAAA,EAAAwT,EAAA,MAAAD,GAAAA,IAAAvB,GAAAzD,EAAAzN,KAAAyS,EAAAtT,KAAAoT,EAAAE,GAAA,IAAAE,EAAAL,EAAAxS,UAAA6R,EAAA7R,UAAAN,OAAAoS,OAAAW,GAAA,SAAAK,EAAA3B,GAAA,0BAAA4B,SAAA,SAAA9E,GAAAwD,EAAAN,EAAAlD,GAAA,SAAAkD,GAAA,YAAA6B,QAAA/E,EAAAkD,EAAA,gBAAA8B,EAAA9B,EAAAlD,GAAA,SAAAiF,EAAA9B,EAAA3R,EAAA4R,EAAAhS,GAAA,IAAAqR,EAAAuB,EAAAd,EAAAC,GAAAD,EAAA1R,GAAA,aAAAiR,EAAAwB,KAAA,KAAAV,EAAAd,EAAAyB,IAAAC,EAAAZ,EAAAnR,MAAA,OAAA+R,GAAA,UAAAe,GAAAf,IAAAzE,EAAAzN,KAAAkS,EAAA,WAAAnE,EAAAmF,QAAAhB,EAAAiB,SAAAC,MAAA,SAAAnC,GAAA+B,EAAA,OAAA/B,EAAAE,EAAAhS,EAAA,aAAA8R,GAAA+B,EAAA,QAAA/B,EAAAE,EAAAhS,EAAA,IAAA4O,EAAAmF,QAAAhB,GAAAkB,MAAA,SAAAnC,GAAAK,EAAAnR,MAAA8Q,EAAAE,EAAAG,EAAA,aAAAL,GAAA,OAAA+B,EAAA,QAAA/B,EAAAE,EAAAhS,EAAA,IAAAA,EAAAqR,EAAAyB,IAAA,KAAAf,EAAA3R,EAAA,gBAAAY,MAAA,SAAA8Q,EAAAxD,GAAA,SAAA4F,IAAA,WAAAtF,GAAA,SAAAA,EAAAmD,GAAA8B,EAAA/B,EAAAxD,EAAAM,EAAAmD,EAAA,WAAAA,EAAAA,EAAAA,EAAAkC,KAAAC,EAAAA,GAAAA,GAAA,aAAAvB,EAAA/D,EAAAmD,EAAAzD,GAAA,IAAAlO,EAAA2S,EAAA,gBAAAf,EAAAhS,GAAA,GAAAI,IAAAyO,EAAA,MAAA7K,MAAA,mCAAA5D,IAAAiO,EAAA,cAAA2D,EAAA,MAAAhS,EAAA,OAAAgB,MAAA8Q,EAAAvD,MAAA,OAAAD,EAAAlB,OAAA4E,EAAA1D,EAAAwE,IAAA9S,IAAA,KAAAqR,EAAA/C,EAAA6F,SAAA,GAAA9C,EAAA,KAAAc,EAAAiC,EAAA/C,EAAA/C,GAAA,GAAA6D,EAAA,IAAAA,IAAAc,EAAA,gBAAAd,CAAA,cAAA7D,EAAAlB,OAAAkB,EAAA+F,KAAA/F,EAAAgG,MAAAhG,EAAAwE,SAAA,aAAAxE,EAAAlB,OAAA,IAAAhN,IAAA2S,EAAA,MAAA3S,EAAAiO,EAAAC,EAAAwE,IAAAxE,EAAAiG,kBAAAjG,EAAAwE,IAAA,gBAAAxE,EAAAlB,QAAAkB,EAAAkG,OAAA,SAAAlG,EAAAwE,KAAA1S,EAAAyO,EAAA,IAAAuE,EAAAR,EAAAhE,EAAAmD,EAAAzD,GAAA,cAAA8E,EAAAP,KAAA,IAAAzS,EAAAkO,EAAAC,KAAAF,EAAA2E,EAAAI,EAAAN,MAAAG,EAAA,gBAAAjS,MAAAoS,EAAAN,IAAAvE,KAAAD,EAAAC,KAAA,WAAA6E,EAAAP,OAAAzS,EAAAiO,EAAAC,EAAAlB,OAAA,QAAAkB,EAAAwE,IAAAM,EAAAN,IAAA,YAAAsB,EAAAxF,EAAAmD,GAAA,IAAAzD,EAAAyD,EAAA3E,OAAAhN,EAAAwO,EAAAqD,SAAA3D,GAAA,GAAAlO,IAAA0R,EAAA,OAAAC,EAAAoC,SAAA,eAAA7F,GAAAM,EAAAqD,SAAA,SAAAF,EAAA3E,OAAA,SAAA2E,EAAAe,IAAAhB,EAAAsC,EAAAxF,EAAAmD,GAAA,UAAAA,EAAA3E,SAAA,WAAAkB,IAAAyD,EAAA3E,OAAA,QAAA2E,EAAAe,IAAA,IAAA2B,UAAA,oCAAAnG,EAAA,aAAA2E,EAAA,IAAAjB,EAAAY,EAAAxS,EAAAwO,EAAAqD,SAAAF,EAAAe,KAAA,aAAAd,EAAAa,KAAA,OAAAd,EAAA3E,OAAA,QAAA2E,EAAAe,IAAAd,EAAAc,IAAAf,EAAAoC,SAAA,KAAAlB,EAAA,IAAAjT,EAAAgS,EAAAc,IAAA,OAAA9S,EAAAA,EAAAuO,MAAAwD,EAAAnD,EAAA8F,YAAA1U,EAAAgB,MAAA+Q,EAAA4C,KAAA/F,EAAAgG,QAAA,WAAA7C,EAAA3E,SAAA2E,EAAA3E,OAAA,OAAA2E,EAAAe,IAAAhB,GAAAC,EAAAoC,SAAA,KAAAlB,GAAAjT,GAAA+R,EAAA3E,OAAA,QAAA2E,EAAAe,IAAA,IAAA2B,UAAA,oCAAA1C,EAAAoC,SAAA,KAAAlB,EAAA,UAAA4B,EAAA/C,GAAA,IAAAlD,EAAA,CAAAkG,OAAAhD,EAAA,SAAAA,IAAAlD,EAAAmG,SAAAjD,EAAA,SAAAA,IAAAlD,EAAAoG,WAAAlD,EAAA,GAAAlD,EAAAqG,SAAAnD,EAAA,SAAAoD,WAAAxG,KAAAE,EAAA,UAAAuG,EAAArD,GAAA,IAAAlD,EAAAkD,EAAAsD,YAAA,GAAAxG,EAAAiE,KAAA,gBAAAjE,EAAAkE,IAAAhB,EAAAsD,WAAAxG,CAAA,UAAA8D,EAAAZ,GAAA,KAAAoD,WAAA,EAAAJ,OAAA,SAAAhD,EAAA4B,QAAAmB,EAAA,WAAAQ,OAAA,YAAA9B,EAAA3E,GAAA,GAAAA,GAAA,KAAAA,EAAA,KAAAmD,EAAAnD,EAAA5O,GAAA,GAAA+R,EAAA,OAAAA,EAAAlR,KAAA+N,GAAA,sBAAAA,EAAA+F,KAAA,OAAA/F,EAAA,IAAA0G,MAAA1G,EAAA1L,QAAA,KAAA9C,GAAA,EAAA4R,EAAA,SAAA2C,IAAA,OAAAvU,EAAAwO,EAAA1L,QAAA,GAAAoL,EAAAzN,KAAA+N,EAAAxO,GAAA,OAAAuU,EAAA3T,MAAA4N,EAAAxO,GAAAuU,EAAApG,MAAA,EAAAoG,EAAA,OAAAA,EAAA3T,MAAA8Q,EAAA6C,EAAApG,MAAA,EAAAoG,CAAA,SAAA3C,EAAA2C,KAAA3C,CAAA,YAAAyC,UAAAX,GAAAlF,GAAA,2BAAAsE,EAAAvS,UAAAwS,EAAA/S,EAAAoT,EAAA,eAAAxS,MAAAmS,EAAAd,cAAA,IAAAjS,EAAA+S,EAAA,eAAAnS,MAAAkS,EAAAb,cAAA,IAAAa,EAAAqC,YAAAnD,EAAAe,EAAAhB,EAAA,qBAAAvD,EAAA4G,oBAAA,SAAA1D,GAAA,IAAAlD,EAAA,mBAAAkD,GAAAA,EAAA2D,YAAA,QAAA7G,IAAAA,IAAAsE,GAAA,uBAAAtE,EAAA2G,aAAA3G,EAAAvK,MAAA,EAAAuK,EAAA8G,KAAA,SAAA5D,GAAA,OAAAzR,OAAAsV,eAAAtV,OAAAsV,eAAA7D,EAAAqB,IAAArB,EAAA8D,UAAAzC,EAAAf,EAAAN,EAAAK,EAAA,sBAAAL,EAAAnR,UAAAN,OAAAoS,OAAAe,GAAA1B,CAAA,EAAAlD,EAAAiH,MAAA,SAAA/D,GAAA,OAAAkC,QAAAlC,EAAA,EAAA2B,EAAAG,EAAAjT,WAAAyR,EAAAwB,EAAAjT,UAAA0Q,GAAA,0BAAAzC,EAAAgF,cAAAA,EAAAhF,EAAAkH,MAAA,SAAAhE,EAAAC,EAAAzD,EAAAlO,EAAA4R,QAAA,IAAAA,IAAAA,EAAA+D,SAAA,IAAA/V,EAAA,IAAA4T,EAAArB,EAAAT,EAAAC,EAAAzD,EAAAlO,GAAA4R,GAAA,OAAApD,EAAA4G,oBAAAzD,GAAA/R,EAAAA,EAAA2U,OAAAV,MAAA,SAAAnC,GAAA,OAAAA,EAAAvD,KAAAuD,EAAA9Q,MAAAhB,EAAA2U,MAAA,KAAAlB,EAAAD,GAAApB,EAAAoB,EAAArB,EAAA,aAAAC,EAAAoB,EAAAxT,GAAA,0BAAAoS,EAAAoB,EAAA,qDAAA5E,EAAA/D,KAAA,SAAAiH,GAAA,IAAAlD,EAAAvO,OAAAyR,GAAAC,EAAA,WAAAzD,KAAAM,EAAAmD,EAAArD,KAAAJ,GAAA,OAAAyD,EAAAiE,UAAA,SAAArB,IAAA,KAAA5C,EAAA7O,QAAA,KAAA4O,EAAAC,EAAAtD,MAAA,GAAAqD,KAAAlD,EAAA,OAAA+F,EAAA3T,MAAA8Q,EAAA6C,EAAApG,MAAA,EAAAoG,CAAA,QAAAA,EAAApG,MAAA,EAAAoG,CAAA,GAAA/F,EAAA2E,OAAAA,EAAAb,EAAA/R,UAAA,CAAA8U,YAAA/C,EAAA2C,MAAA,SAAAzG,GAAA,QAAAqH,KAAA,OAAAtB,KAAA,OAAAN,KAAA,KAAAC,MAAAxC,EAAA,KAAAvD,MAAA,OAAA4F,SAAA,UAAA/G,OAAA,YAAA0F,IAAAhB,EAAA,KAAAoD,WAAAxB,QAAAyB,IAAAvG,EAAA,QAAAmD,KAAA,WAAAA,EAAAmE,OAAA,IAAA5H,EAAAzN,KAAA,KAAAkR,KAAAuD,OAAAvD,EAAA9P,MAAA,WAAA8P,GAAAD,EAAA,EAAAqE,KAAA,gBAAA5H,MAAA,MAAAuD,EAAA,KAAAoD,WAAA,GAAAE,WAAA,aAAAtD,EAAAe,KAAA,MAAAf,EAAAgB,IAAA,YAAAsD,IAAA,EAAA7B,kBAAA,SAAA3F,GAAA,QAAAL,KAAA,MAAAK,EAAA,IAAAmD,EAAA,cAAAsE,EAAA/H,EAAAlO,GAAA,OAAAJ,EAAA6S,KAAA,QAAA7S,EAAA8S,IAAAlE,EAAAmD,EAAA4C,KAAArG,EAAAlO,IAAA2R,EAAA3E,OAAA,OAAA2E,EAAAe,IAAAhB,KAAA1R,CAAA,SAAAA,EAAA,KAAA8U,WAAAhS,OAAA,EAAA9C,GAAA,IAAAA,EAAA,KAAA4R,EAAA,KAAAkD,WAAA9U,GAAAJ,EAAAgS,EAAAoD,WAAA,YAAApD,EAAA8C,OAAA,OAAAuB,EAAA,UAAArE,EAAA8C,QAAA,KAAAmB,KAAA,KAAA5E,EAAA/C,EAAAzN,KAAAmR,EAAA,YAAAG,EAAA7D,EAAAzN,KAAAmR,EAAA,iBAAAX,GAAAc,EAAA,SAAA8D,KAAAjE,EAAA+C,SAAA,OAAAsB,EAAArE,EAAA+C,UAAA,WAAAkB,KAAAjE,EAAAgD,WAAA,OAAAqB,EAAArE,EAAAgD,WAAA,SAAA3D,GAAA,QAAA4E,KAAAjE,EAAA+C,SAAA,OAAAsB,EAAArE,EAAA+C,UAAA,YAAA5C,EAAA,MAAAnO,MAAA,kDAAAiS,KAAAjE,EAAAgD,WAAA,OAAAqB,EAAArE,EAAAgD,WAAA,KAAAR,OAAA,SAAA1C,EAAAlD,GAAA,QAAAmD,EAAA,KAAAmD,WAAAhS,OAAA,EAAA6O,GAAA,IAAAA,EAAA,KAAA3R,EAAA,KAAA8U,WAAAnD,GAAA,GAAA3R,EAAA0U,QAAA,KAAAmB,MAAA3H,EAAAzN,KAAAT,EAAA,oBAAA6V,KAAA7V,EAAA4U,WAAA,KAAAhD,EAAA5R,EAAA,OAAA4R,IAAA,UAAAF,GAAA,aAAAA,IAAAE,EAAA8C,QAAAlG,GAAAA,GAAAoD,EAAAgD,aAAAhD,EAAA,UAAAhS,EAAAgS,EAAAA,EAAAoD,WAAA,UAAApV,EAAA6S,KAAAf,EAAA9R,EAAA8S,IAAAlE,EAAAoD,GAAA,KAAA5E,OAAA,YAAAuH,KAAA3C,EAAAgD,WAAA/B,GAAA,KAAAqD,SAAAtW,EAAA,EAAAsW,SAAA,SAAAxE,EAAAlD,GAAA,aAAAkD,EAAAe,KAAA,MAAAf,EAAAgB,IAAA,gBAAAhB,EAAAe,MAAA,aAAAf,EAAAe,KAAA,KAAA8B,KAAA7C,EAAAgB,IAAA,WAAAhB,EAAAe,MAAA,KAAAuD,KAAA,KAAAtD,IAAAhB,EAAAgB,IAAA,KAAA1F,OAAA,cAAAuH,KAAA,kBAAA7C,EAAAe,MAAAjE,IAAA,KAAA+F,KAAA/F,GAAAqE,CAAA,EAAAsD,OAAA,SAAAzE,GAAA,QAAAlD,EAAA,KAAAsG,WAAAhS,OAAA,EAAA0L,GAAA,IAAAA,EAAA,KAAAmD,EAAA,KAAAmD,WAAAtG,GAAA,GAAAmD,EAAAiD,aAAAlD,EAAA,YAAAwE,SAAAvE,EAAAqD,WAAArD,EAAAkD,UAAAE,EAAApD,GAAAkB,CAAA,kBAAAnB,GAAA,QAAAlD,EAAA,KAAAsG,WAAAhS,OAAA,EAAA0L,GAAA,IAAAA,EAAA,KAAAmD,EAAA,KAAAmD,WAAAtG,GAAA,GAAAmD,EAAA+C,SAAAhD,EAAA,KAAAxD,EAAAyD,EAAAqD,WAAA,aAAA9G,EAAAuE,KAAA,KAAAzS,EAAAkO,EAAAwE,IAAAqC,EAAApD,EAAA,QAAA3R,CAAA,QAAA4D,MAAA,0BAAAwS,cAAA,SAAA5H,EAAAmD,EAAAzD,GAAA,YAAA6F,SAAA,CAAAlC,SAAAsB,EAAA3E,GAAA8F,WAAA3C,EAAA6C,QAAAtG,GAAA,cAAAlB,SAAA,KAAA0F,IAAAhB,GAAAmB,CAAA,GAAArE,CAAA,UAAA6H,GAAA7H,EAAAmD,GAAA,IAAAD,EAAAzR,OAAAwK,KAAA+D,GAAA,GAAAvO,OAAAqW,sBAAA,KAAAtW,EAAAC,OAAAqW,sBAAA9H,GAAAmD,IAAA3R,EAAAA,EAAA0P,QAAA,SAAAiC,GAAA,OAAA1R,OAAAsW,yBAAA/H,EAAAmD,GAAAxR,UAAA,KAAAuR,EAAApD,KAAAkI,MAAA9E,EAAA1R,EAAA,QAAA0R,CAAA,UAAAjI,GAAA+E,GAAA,QAAAmD,EAAA,EAAAA,EAAApI,UAAAzG,OAAA6O,IAAA,KAAAD,EAAA,MAAAnI,UAAAoI,GAAApI,UAAAoI,GAAA,GAAAA,EAAA,EAAA0E,GAAApW,OAAAyR,IAAA,GAAA4B,SAAA,SAAA3B,GAAA3Q,GAAAwN,EAAAmD,EAAAD,EAAAC,GAAA,IAAA1R,OAAAwW,0BAAAxW,OAAAyW,iBAAAlI,EAAAvO,OAAAwW,0BAAA/E,IAAA2E,GAAApW,OAAAyR,IAAA4B,SAAA,SAAA3B,GAAA1R,OAAAC,eAAAsO,EAAAmD,EAAA1R,OAAAsW,yBAAA7E,EAAAC,GAAA,WAAAnD,CAAA,UAAAmI,GAAAzI,EAAAwD,EAAAlD,EAAAmD,EAAA3R,EAAAJ,EAAAqR,GAAA,QAAAW,EAAA1D,EAAAtO,GAAAqR,GAAAc,EAAAH,EAAAhR,KAAA,OAAAsN,GAAA,YAAAM,EAAAN,EAAA,CAAA0D,EAAAzD,KAAAuD,EAAAK,GAAA4D,QAAAhC,QAAA5B,GAAA8B,KAAAlC,EAAA3R,EAAA,UAAAe,GAAAnB,EAAAsO,GAAA,KAAAtO,aAAAsO,GAAA,UAAAmG,UAAA,8CAAAuC,GAAApI,EAAAmD,GAAA,QAAAD,EAAA,EAAAA,EAAAC,EAAA7O,OAAA4O,IAAA,KAAA1R,EAAA2R,EAAAD,GAAA1R,EAAAG,WAAAH,EAAAG,aAAA,EAAAH,EAAAiS,cAAA,YAAAjS,IAAAA,EAAAkS,UAAA,GAAAjS,OAAAC,eAAAsO,EAAAqI,GAAA7W,EAAAD,KAAAC,EAAA,WAAAiD,GAAAuL,EAAAmD,EAAAD,GAAA,OAAAC,GAAAiF,GAAApI,EAAAjO,UAAAoR,GAAAD,GAAAkF,GAAApI,EAAAkD,GAAAzR,OAAAC,eAAAsO,EAAA,aAAA0D,UAAA,IAAA1D,CAAA,UAAA/K,GAAAiO,EAAA1R,EAAAwO,GAAA,OAAAxO,EAAA8W,GAAA9W,GAAA,SAAA0R,EAAAlD,GAAA,GAAAA,IAAA,UAAAkF,GAAAlF,IAAA,mBAAAA,GAAA,OAAAA,EAAA,YAAAA,EAAA,UAAA6F,UAAA,4EAAA7F,GAAA,YAAAA,EAAA,UAAAuI,eAAA,oEAAAvI,CAAA,CAAAwI,CAAAtF,EAAA,CAAAuF,CAAAvF,EAAAwF,KAAAC,QAAAC,UAAApX,EAAAwO,GAAA,GAAAsI,GAAApF,GAAA2D,aAAArV,EAAAwW,MAAA9E,EAAAlD,GAAA,UAAA0I,KAAA,QAAAxF,GAAA2F,QAAA9W,UAAA+W,QAAA7W,KAAA0W,QAAAC,UAAAC,QAAA,0BAAA3F,GAAA,QAAAwF,GAAA,mBAAAxF,CAAA,cAAA6F,KAAA,OAAAA,GAAA,oBAAAJ,SAAAA,QAAA/W,IAAA+W,QAAA/W,IAAAoX,OAAA,SAAAhJ,EAAAkD,EAAAC,GAAA,IAAAqB,EAAA,SAAAtB,EAAA1R,GAAA,SAAAQ,eAAAC,KAAAiR,EAAA1R,IAAA,QAAA0R,EAAAoF,GAAApF,MAAA,OAAAA,CAAA,CAAA+F,CAAAjJ,EAAAkD,GAAA,GAAAsB,EAAA,KAAA9E,EAAAjO,OAAAsW,yBAAAvD,EAAAtB,GAAA,OAAAxD,EAAA9N,IAAA8N,EAAA9N,IAAAK,KAAA8I,UAAAzG,OAAA,EAAA0L,EAAAmD,GAAAzD,EAAAtN,KAAA,GAAA2W,GAAAf,MAAA,KAAAjN,UAAA,UAAAuN,GAAApF,GAAA,OAAAoF,GAAA7W,OAAAsV,eAAAtV,OAAAgT,eAAAuE,OAAA,SAAA9F,GAAA,OAAAA,EAAA8D,WAAAvV,OAAAgT,eAAAvB,EAAA,EAAAoF,GAAApF,EAAA,UAAAhO,GAAAgO,EAAAlD,GAAA,sBAAAA,GAAA,OAAAA,EAAA,UAAA6F,UAAA,sDAAA3C,EAAAnR,UAAAN,OAAAoS,OAAA7D,GAAAA,EAAAjO,UAAA,CAAA8U,YAAA,CAAAzU,MAAA8Q,EAAAQ,UAAA,EAAAD,cAAA,KAAAhS,OAAAC,eAAAwR,EAAA,aAAAQ,UAAA,IAAA1D,GAAAkJ,GAAAhG,EAAAlD,EAAA,UAAAkJ,GAAAhG,EAAAlD,GAAA,OAAAkJ,GAAAzX,OAAAsV,eAAAtV,OAAAsV,eAAAiC,OAAA,SAAA9F,EAAAlD,GAAA,OAAAkD,EAAA8D,UAAAhH,EAAAkD,CAAA,EAAAgG,GAAAhG,EAAAlD,EAAA,UAAAxN,GAAAwN,EAAAmD,EAAAD,GAAA,OAAAC,EAAAkF,GAAAlF,MAAAnD,EAAAvO,OAAAC,eAAAsO,EAAAmD,EAAA,CAAA/Q,MAAA8Q,EAAAvR,YAAA,EAAA8R,cAAA,EAAAC,UAAA,IAAA1D,EAAAmD,GAAAD,EAAAlD,CAAA,UAAAqI,GAAAnF,GAAA,IAAAE,EAAA,SAAAF,EAAAC,GAAA,aAAA+B,GAAAhC,KAAAA,EAAA,OAAAA,EAAA,IAAAlD,EAAAkD,EAAAhR,OAAAiX,aAAA,YAAAnJ,EAAA,KAAAoD,EAAApD,EAAA/N,KAAAiR,EAAAC,GAAA,wBAAA+B,GAAA9B,GAAA,OAAAA,EAAA,UAAAyC,UAAA,kEAAA1C,EAAAiG,OAAAtG,QAAAI,EAAA,CAAAmG,CAAAnG,EAAA,0BAAAgC,GAAA9B,GAAAA,EAAAA,EAAA,GAYO,IAAMkG,GAAoB,SAAAC,GAS7B,SAAAD,EAAYE,GAAsB,IAAAhU,EAoB5B,OApB4BjD,GAAA,KAAA+W,GAI9B9W,GAHAgD,EAAAP,GAAA,KAAAqU,EAAA,CAAME,EAAW,QAGjB,oBAAAhX,GAAAgD,EAAA,iBAAAhD,GAAAgD,EAAA,wBACAA,EAAKgJ,OAAS,OACdhJ,EAAKiU,cAAgB,CACjB,eAAgB,8BAGpBjU,EAAKqH,UAAY,IAAIrC,GAAY,CAC7BE,QAASlF,EAAKkU,YACdvV,OAAQqV,EAAUrV,OAClBwG,YAAa,CACTtG,YAAamV,EAAUnV,YACvBE,gBAAiBiV,EAAUjV,gBAC3BC,aAAcgV,EAAUhV,cAE5BoG,eAAe,EACfC,eAAe,IACjBrF,CACN,CAEA,OAAAN,GAAAoU,EAAAC,GAAA9U,GAAA6U,EAAA,EAAA/X,IAAA,eAAAa,OA5CJsN,EA4CIuD,KAAA6D,MASA,SAAA6C,EACIlU,GAAY,IAAAmU,EAAAC,EAAAC,EAAAC,EAAAhP,UAAA,OAAAkI,KAAAU,MAAA,SAAAqG,GAAA,cAAAA,EAAA3C,KAAA2C,EAAAjE,MAAA,OAeX,OAdD6D,EAAuBG,EAAAzV,OAAA,QAAAb,IAAAsW,EAAA,IAAAA,EAAA,GAEjBF,EAAgB1W,KAAK0J,UAAUoN,KACjC,CACIzL,OAAQrL,KAAKqL,OACblM,SAAUa,KAAKb,SACf8K,KAAM,IACNpH,QAAOiF,GAAAA,GAAA,GACA9H,KAAKsW,eAAa,GAAAjX,GAAA,GACpB+G,GAAiB,2BAEtBjD,KAAMqL,KAAKE,UAAU,CAAEqI,KAAMzU,EAAM0U,eAAgBP,KAEvD,CAAC,GACJI,EAAAjE,KAAA,EAEiBqE,KAAAA,aAAkBjX,KAAKqL,OAAQqL,EAAc1M,IAAK0M,EAAcvT,KAAI2E,GAAAA,GAAA,GAC/E9H,KAAKkX,mBAAiB,IACzBrU,QAAS6T,EAAc7T,WACzB,OACyD,OAJrD8T,EAAGE,EAAAvE,KAITtS,KAAKmX,YAAYR,EAAKS,GAAwBC,cAAaR,EAAApE,OAAA,SAEpD6E,GAAwBC,SAASZ,EAAI5T,SAAqB,wBAAA8T,EAAAzC,OAAA,GAAAoC,EAAA,SAjCrEgB,EA5CJ,eAAAzH,EAAA,KAAAlD,EAAAjF,UAAA,WAAAoM,SAAA,SAAAhE,EAAA3R,GAAA,IAAAJ,EAAAsO,EAAAsI,MAAA9E,EAAAlD,GAAA,SAAA4K,EAAAlL,GAAAyI,GAAA/W,EAAA+R,EAAA3R,EAAAoZ,EAAAC,EAAA,OAAAnL,EAAA,UAAAmL,EAAAnL,GAAAyI,GAAA/W,EAAA+R,EAAA3R,EAAAoZ,EAAAC,EAAA,QAAAnL,EAAA,CAAAkL,OAAA,OA8EK,SAzBiBE,GAAA,OAAAH,EAAA3C,MAAC,KAADjN,UAAA,KAAAxJ,IAAA,cAAAa,MA2BlB,SAAsB2D,EAAqDgV,GACvE,IAjFR7H,EAAAlD,EAAAmD,EAAA3R,EAAAgT,EAkFQ,KAlFRtB,EAiFqBoG,EAjFrBtJ,EAiFqB,cAjFrBmD,EAiFqB,KAjFrBqB,EAAAuE,GAAAT,GAAA,GAAA9W,EAiFqB,GAjFrB0R,EAAAnR,UAAAmR,GAAAlD,EAAAmD,GAAA,EAAA3R,EAAA,SAAA0R,GAAA,OAAAsB,EAAAwD,MAAA7E,EAAAD,EAAA,EAAAsB,GAiFqB,CAAqBzO,EAAUgV,IAExC,OAAO,EAGX,IAAMC,EAAYjV,EAASkV,WACrBhV,EAAQF,EAASG,OACvB,GAAI8U,GAAa,MAAQA,GAAa,KAAM,CAGxC,IAAME,EACDjV,EAAME,SAAuBF,EAAMjB,SAAuBiB,EAAMG,OAGrE,GAAqB,8BAAjBH,EAAMG,OACN,MAAM,IAAI0H,GAAsBoN,EAAcjV,EAAMG,QAIxD,MAAM,IAAI+U,GAA2BD,EAAcjV,EAAMG,OAAkB2U,EAC/E,CAEA,GAAkB,OAAdC,EACA,MAAM,IAAIG,GACN,sCACA,uBACAJ,GAIR,OAAO,CACX,KApEA,IA5CJrL,EA4CIiL,CAoEC,CApG4B,CCYX,WAsClB,SAXA,SAAAS,EAAY5B,EAAsBE,gGAAqBnX,CAAA,KAAA6Y,GAAA5Y,GAAA,yBAAAA,GAAA,2BAZvDA,GAAA,yBACqC,CACjC6Y,aAAc,SACjB7Y,GAAA,yBAUGW,KAAKqW,UAAYA,EACjBrW,KAAKuW,YAAcA,EAIOjW,MAAtB+V,EAAUlX,WACVa,KAAKmY,UAAY9B,EAAUlX,SAEnC,KAEA,EAAAf,IAAA,WAAAK,IASA,WAMI,OALsB6B,MAAlBN,KAAKmY,YACLnY,KAAKmY,UAAY,IAAIjZ,EAAS,WAADM,OACdQ,KAAKuW,YAAW,KAAA/W,OAAIQ,KAAKqW,UAAUrV,OAAM,oBAGrDhB,KAAKmY,SAChB,EAEA3X,IAQA,SAAoBrB,GAChBa,KAAKmY,UAAYhZ,CACrB,GAcA,CAAAf,IAAA,cAAAa,MACA,SAAsB2D,EAAqDgV,GACvE,IAAMQ,EAAiBxV,EAASwV,OAC1BP,EAAoBjV,EAASkV,WAC7BC,EAAuBnV,EAASE,MAMtC,GAAIsV,GAAU,KAAOA,EAAS,KAAuB,IAAhBL,GAAoC,IAAdF,EACvD,OAAO,EAGX,OAAQA,GACJ,KAAK3T,EAAiBM,aACtB,KAAKN,EAAiBO,mBACtB,KAAKP,EAAiBQ,WACtB,KAAKR,EAAiBS,mBAClB,MAAM,IAAInB,EAAaqU,GAC3B,KAAK1T,EAAaS,gBAClB,KAAKT,EAAaU,UAClB,KAAKV,EAAaW,cAClB,KAAKX,EAAaY,oBACd,MAAM,IAAIrB,EAASmU,GACvB,KAAKzT,EAAaY,gBAClB,KAAKZ,EAAaa,kBAClB,KAAKb,EAAac,gBAClB,KAAKd,EAAae,oBAClB,KAAKf,EAAagB,iBAClB,KAAKhB,EAAaiB,sBAClB,KAAKjB,EAAakB,iBAClB,KAAKlB,EAAamB,YACd,MAAM,IAAI3B,EAASiU,GACvB,KAAKxT,EAAamB,gBAClB,KAAKnB,EAAaoB,iBAClB,KAAKpB,EAAaqB,4BACd,MAAM,IAAI5B,EAAS+T,GACvB,KAAKvT,EAAeqB,kBACpB,KAAKrB,EAAesB,wBAChB,MAAM,IAAI5B,EAAW6T,GAG7B,OAAO,CACX,iGAAC,CA5HiB,ID8FTP,GAAuB,WAgEhC,SAAAA,EACIe,EACAC,EACAC,EACAjW,EACAkW,EACAC,EACA3H,EACA7R,EACAyZ,GACFtZ,GAAA,KAAAkY,GAzEFjY,GAAA,mBAKAA,GAAA,wBAMAA,GAAA,gCAKAA,GAAA,oBAKAA,GAAA,wBAOAA,GAAA,4BAKAA,GAAA,oBAKAA,GAAA,qBAKAA,GAAA,uBA+BIW,KAAKqY,IAAMA,EACXrY,KAAKsY,SAAWA,EAChBtY,KAAKuY,iBAAmBA,EACxBvY,KAAKsC,KAAOA,EACZtC,KAAKwY,SAAWA,EAChBxY,KAAKyY,aAAeA,EACpBzY,KAAK8Q,KAAOA,EACZ9Q,KAAKf,MAAQA,EACbe,KAAK0Y,QAAUA,CACnB,CAEA,OAAApX,GAAAgW,EAAA,OAAAlZ,IAAA,WAAAa,MAQA,SAAgB8D,GACZ,IAAM4V,EAAY5V,EAAK6V,UAEvB,OAAO,IAAItB,EACPqB,EAAUE,IACVF,EAAUG,SACVH,EAAUI,iBACVJ,EAAU5B,KACV4B,EAAUK,SACVL,EAAUM,aACVN,EAAUO,KACVP,EAAUQ,MACVR,EAAUS,QAElB,IAAC,CA5G+B,GA+GvBpB,GAA0B,SAAA3I,GAUnC,SAAA2I,EAAYnW,EAAiBO,EAAcwV,GAAoC,IAAAtU,EAGjD,OAHiDlE,GAAA,KAAA4Y,GACvD3Y,GAApBiE,EAAAxB,GAAA,KAAAkW,EAAA,CAAMnW,EAASO,IAAK,oBACpBkB,EAAKhB,KAAO,6BACZgB,EAAKsU,UAAYA,EAAStU,CAC9B,CAAC,OAAAvB,GAAAiW,EAAA3I,GAAA/N,GAAA0W,EAAA,CAdkC,CAAS7V,GAoB3CiV,GAAuB,SAAvBA,GAAuB,OAAvBA,EAAuB,4BAAvBA,CAAuB,EAAvBA,IAAuB","sources":["webpack://k6-jslib-aws/webpack/bootstrap","webpack://k6-jslib-aws/webpack/runtime/compat get default export","webpack://k6-jslib-aws/webpack/runtime/define property getters","webpack://k6-jslib-aws/webpack/runtime/hasOwnProperty shorthand","webpack://k6-jslib-aws/webpack/runtime/make namespace object","webpack://k6-jslib-aws/./src/internal/endpoint.ts","webpack://k6-jslib-aws/./src/internal/config.ts","webpack://k6-jslib-aws/external commonjs \"k6/html\"","webpack://k6-jslib-aws/./src/internal/error.ts","webpack://k6-jslib-aws/external commonjs \"k6/crypto\"","webpack://k6-jslib-aws/./src/internal/constants.ts","webpack://k6-jslib-aws/./src/internal/signature.ts","webpack://k6-jslib-aws/./src/internal/http.ts","webpack://k6-jslib-aws/./src/internal/utils.ts","webpack://k6-jslib-aws/external commonjs \"k6/http\"","webpack://k6-jslib-aws/./src/internal/ssm.ts","webpack://k6-jslib-aws/./src/internal/client.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/**\n * Represents an AWS service endpoint, providing utilities for parsing and handling URL details.\n */\nexport class Endpoint {\n    private _protocol: string\n    private _hostname: string\n    private _port?: number\n\n    // Default protocol, this can be globally changed as per application requirements\n    private static readonly DEFAULT_PROTOCOL = 'https' // Set this as per AWS.config\n\n    /**\n    //  * Constructs a new Endpoint instance.\n     *\n     * @param {string} endpoint - The URL to construct an endpoint from. If the URL omits a protocol, the default protocol will be used.\n     */\n    constructor(endpoint: string) {\n        const isDefaultProtocol =\n            !endpoint.startsWith('http://') && !endpoint.startsWith('https://')\n        const completeUrl = isDefaultProtocol\n            ? `${Endpoint.DEFAULT_PROTOCOL}://${endpoint}`\n            : endpoint\n\n        const protocolMatch = completeUrl.match(/^https?:/)\n        const hostAndPath = completeUrl.replace(/^https?:\\/\\//, '')\n        const [hostnameWithPort] = hostAndPath.split('/')\n\n        this._protocol = protocolMatch ? protocolMatch[0].slice(0, -1) : Endpoint.DEFAULT_PROTOCOL\n        this._hostname = hostnameWithPort.split(':')[0]\n        this._port = hostnameWithPort.split(':')[1]\n            ? parseInt(hostnameWithPort.split(':')[1])\n            : undefined\n    }\n\n    /**\n     * Creates a new Endpoint instance that is a copy of the current one.\n     *\n     * @returns {Endpoint} The copied Endpoint.\n     */\n    public copy(): Endpoint {\n        return new Endpoint(this.href)\n    }\n\n    /**\n     * Gets the host portion of the endpoint including the port.\n     *\n     * @returns {string} The host portion of the endpoint including the port.\n     */\n    public get host(): string {\n        return this._port ? `${this._hostname}:${this._port}` : this._hostname\n    }\n\n    /**\n     * Sets the host portion of the endpoint including the port.\n     *\n     * @param {string} value - The value to set for the host.\n     */\n    public set host(value: string) {\n        const [hostname, port] = value.split(':')\n        this._hostname = hostname\n        this._port = port ? parseInt(port) : undefined\n    }\n\n    /**\n     * Gets the host portion of the endpoint without the port.\n     *\n     * @returns {string} The host portion of the endpoint.\n     */\n    public get hostname(): string {\n        return this._hostname\n    }\n\n    /**\n     * Sets the host portion of the endpoint without the port.\n     *\n     * @param {string} value - The value to set for the hostname.\n     */\n    public set hostname(value: string) {\n        this._hostname = value\n    }\n\n    /**\n     * Gets the full URL of the endpoint.\n     *\n     * @returns {string} The full URL of the endpoint.\n     */\n    public get href(): string {\n        return `${this.protocol}://${this.host}`\n    }\n\n    /**\n     * Sets the full URL of the endpoint.\n     *\n     * @param {string} value - The value to set for the full URL.\n     */\n    public set href(value: string) {\n        const protocolMatch = value.match(/^https?:/)\n        const withoutProtocol = value.replace(/^https?:\\/\\//, '')\n        const [hostnameWithPort] = withoutProtocol.split('/')\n\n        this._protocol = protocolMatch ? protocolMatch[0].slice(0, -1) : Endpoint.DEFAULT_PROTOCOL // remove the trailing colon\n        this._hostname = hostnameWithPort.split(':')[0]\n        this._port = hostnameWithPort.split(':')[1]\n            ? parseInt(hostnameWithPort.split(':')[1])\n            : undefined\n    }\n\n    /**\n     * Gets the port of the endpoint.\n     *\n     * @returns {number|undefined} The port of the endpoint.\n     */\n    public get port(): number | undefined {\n        return this._port\n    }\n\n    /**\n     * Sets the port of the endpoint.\n     *\n     * @param {number|undefined} value - The value to set for the port.\n     */\n    public set port(value: number | undefined) {\n        this._port = value\n    }\n\n    /**\n     * Gets the protocol (http or https) of the endpoint URL.\n     *\n     * @returns {string} The protocol of the endpoint URL.\n     */\n    public get protocol(): string {\n        return this._protocol\n    }\n\n    /**\n     * Sets the protocol (http or https) of the endpoint URL.\n     *\n     * @param {string} value - The value to set for the protocol.\n     */\n    public set protocol(value: string) {\n        this._protocol = value\n    }\n}\n","import { HTTPScheme } from './http'\nimport { Endpoint } from './endpoint'\n\n/** Class holding an AWS connection information */\nexport class AWSConfig {\n    /**\n     * The AWS region to connect to, as listed: https://docs.aws.amazon.com/general/latest/gr/rande.html\n     *\n     * @type {string}\n     */\n    region: string\n\n    /**\n     * Your user's AWS access key id credential.\n     *\n     * @type {string}\n     */\n    accessKeyId: string\n\n    /**\n     * Your user's AWS secret access key credential.\n     *\n     * @type {string}\n     */\n    secretAccessKey: string\n\n    /**\n     * Your user's AWS session token credential.\n     *\n     * @type {string}\n     */\n    sessionToken?: string\n\n    /**\n     * The AWS hostname to connect to.\n     *\n     * @type {string} ['amazonaws.com']\n     */\n    endpoint?: Endpoint\n\n    /**\n     * fromEnvironment creates an AWSConfig from the environment variables.\n     *\n     * It expects to find the following compulsory environment variables:\n     *  * AWS_REGION\n     *  * AWS_ACCESS_KEY_ID\n     *  * AWS_SECRET_ACCESS_KEY\n     *\n     * If set, the following optional environment variables are also used:\n     *  * AWS_SESSION_TOKEN\n     *\n     * Finally, the options parameter allows to explicitly set the scheme and endpoint\n     * to use when connecting to AWS.\n     *\n     * @param options {AWSConnectionOptions}\n     * @returns\n     */\n    static fromEnvironment(options?: AWSConnectionOptions): AWSConfig {\n        const region = __ENV.AWS_REGION\n        const accessKeyId = __ENV.AWS_ACCESS_KEY_ID\n        const secretAccessKey = __ENV.AWS_SECRET_ACCESS_KEY\n        const sessionToken: string | undefined = __ENV.AWS_SESSION_TOKEN\n        const endpoint: Endpoint | string | undefined = options?.endpoint\n\n        return new AWSConfig({\n            region,\n            accessKeyId,\n            secretAccessKey,\n            sessionToken,\n            endpoint: endpoint,\n        })\n    }\n\n    /**\n     * Create an AWSConfig.\n     *\n     * @param {AWSConfigOptions} options - configuration attributes to use when interacting with AWS' APIs\n     * @throws {InvalidArgumentException}\n     */\n    constructor(options: AWSConfigOptions) {\n        if (!options.region || options.region === '') {\n            throw new InvalidAWSConfigError(\n                `invalid AWS region; reason: expected a valid AWS region name (e.g. \"us-east-1\"), got \\`${options.region}\\``\n            )\n        }\n\n        if (!options.accessKeyId || options.accessKeyId === '') {\n            throw new InvalidAWSConfigError(\n                `invalid AWS access key ID; reason: expected a non empty string, got \\`${options.accessKeyId}\\``\n            )\n        }\n\n        if (options.accessKeyId.length < 16 || options.accessKeyId.length > 128) {\n            throw new InvalidAWSConfigError(\n                `invalid AWS access key ID; reason: size should be between 16 and 128 characters, got ${options.accessKeyId.length}`\n            )\n        }\n\n        if (!options.secretAccessKey || options.secretAccessKey === '') {\n            throw new InvalidAWSConfigError(\n                `invalid AWS secret access key; reason: expected a non empty string, got \\`${options.secretAccessKey}\\``\n            )\n        }\n\n        this.region = options.region\n        this.accessKeyId = options.accessKeyId\n        this.secretAccessKey = options.secretAccessKey\n\n        if (options.sessionToken !== undefined) {\n            this.sessionToken = options.sessionToken\n        }\n\n        if (options.endpoint !== undefined) {\n            if (typeof options.endpoint === 'string') {\n                this.endpoint = new Endpoint(options.endpoint)\n            } else {\n                this.endpoint = options.endpoint\n            }\n        }\n    }\n}\n\n/**\n * Interface representing AWSConfig options\n */\nexport interface AWSConfigOptions extends AWSConnectionOptions {\n    /**\n     * The AWS region to connect to, as listed: https://docs.aws.amazon.com/general/latest/gr/rande.html\n     *\n     * @type {string}\n     */\n    region: string\n\n    /**\n     * Your user's AWS access key id credential.\n     *\n     * @type {string}\n     */\n    accessKeyId: string\n\n    /**\n     * Your user's AWS secret access key credential.\n     *\n     * @type {string}\n     */\n    secretAccessKey: string\n\n    /**\n     * Your user's AWS session token credential.\n     *\n     * @type {string}\n     */\n    sessionToken?: string\n}\n\n/**\n * Interface representing AWS connection options\n */\nexport interface AWSConnectionOptions {\n    /**\n     * The HTTP scheme to use when connecting to AWS.\n     *\n     * @type {HTTPScheme}\n     */\n    scheme?: HTTPScheme\n\n    /**\n     * The AWS hostname to connect to.\n     *\n     * @type {string}\n     */\n    endpoint?: Endpoint | string\n}\n\n/** Class representing an invalid AWS configuration */\nexport class InvalidAWSConfigError extends Error {\n    constructor(message: string) {\n        super(message)\n    }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"k6/html\");","import { JSONObject } from './json'\nimport { parseHTML } from 'k6/html'\nimport { Response } from 'k6/http'\n\n/**\n * Base class to derive errors from\n *\n * Inspired from AWS official error types, as\n * described in:\n *   * https://aws.amazon.com/blogs/developer/service-error-handling-modular-aws-sdk-js/\n *   * https://github.com/aws/aws-sdk-js/blob/master/lib/error.d.ts\n */\nexport class AWSError extends Error {\n    /**\n     * Error code issued by the service (if any)\n     */\n    code?: string\n\n    /**\n     * Create an AWSError\n     *\n     * @param {string} message - A longer human readable error message.\n     * @param {string?} code - A unique short code representing the error that was emitted\n     */\n    constructor(message: string, code?: string) {\n        super(message)\n        this.name = 'AWSError'\n        this.code = code\n    }\n\n    /**\n     * Parse an AWSError from an XML document\n     *\n     * @param  {string} xmlDocument - Serialized XML document to parse the error from\n     * @returns {AWSError} - The parsed AWSError object\n     */\n    static parseXML(xmlDocument: string): AWSError {\n        const doc = parseHTML(xmlDocument)\n        return new AWSError(doc.find('Message').text(), doc.find('Code').text())\n    }\n\n    /**\n     * Parse an AWSError from a Response object\n     *\n     * @param {Response} response - The Response object to parse the error from\n     * @returns {AWSError} - The parsed AWSError object\n     */\n    static parse(response: Response): AWSError {\n        if (response.headers['Content-Type'] === 'application/json') {\n            const error = (response.json() as JSONObject) || {}\n            const message =\n                error.Message ||\n                error.message ||\n                error.__type ||\n                'An error occurred on the server side'\n            const code = response.headers['X-Amzn-Errortype'] || error.__type\n            return new AWSError(message as string, code as string)\n        } else {\n            return AWSError.parseXML(response.body as string)\n        }\n    }\n}\n\n/**\n * Base class for network errors as produced by k6.\n *\n * Based on the network error handling in k6, as described in:\n * https://grafana.com/docs/k6/latest/javascript-api/error-codes/\n *\n * @typeparam N - The name of the network error\n * @typeparam K - The kind of the network error\n */\nexport class NetworkError<N extends NetworkErrorName, K extends ErrorKind> extends Error {\n    code: K\n    name: N\n\n    /**\n     * Create a NetworkError\n     *\n     * @param {N} name - The name of the network error\n     * @param {K} code - The kind of the network error\n     */\n    constructor(name: N, code: K) {\n        super(ErrorMessages[code] || 'An unknown error occurred')\n        this.name = name\n        this.code = code\n    }\n}\n\n/**\n * Represents a general network error, as described in:\n * https://grafana.com/docs/k6/latest/javascript-api/error-codes/\n */\nexport class GeneralError extends NetworkError<'GeneralError', GeneralErrorKind> {\n    /**\n     * Create a GeneralError\n     *\n     * @param {GeneralErrorKind} code - The kind of the general error\n     */\n    constructor(code: GeneralErrorKind) {\n        super('GeneralError', code)\n    }\n}\n\n/**\n * Represents a DNS-related network error, as described in:\n * https://grafana.com/docs/k6/latest/javascript-api/error-codes/\n */\nexport class DNSError extends NetworkError<'DNSError', DNSErrorKind> {\n    /**\n     * Create a DNSError\n     *\n     * @param {DNSErrorKind} code - The kind of the DNS error\n     */\n    constructor(code: DNSErrorKind) {\n        super('DNSError', code)\n    }\n}\n\n/**\n * Represents a TCP-related network error, as described in:\n * https://grafana.com/docs/k6/latest/javascript-api/error-codes/\n */\nexport class TCPError extends NetworkError<'TCPError', TCPErrorKind> {\n    /**\n     * Create a TCPError\n     *\n     * @param {TCPErrorKind} code - The kind of the TCP error\n     */\n    constructor(code: TCPErrorKind) {\n        super('TCPError', code)\n    }\n}\n\n/**\n * Represents a TLS-related network error, as described in:\n * https://grafana.com/docs/k6/latest/javascript-api/error-codes/\n */\nexport class TLSError extends NetworkError<'TLSError', TLSErrorKind> {\n    /**\n     * Create a TLSError\n     *\n     * @param {TLSErrorKind} code - The kind of the TLS error\n     */\n    constructor(code: TLSErrorKind) {\n        super('TLSError', code)\n    }\n}\n\n/**\n * Represents an HTTP/2-related network error, as described in:\n * https://grafana.com/docs/k6/latest/javascript-api/error-codes/\n */\nexport class HTTP2Error extends NetworkError<'HTTP2Error', HTTP2ErrorKind> {\n    /**\n     * Create an HTTP2Error\n     *\n     * @param {HTTP2ErrorKind} code - The kind of the HTTP/2 error\n     */\n    constructor(code: HTTP2ErrorKind) {\n        super('HTTP2Error', code)\n    }\n}\n\n/**\n * Represents the name of a network error, as described in:\n * https://grafana.com/docs/k6/latest/javascript-api/error-codes/\n */\ntype NetworkErrorName = 'GeneralError' | 'DNSError' | 'TCPError' | 'TLSError' | 'HTTP2Error'\n\n/**\n * Represents the kind of a network error, as described in:\n * https://grafana.com/docs/k6/latest/javascript-api/error-codes/\n */\ntype ErrorKind = GeneralErrorKind | DNSErrorKind | TCPErrorKind | TLSErrorKind | HTTP2ErrorKind\n\n/**\n * Represents the kind of a general network error, as described in:\n * https://grafana.com/docs/k6/latest/javascript-api/error-codes/\n */\nexport enum GeneralErrorKind {\n    GenericError = 1000,\n    NonTCPNetworkError = 1010,\n    InvalidURL = 1020,\n    HTTPRequestTimeout = 1050,\n}\n\n/**\n * Represents the kind of a DNS-related network error, as described in:\n * https://grafana.com/docs/k6/latest/javascript-api/error-codes/\n */\nexport enum DNSErrorKind {\n    GenericDNSError = 1100,\n    NoIPFound = 1101,\n    BlacklistedIP = 1110,\n    BlacklistedHostname = 1111,\n}\n\n/**\n * Represents the kind of a TCP-related network error, as described in:\n * https://grafana.com/docs/k6/latest/javascript-api/error-codes/\n */\nexport enum TCPErrorKind {\n    GenericTCPError = 1200,\n    BrokenPipeOnWrite = 1201,\n    UnknownTCPError = 1202,\n    GeneralTCPDialError = 1210,\n    DialTimeoutError = 1211,\n    DialConnectionRefused = 1212,\n    DialUnknownError = 1213,\n    ResetByPeer = 1220,\n}\n\n/**\n * Represents the kind of a TLS-related network error, as described in:\n * https://grafana.com/docs/k6/latest/javascript-api/error-codes/\n */\nexport enum TLSErrorKind {\n    GeneralTLSError = 1300,\n    UnknownAuthority = 1310,\n    CertificateHostnameMismatch = 1311,\n}\n\n/**\n * Represents the kind of an HTTP/2-related network error, as described in:\n * https://grafana.com/docs/k6/latest/javascript-api/error-codes/\n */\nexport enum HTTP2ErrorKind {\n    GenericHTTP2Error = 1600,\n    GeneralHTTP2GoAwayError = 1610,\n}\n\n/**\n * Error messages for each kind of network error, as described in:\n * https://grafana.com/docs/k6/latest/javascript-api/error-codes/\n */\nconst ErrorMessages: { [key in ErrorKind]: string } = {\n    [GeneralErrorKind.GenericError]: 'A generic error that isn’t any of the ones listed below',\n    [GeneralErrorKind.NonTCPNetworkError]:\n        'A non-TCP network error - this is a placeholder and there is no error currently known to trigger it',\n    [GeneralErrorKind.InvalidURL]: 'An invalid URL was specified',\n    [GeneralErrorKind.HTTPRequestTimeout]: 'The HTTP request has timed out',\n    [DNSErrorKind.GenericDNSError]: 'A generic DNS error that isn’t any of the ones listed below',\n    [DNSErrorKind.NoIPFound]: 'No IP for the provided host was found',\n    [DNSErrorKind.BlacklistedIP]:\n        'Blacklisted IP was resolved or a connection to such was tried to be established',\n    [DNSErrorKind.BlacklistedHostname]: 'Blacklisted hostname using The Block Hostnames option',\n    [TCPErrorKind.GenericTCPError]: 'A generic TCP error that isn’t any of the ones listed below',\n    [TCPErrorKind.BrokenPipeOnWrite]:\n        'A “broken pipe” on write - the other side has likely closed the connection',\n    [TCPErrorKind.UnknownTCPError]:\n        'An unknown TCP error - We got an error that we don’t recognize but it is from the operating system and has errno set on it. The message in error includes the operation(write,read) and the errno, the OS, and the original message of the error',\n    [TCPErrorKind.GeneralTCPDialError]: 'General TCP dial error',\n    [TCPErrorKind.DialTimeoutError]: 'Dial timeout error - the timeout for the dial was reached',\n    [TCPErrorKind.DialConnectionRefused]:\n        'Dial connection refused - the connection was refused by the other party on dial',\n    [TCPErrorKind.DialUnknownError]: 'Dial unknown error',\n    [TCPErrorKind.ResetByPeer]:\n        'Reset by peer - the connection was reset by the other party, most likely a server',\n    [TLSErrorKind.GeneralTLSError]: 'General TLS error',\n    [TLSErrorKind.UnknownAuthority]: 'Unknown authority - the certificate issuer is unknown',\n    [TLSErrorKind.CertificateHostnameMismatch]: 'The certificate doesn’t match the hostname',\n    [HTTP2ErrorKind.GenericHTTP2Error]:\n        'A generic HTTP/2 error that isn’t any of the ones listed below',\n    [HTTP2ErrorKind.GeneralHTTP2GoAwayError]: 'A general HTTP/2 GoAway error',\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"k6/crypto\");","/**\n * Standard Amazon AWS query parameter names\n */\nexport const AMZ_ALGORITHM_QUERY_PARAM = 'X-Amz-Algorithm'\nexport const AMZ_CREDENTIAL_QUERY_PARAM = 'X-Amz-Credential'\nexport const AMZ_DATE_QUERY_PARAM = 'X-Amz-Date'\nexport const AMZ_EXPIRES_QUERY_PARAM = 'X-Amz-Expires'\nexport const AMZ_SIGNATURE_QUERY_PARAM = 'X-Amz-Signature'\nexport const AMZ_SIGNED_HEADERS_QUERY_PARAM = 'X-Amz-SignedHeaders'\nexport const AMZ_TARGET_QUERY_PARAM = 'X-Amz-Target'\nexport const AMZ_TOKEN_QUERY_PARAM = 'X-Amz-Security-Token'\n\n/**\n * Standard Amazon AWS header names\n */\nexport const AMZ_CONTENT_SHA256_HEADER = 'x-amz-content-sha256'\nexport const AMZ_DATE_HEADER = AMZ_DATE_QUERY_PARAM.toLowerCase()\nexport const AMZ_SIGNATURE_HEADER = AMZ_SIGNATURE_QUERY_PARAM.toLowerCase()\nexport const AMZ_TARGET_HEADER = AMZ_TARGET_QUERY_PARAM.toLowerCase()\nexport const AMZ_TOKEN_HEADER = AMZ_TOKEN_QUERY_PARAM.toLowerCase()\n\n/**\n * Common HTTP headers we rely on in the signing process\n */\nexport const AUTHORIZATION_HEADER = 'authorization'\nexport const DATE_HEADER = 'date'\n\n/**\n * Lists the headers that are generated as part of the signature process.\n */\nexport const GENERATED_HEADERS = [AUTHORIZATION_HEADER, AMZ_DATE_HEADER, DATE_HEADER]\nexport const HOST_HEADER = 'host'\n\n/**\n * Lists the headers that should never be included in the\n * request signature signature process.\n */\nexport const ALWAYS_UNSIGNABLE_HEADERS = {\n    authorization: true,\n    'cache-control': true,\n    connection: true,\n    expect: true,\n    from: true,\n    'keep-alive': true,\n    'max-forwards': true,\n    pragma: true,\n    referer: true,\n    te: true,\n    trailer: true,\n    'transfer-encoding': true,\n    upgrade: true,\n    'user-agent': true,\n    'x-amzn-trace-id': true,\n}\n\n/**\n * Signature specific constants included in the signing process\n */\nexport const KEY_TYPE_IDENTIFIER = 'aws4_request'\nexport const SIGNING_ALGORITHM_IDENTIFIER = 'AWS4-HMAC-SHA256'\n\n/**\n * Maximum time to live of a signed request in seconds: 7 days.\n */\nexport const MAX_PRESIGNED_TTL = 60 * 60 * 24 * 7\n\n/**\n * SHA256 hash of an empty string (so we don't waste cycles recomputing it)\n */\nexport const EMPTY_SHA256 = 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\n\n/**\n * SHA256 hash of the unsigned payload constant (so we don't waste cycles recomputing it)\n */\nexport const UNSIGNED_PAYLOAD_SHA256 =\n    '5a41b0751e4537c6ff868564ab44a4d4ecceec2ec5b1c5f74d97422968e04237'\n\nexport const UNSIGNED_PAYLOAD = 'UNSIGNED-PAYLOAD'\n","import crypto from 'k6/crypto'\n\nimport * as constants from './constants'\nimport { AWSError } from './error'\nimport { hasHeader, HTTPHeaderBag, HTTPRequest, QueryParameterBag, SignedHTTPRequest } from './http'\nimport { isArrayBuffer } from './utils'\n\n/**\n * SignatureV4 can be used to sign HTTP requests and presign URLs using the AWS Signature\n * Version 4 signing process.\n *\n * It offers two signing methods:\n * - sign: signs the request headers and payload\n * - presign: returns a presigned (authorization information contained in the query string) URL\n *\n * @see https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html\n */\nexport class SignatureV4 {\n    /**\n     * The name of the service to sign for.\n     */\n    private readonly service: string\n\n    /**\n     * The name of the region to sign for.\n     */\n    private readonly region: string\n\n    /**\n     * The credentials with which the request should be signed.\n     */\n    private readonly credentials: Credentials\n\n    /**\n     * Whether to uri-escape the request URI path as part of computing the\n     * canonical request string. This is required for every AWS service, except\n     * Amazon S3, as of late 2017.\n     *\n     * @default [true]\n     */\n    private readonly uriEscapePath: boolean\n\n    /**\n     * Whether to calculate a checksum of the request body and include it as\n     * either a request header (when signing) or as a query string parameter\n     * (when presigning). This is required for AWS Glacier and Amazon S3 and optional for\n     * every other AWS service as of late 2017.\n     *\n     * @default [true]\n     */\n    private readonly applyChecksum: boolean\n\n    // TODO: uriEscapePath and applyChecksum should not be present in the constructor\n    constructor({\n        service,\n        region,\n        credentials,\n        uriEscapePath,\n        applyChecksum,\n    }: SignatureV4Options) {\n        this.service = service\n        this.region = region\n        this.credentials = credentials\n        this.uriEscapePath = typeof uriEscapePath === 'boolean' ? uriEscapePath : true\n        this.applyChecksum = typeof applyChecksum === 'boolean' ? applyChecksum : true\n    }\n\n    /**\n     * Includes AWS v4 signing information to the provided HTTP request.\n     *\n     * This method adds an Authorization header to the request, containing\n     * the signature and other signing information. It also returns a preformatted\n     * URL that can be used to make the k6 http request.\n     *\n     * This method mutates the request object.\n     *\n     * @param request {HTTPRequest} The request to sign.\n     * @param options {Partial<RequestSigningOptions>} Options for signing the request.\n     * @returns {SignedHTTPRequest} The signed request.\n     */\n    sign(request: HTTPRequest, options: Partial<RequestSigningOptions> = {}): SignedHTTPRequest {\n        // Set default values for options which are not provided by the user.\n        const defaultOptions = {\n            signingDate: new Date(),\n            unsignableHeaders: new Set<string>(),\n            signableHeaders: new Set<string>(),\n        }\n\n        // Merge default options with the ones maybe provided by the user.\n        const finalOptions = { ...defaultOptions, ...options }\n\n        const { longDate, shortDate }: DateInfo = formatDate(finalOptions.signingDate)\n        const service = finalOptions.signingService || this.service\n        const region = finalOptions.signingRegion || this.region\n        const scope = `${shortDate}/${region}/${service}/${constants.KEY_TYPE_IDENTIFIER}`\n\n        // Required by the specification:\n        //   \"For HTTP/1.1 requests, you must include the host header at a minimum.\n        //   Standard headers like content-type are optional.\n        //   For HTTP/2 requests, you must include the :authority header instead of\n        //   the host header. Different services might require other headers.\"\n        if (!request.headers[constants.HOST_HEADER]) {\n            request.headers[constants.HOST_HEADER] = request.endpoint.hostname\n        }\n\n        // Filter out headers that will be generated and managed by the signing process.\n        // If the user provide any of those as part of the HTTPRequest's headers, they\n        // will be ignored.\n        for (const headerName of Object.keys(request.headers)) {\n            if (constants.GENERATED_HEADERS.indexOf(headerName.toLowerCase()) > -1) {\n                delete request.headers[headerName]\n            }\n        }\n\n        request.headers[constants.AMZ_DATE_HEADER] = longDate\n        if (this.credentials.sessionToken) {\n            request.headers[constants.AMZ_TOKEN_HEADER] = this.credentials.sessionToken\n        }\n\n        // If the request body is a typed array, we need to convert it to a buffer\n        // so that we can calculate the checksum.\n        if (ArrayBuffer.isView(request.body)) {\n            request.body = request.body.buffer\n        }\n\n        // Ensure we avoid passing undefined to the crypto hash function.\n        if (!request.body) {\n            request.body = ''\n        }\n\n        const payloadHash = this.computePayloadHash(request)\n        if (\n            !hasHeader(constants.AMZ_CONTENT_SHA256_HEADER, request.headers) &&\n            this.applyChecksum\n        ) {\n            request.headers[constants.AMZ_CONTENT_SHA256_HEADER] = payloadHash\n        }\n\n        const canonicalHeaders = this.computeCanonicalHeaders(\n            request,\n            finalOptions.unsignableHeaders,\n            finalOptions.signableHeaders\n        )\n        const signature = this.calculateSignature(\n            longDate,\n            scope,\n            this.deriveSigningKey(this.credentials, service, region, shortDate),\n            this.createCanonicalRequest(request, canonicalHeaders, payloadHash)\n        )\n\n        /**\n         * Step 4 of the signing process: add the signature to the HTTP request's headers.\n         *\n         * @see https://docs.aws.amazon.com/general/latest/gr/sigv4-add-signature-to-request.html\n         */\n        request.headers[constants.AUTHORIZATION_HEADER] =\n            `${constants.SIGNING_ALGORITHM_IDENTIFIER} ` +\n            `Credential=${this.credentials.accessKeyId}/${scope}, ` +\n            `SignedHeaders=${Object.keys(canonicalHeaders).sort().join(';')}, ` +\n            `Signature=${signature}`\n\n        // If a request path was provided, add it to the URL\n        let url = request.endpoint.href\n        if (request.path) {\n            // Ensure the URI and the request path are properly concatenated\n            // by adding a trailing slash to the URI if it's missing.\n            if (!url.endsWith('/') && !request.path.startsWith('/')) {\n                url += '/'\n            }\n\n            // Append the path to the URL\n            url += request.path\n        }\n\n        // If a request query string was provided, add it to the URL\n        if (request.query) {\n            // We exclude the signature from the query string\n            url += `?${this.serializeQueryParameters(request.query)}`\n        }\n\n        return {\n            url: url,\n            ...request,\n        }\n    }\n\n    /**\n     * Produces a presigned URL with AWS v4 signature information for the provided HTTP request.\n     *\n     * A presigned URL is a URL that contains the authorization information\n     * (signature and other signing information) in the query string. This method\n     * returns a preformatted URL that can be used to make the k6 http request.\n     *\n     * @param originalRequest - The original request to presign.\n     * @param options - Options controlling the signing of the request.\n     * @returns A signed request, including the presigned URL.\n     */\n    presign(originalRequest: HTTPRequest, options: PresignOptions = {}): SignedHTTPRequest {\n        const {\n            signingDate = new Date(),\n            expiresIn = 3600,\n            unsignableHeaders,\n            unhoistableHeaders,\n            signableHeaders,\n            signingRegion,\n            signingService,\n        } = options\n        const { longDate, shortDate }: DateInfo = formatDate(signingDate)\n        const region = signingRegion || this.region\n        const service = signingService || this.service\n\n        if (expiresIn > constants.MAX_PRESIGNED_TTL) {\n            throw new InvalidSignatureError(\n                \"Signature version 4 presigned URLs can't be valid for more than 7 days\"\n            )\n        }\n\n        const scope = `${shortDate}/${region}/${service}/${constants.KEY_TYPE_IDENTIFIER}`\n        const request = this.moveHeadersToQuery(originalRequest, { unhoistableHeaders })\n\n        // Required by the specification:\n        //   \"For HTTP/1.1 requests, you must include the host header at a minimum.\n        //   Standard headers like content-type are optional.\n        //   For HTTP/2 requests, you must include the :authority header instead of\n        //   the host header. Different services might require other headers.\"\n        if (!request.headers[constants.HOST_HEADER]) {\n            request.headers[constants.HOST_HEADER] = originalRequest.endpoint.hostname\n        }\n\n        // If the user provided a session token, include it in the signed url query string.\n        if (this.credentials.sessionToken) {\n            request.query[constants.AMZ_TOKEN_QUERY_PARAM] = this.credentials.sessionToken\n        }\n        // Add base signing query parameters to the request, as described in the documentation\n        // @see https://docs.aws.amazon.com/general/latest/gr/sigv4-add-signature-to-request.html\n        request.query[constants.AMZ_ALGORITHM_QUERY_PARAM] = constants.SIGNING_ALGORITHM_IDENTIFIER\n        request.query[\n            constants.AMZ_CREDENTIAL_QUERY_PARAM\n        ] = `${this.credentials.accessKeyId}/${scope}`\n        request.query[constants.AMZ_DATE_QUERY_PARAM] = longDate\n        request.query[constants.AMZ_EXPIRES_QUERY_PARAM] = expiresIn.toString(10)\n\n        const canonicalHeaders = this.computeCanonicalHeaders(\n            request,\n            unsignableHeaders,\n            signableHeaders\n        )\n        request.query[constants.AMZ_SIGNED_HEADERS_QUERY_PARAM] = Object.keys(canonicalHeaders)\n            .sort()\n            .join(';')\n\n        const signingKey = this.deriveSigningKey(this.credentials, service, region, shortDate)\n\n        // Computing the payload from the original request. This is required\n        // in the event the user attempts to produce a presigned URL for s3,\n        // which requires the payload hash to be 'UNSIGNED-PAYLOAD'.\n        //\n        // To that effect, users need to set the 'x-amz-content-sha256' header,\n        // and mark it as unhoistable and unsignable. When setup this way,\n        // the computePayloadHash method will then return the string 'UNSIGNED-PAYLOAD'.\n        const payloadHash = this.computePayloadHash(originalRequest)\n        const canonicalRequest = this.createCanonicalRequest(request, canonicalHeaders, payloadHash)\n\n        request.query[constants.AMZ_SIGNATURE_QUERY_PARAM] = this.calculateSignature(\n            longDate,\n            scope,\n            signingKey,\n            canonicalRequest\n        )\n\n        // If a request path was provided, add it to the URL\n        let url = originalRequest.endpoint.href\n        if (request.path) {\n            // Ensure there is a trailing slash at the end of the URL\n            // so that appending the path does not result in a malformed URL.\n            url = url?.endsWith('/') ? url : url + '/'\n\n            // Append the path to the URL\n            url += request.path\n        }\n\n        // If a request query string was provided, add it to the URL\n        if (request.query) {\n            url += `?${this.serializeQueryParameters(request.query)}`\n        }\n\n        return { url: url, ...request }\n    }\n\n    /**\n     * Create a string including information from your request\n     * in a AWS signature v4 standardized (canonical) format.\n     *\n     * Step 1 of the signing process: create the canonical request string.\n     * @see https://docs.aws.amazon.com/general/latest/gr/sigv4-create-canonical-request.html\n     *\n     * @param request {HTTPRequest} The request to sign.\n     * @param canonicalHeaders {HTTPHeaderBag} The request's canonical headers.\n     * @param payloadHash {string} The hexadecimally encoded request's payload hash .\n     * @returns {string} The canonical request string.\n     */\n    private createCanonicalRequest(\n        request: HTTPRequest,\n        canonicalHeaders: HTTPHeaderBag,\n        payloadHash: string\n    ): string {\n        const sortedHeaders = Object.keys(canonicalHeaders).sort()\n        const sortedCanonicalHeaders = sortedHeaders\n            .map((name) => `${name}:${canonicalHeaders[name]}`)\n            .join('\\n')\n        const signedHeaders = sortedHeaders.join(';')\n\n        return (\n            `${request.method}\\n` +\n            `${this.computeCanonicalURI(request)}\\n` +\n            `${this.computeCanonicalQuerystring(request)}\\n` +\n            `${sortedCanonicalHeaders}\\n\\n` +\n            `${signedHeaders}\\n` +\n            `${payloadHash}`\n        )\n    }\n\n    /**\n     * Create the \"string to sign\" part of the signature Version 4 protocol.\n     *\n     * The \"string to sign\" includes meta information about your request and\n     * about the canonical request that you created with `createCanonicalRequest`.\n     * It is used hand in hand with the signing key to create the request signature.\n     * Step 2 of the signing process: create the string to sign.\n     * @see https://docs.aws.amazon.com/general/latest/gr/sigv4-create-string-to-sign.html\n     *\n     * @param longDate {string} The request's date in iso 8601 format.\n     * @param credentialScope {string} The request's credential scope.\n     * @param canonicalRequest {string} The request's canonical request.\n     * @returns {string} The \"string to sign\".\n     */\n    private createStringToSign(\n        longDate: string,\n        credentialScope: string,\n        canonicalRequest: string\n    ): string {\n        const hashedCanonicalRequest = crypto.sha256(canonicalRequest, 'hex')\n\n        return (\n            `${constants.SIGNING_ALGORITHM_IDENTIFIER}\\n` +\n            `${longDate}\\n` +\n            `${credentialScope}\\n` +\n            `${hashedCanonicalRequest}`\n        )\n    }\n\n    /**\n     * Calculte the signature for AWS signature version 4.\n     *\n     * Step 3 of the signing process: create the signature.\n     * @see https://docs.aws.amazon.com/general/latest/gr/sigv4-calculate-signature.html\n     *\n     * @param longDate {string} The request's date in iso 8601 format.\n     * @param credentialScope {string} The request's credential scope.\n     * @param signingKey {string} the signing key as computed by the deriveSigningKey method.\n     * @param canonicalRequest {string} The request's canonical request.\n     * @returns {string} The signature.\n     */\n    private calculateSignature(\n        longDate: string,\n        credentialScope: string,\n        signingKey: Uint8Array,\n        canonicalRequest: string\n    ): string {\n        const stringToSign = this.createStringToSign(longDate, credentialScope, canonicalRequest)\n        return crypto.hmac('sha256', signingKey, stringToSign, 'hex')\n    }\n\n    /**\n     * Derives the signing key for authenticating requests signed with\n     * the Signature version 4 authentication protocol.\n     *\n     * deriveSigningKey produces a signing key by creating a series of\n     * hash-based message authentication codes (HMACs) represented in\n     * a binary format.\n     *\n     * The derived signing key is specific to the date it's made at, as well as\n     * the service and region it targets.\n     *\n     * @param credentials {AWSCredentials} The credentials to use for signing.\n     * @param service {string} The service the request is targeted at.\n     * @param region {string} The region the request is targeted at.\n     * @param shortDate {string} The request's date in YYYYMMDD format.\n     * @returns {Uint8Array} The derived signing key.\n     */\n    private deriveSigningKey(\n        credentials: Credentials,\n        service: string,\n        region: string,\n        shortDate: string\n    ): Uint8Array {\n        const kSecret: string = credentials.secretAccessKey\n        /**\n         * crypto.hmac returns a value of type `bytes`, which is an alias for\n         * number[]. However, the secret argument to hmac needs to either be\n         * a `string` or ArrayBuffer. The only way to get around this is to\n         * cast the return value of hmac to any, thus, we disable the no-explicit-any\n         * ESLint rule for this function.\n         */\n        /* eslint-disable @typescript-eslint/no-explicit-any */\n        const kDate: any = crypto.hmac('sha256', 'AWS4' + kSecret, shortDate, 'binary')\n        const kRegion: any = crypto.hmac('sha256', kDate, region, 'binary')\n        const kService: any = crypto.hmac('sha256', kRegion, service, 'binary')\n        const kSigning: any = crypto.hmac('sha256', kService, 'aws4_request', 'binary')\n        /* eslint-enable @typescript-eslint/no-explicit-any */\n\n        return kSigning\n    }\n\n    /**\n     * Create a string that includes information from your request\n     * in a AWS signature v4 standardized (canonical) format.\n     *\n     * @param param0 {HTTPRequest} The request to sign.\n     * @returns {string} The canonical URI.\n     */\n    private computeCanonicalURI({ path }: HTTPRequest): string {\n        if (this.uriEscapePath) {\n            // Non-S3 services, we normalize the path and then double URI encode it.\n            // Ref: \"Remove Dot Segments\" https://datatracker.ietf.org/doc/html/rfc3986#section-5.2.4\n            const normalizedURISegments = []\n\n            for (const URISegment of path.split('/')) {\n                if (URISegment?.length === 0) {\n                    continue\n                }\n\n                if (URISegment === '.') {\n                    continue\n                }\n\n                if (URISegment === '..') {\n                    normalizedURISegments.pop()\n                } else {\n                    normalizedURISegments.push(URISegment)\n                }\n            }\n\n            // Normalize the URI\n            const leading = path?.startsWith('/') ? '/' : ''\n            const URI = normalizedURISegments.join('/')\n            const trailing = normalizedURISegments.length > 0 && path?.endsWith('/') ? '/' : ''\n            const normalizedURI = `${leading}${URI}${trailing}`\n\n            const doubleEncoded = encodeURIComponent(normalizedURI)\n\n            return doubleEncoded.replace(/%2F/g, '/')\n        }\n\n        // For S3, we shouldn't normalize the path. For example, object name\n        // my-object//example//photo.user should not be normalized to\n        // my-object/example/photo.user\n        return path\n    }\n\n    /**\n     * Serializes the request's query parameters into their canonical\n     * string version. If the request does not include a query parameters,\n     * returns an empty string.\n     *\n     * @param param0 {HTTPRequest} The request containing the query parameters.\n     * @returns {string} The canonical query string.\n     */\n    private computeCanonicalQuerystring({ query = {} }: HTTPRequest): string {\n        const keys: Array<string> = []\n        const serialized: Record<string, string> = {}\n\n        for (const key of Object.keys(query).sort()) {\n            if (key.toLowerCase() === constants.AMZ_SIGNATURE_HEADER) {\n                continue\n            }\n\n            keys.push(key)\n            const value = query[key]\n\n            if (typeof value === 'string') {\n                serialized[key] = `${escapeURI(key)}=${escapeURI(value)}`\n            } else if (Array.isArray(value)) {\n                serialized[key] = value\n                    .slice(0)\n                    .sort()\n                    .reduce(\n                        (encoded: Array<string>, value: string) =>\n                            encoded.concat([`${escapeURI(key)}=${escapeURI(value)}`]),\n                        []\n                    )\n                    .join('&')\n            }\n        }\n\n        return keys\n            .map((key) => serialized[key])\n            .filter((serialized) => serialized)\n            .join('&')\n    }\n\n    /**\n     * Create the canonical form of the request's headers.\n     * Canonical headers consist of all the HTTP headers you\n     * are including with the signed request.\n     *\n     * @param param0 {HTTPRequest} The request to compute the canonical headers of.\n     * @param unsignableHeaders {Set<string>} The headers that should not be signed.\n     * @param signableHeaders {Set<string>} The headers that should be signed.\n     * @returns {string} The canonical headers.\n     */\n    private computeCanonicalHeaders(\n        { headers }: HTTPRequest,\n        unsignableHeaders?: Set<string>,\n        signableHeaders?: Set<string>\n    ): HTTPHeaderBag {\n        const canonicalHeaders: HTTPHeaderBag = {}\n\n        for (const headerName of Object.keys(headers).sort()) {\n            if (headers[headerName] == undefined) {\n                continue\n            }\n\n            const canonicalHeaderName = headerName.toLowerCase()\n            if (\n                canonicalHeaderName in constants.ALWAYS_UNSIGNABLE_HEADERS ||\n                unsignableHeaders?.has(canonicalHeaderName)\n            ) {\n                if (\n                    !signableHeaders ||\n                    (signableHeaders && !signableHeaders.has(canonicalHeaderName))\n                ) {\n                    continue\n                }\n            }\n\n            if (typeof headers[headerName] === 'string') {\n                canonicalHeaders[canonicalHeaderName] = headers[headerName] = headers[headerName]\n                    .trim()\n                    .replace(/\\s+/g, ' ')\n            }\n        }\n\n        return canonicalHeaders\n    }\n\n    /**\n     * Computes the SHA256 cryptographic hash of the request's body.\n     *\n     * If the headers contain the 'X-Amz-Content-Sha256' header, then\n     * the value of that header is returned instead. This proves useful\n     * when, for example, presiging a URL for S3, as the payload hash\n     * must always be equal to 'UNSIGNED-PAYLOAD'.\n     *\n     * @param param0 {HTTPRequest} The request to compute the payload hash of.\n     * @returns {string} The hex encoded SHA256 payload hash, or the value of the 'X-Amz-Content-Sha256' header.\n     */\n    private computePayloadHash({ headers, body }: HTTPRequest): string {\n        // for (const headerName of Object.keys(headers)) {\n        //     // If the header is present, return its value.\n        //     // So that we let the 'UNSIGNED-PAYLOAD' value pass through.\n        //     if (headerName.toLowerCase() === constants.AMZ_CONTENT_SHA256_HEADER) {\n        //         return headers[headerName]\n        //     }\n        // }\n\n        if (headers[constants.AMZ_CONTENT_SHA256_HEADER]) {\n            return headers[constants.AMZ_CONTENT_SHA256_HEADER]\n        }\n\n        if (body == undefined) {\n            return constants.EMPTY_SHA256\n        }\n\n        if (typeof body === 'string' || isArrayBuffer(body)) {\n            return crypto.sha256(body, 'hex').toLowerCase()\n        }\n\n        if (ArrayBuffer.isView(body)) {\n            // If the request body is a typed array, we need to convert it to a buffer\n            // so that we can calculate the checksum.\n            return crypto.sha256((body as DataView).buffer, 'hex').toLowerCase()\n        }\n\n        return constants.UNSIGNED_PAYLOAD\n    }\n\n    /**\n     * Moves a request's headers to its query parameters.\n     *\n     * The operation will ignore any amazon standard headers, prefixed\n     * with 'X-Amz-'. It will also ignore any headers specified as unhoistable\n     * by the options.\n     *\n     * The operation will delete the headers from the request.\n     *\n     * @param request {HTTPRequest} The request to move the headers from.\n     * @param options\n     * @returns {HTTPRequest} The request with the headers moved to the query parameters.\n     */\n    private moveHeadersToQuery(\n        request: HTTPRequest,\n        options: { unhoistableHeaders?: Set<string> } = {}\n    ): HTTPRequest & { query: QueryParameterBag } {\n        const requestCopy = JSON.parse(JSON.stringify(request))\n        const { headers, query = {} as QueryParameterBag } = requestCopy\n\n        for (const name of Object.keys(headers)) {\n            const lowerCaseName = name.toLowerCase()\n            if (\n                lowerCaseName.slice(0, 6) === 'x-amz-' &&\n                !options.unhoistableHeaders?.has(lowerCaseName)\n            ) {\n                query[name] = headers[name]\n                delete headers[name]\n            }\n        }\n\n        return {\n            ...requestCopy,\n            headers,\n            query,\n        }\n    }\n\n    /**\n     * Serializes a HTTPRequest's query parameter bag into a string.\n     *\n     * @param query {QueryParameterBag} The query parameters to serialize.\n     * @param ignoreKeys {Set<string>} The keys to ignore.\n     * @returns {string} The serialized, and ready to use in a URL, query parameters.\n     */\n    private serializeQueryParameters(query: QueryParameterBag, ignoreKeys?: string[]): string {\n        const keys: Array<string> = []\n        const serialized: Record<string, string> = {}\n\n        for (const key of Object.keys(query).sort()) {\n            if (ignoreKeys?.includes(key.toLowerCase())) {\n                continue\n            }\n\n            keys.push(key)\n            const value = query[key]\n\n            if (typeof value === 'string') {\n                serialized[key] = `${escapeURI(key)}=${escapeURI(value)}`\n            } else if (Array.isArray(value)) {\n                serialized[key] = value\n                    .slice(0)\n                    .sort()\n                    .reduce(\n                        (encoded: Array<string>, value: string) =>\n                            encoded.concat([`${escapeURI(key)}=${escapeURI(value)}`]),\n                        []\n                    )\n                    .join('&')\n            }\n        }\n\n        return keys\n            .map((key) => serialized[key])\n            .filter((serialized) => serialized)\n            .join('&')\n    }\n}\n\n/**\n * Error indicating an Invalid signature has been sent to AWS services\n *\n * Inspired from AWS official error types, as\n * described in:\n *   * https://aws.amazon.com/blogs/developer/service-error-handling-modular-aws-sdk-js/\n *   * https://github.com/aws/aws-sdk-js/blob/master/lib/error.d.ts\n */\nexport class InvalidSignatureError extends AWSError {\n    /**\n     * Constructs an InvalidSignatureError\n     *\n     * @param  {string} message - human readable error message\n     */\n    constructor(message: string, code?: string) {\n        super(message, code)\n        this.name = 'InvalidSignatureError'\n    }\n}\n\nexport interface SignatureV4Options {\n    /**\n     * The name of the service to sign for.\n     */\n    service: string\n\n    /**\n     * The name of the region to sign for.\n     */\n    region: string\n\n    /**\n     * The credentials with which the request should be signed.\n     */\n    credentials: Credentials\n\n    /**\n     * Whether to uri-escape the request URI path as part of computing the\n     * canonical request string. This is required for every AWS service, except\n     * Amazon S3, as of late 2017.\n     *\n     * @default [true]\n     */\n    uriEscapePath?: boolean\n\n    /**\n     * Whether to calculate a checksum of the request body and include it as\n     * either a request header (when signing) or as a query string parameter\n     * (when presigning). This is required for AWS Glacier and Amazon S3 and optional for\n     * every other AWS service as of late 2017.\n     *\n     * @default [true]\n     */\n    applyChecksum?: boolean\n}\n\nexport interface SignOptions {\n    /**\n     * The date and time to be used as signature metadata. This value should be\n     * a Date object, a unix (epoch) timestamp, or a string that can be\n     * understood by the JavaScript `Date` constructor.If not supplied, the\n     * value returned by `new Date()` will be used.\n     */\n    signingDate?: Date\n\n    /**\n     * The service signing name. It will override the service name of the signer\n     * in current invocation\n     */\n    signingService?: string\n\n    /**\n     * The region name to sign the request. It will override the signing region of the\n     * signer in current invocation\n     */\n    signingRegion?: string\n}\n\nexport interface RequestSigningOptions extends SignOptions {\n    /**\n     * A set of strings whose members represents headers that cannot be signed.\n     * All headers in the provided request will have their names converted to\n     * lower case and then checked for existence in the unsignableHeaders set.\n     */\n    unsignableHeaders?: Set<string>\n\n    /**\n     * A set of strings whose members represents headers that should be signed.\n     * Any values passed here will override those provided via unsignableHeaders,\n     * allowing them to be signed.\n     *\n     * All headers in the provided request will have their names converted to\n     * lower case before signing.\n     */\n    signableHeaders?: Set<string>\n}\n\nexport interface PresignOptions extends RequestSigningOptions {\n    /**\n     * The number of seconds before the presigned URL expires\n     */\n    expiresIn?: number\n\n    /**\n     * A set of strings whose representing headers that should not be hoisted\n     * to presigned request's query string. If not supplied, the presigner\n     * moves all the AWS-specific headers (starting with `x-amz-`) to the request\n     * query string. If supplied, these headers remain in the presigned request's\n     * header.\n     * All headers in the provided request will have their names converted to\n     * lower case and then checked for existence in the unhoistableHeaders set.\n     */\n    unhoistableHeaders?: Set<string>\n}\n\nexport interface Credentials {\n    /**\n     * AWS access key ID\n     */\n    readonly accessKeyId: string\n\n    /**\n     * AWS secret access key\n     */\n    readonly secretAccessKey: string\n\n    /**\n     * A security or session token to use with these credentials. Usually\n     * present for temporary credentials.\n     */\n    readonly sessionToken?: string\n}\n\nexport interface DateInfo {\n    /**\n     * ISO8601 formatted date string\n     */\n    longDate: string\n\n    /**\n     * String in the format YYYYMMDD\n     */\n    shortDate: string\n}\n\n/**\n * Escapes a URI following the AWS signature v4 escaping rules.\n *\n * @param URI {string} The URI to escape.\n * @returns {string} The escaped URI.\n */\nfunction escapeURI(URI: string): string {\n    const hexEncode = (c: string): string => {\n        return `%${c.charCodeAt(0).toString(16).toUpperCase()}`\n    }\n\n    return encodeURIComponent(URI).replace(/[!'()*]/g, hexEncode)\n}\n\n/**\n * formatDate formats a Date object into a ISO8601 formatted date string\n * and a string in the format YYYYMMDD.\n *\n * @param date {Date} The date to format.\n * @returns {DateInfo} The formatted date.\n */\nfunction formatDate(date: Date): DateInfo {\n    const longDate = iso8601(date).replace(/[-:]/g, '')\n    return {\n        longDate,\n        shortDate: longDate.slice(0, 8),\n    }\n}\n\n/**\n * Formats a time into an ISO 8601 string.\n *\n * @see https://en.wikipedia.org/wiki/ISO_8601\n *\n * @param time {number | string | Date} The time to format.\n * @returns {string} The ISO 8601 formatted time.\n */\nfunction iso8601(time: number | string | Date): string {\n    return toDate(time)\n        .toISOString()\n        .replace(/\\.\\d{3}Z$/, 'Z')\n}\n\n/**\n * Converts a time value into a Date object.\n *\n * @param time {number | string | Date} The time to convert.\n * @returns {Date} The resulting Date object.\n */\nfunction toDate(time: number | string | Date): Date {\n    if (typeof time === 'number') {\n        return new Date(time * 1000)\n    }\n\n    if (typeof time === 'string') {\n        if (Number(time)) {\n            return new Date(Number(time) * 1000)\n        }\n\n        return new Date(time)\n    }\n\n    return time\n}\n","import { Endpoint } from './endpoint'\n\n/**\n * Type representing HTTP schemes\n */\nexport type HTTPScheme = 'http' | 'https'\n\n/**\n * Type representing HTTP Methods\n *\n */\nexport type HTTPMethod = 'GET' | 'POST' | 'PUT' | 'DELETE'\n\n/**\n * Type alias representing HTTP Headers\n */\nexport type HTTPHeaders = { [key: string]: string }\n\n/**\n * HTTPHeaderBag is a type alias representing HTTP Headers\n */\nexport type HTTPHeaderBag = Record<string, string>\n\nexport function hasHeader(soughtHeader: string, headers: HTTPHeaderBag): boolean {\n    soughtHeader = soughtHeader.toLowerCase()\n\n    for (const headerName of Object.keys(headers)) {\n        if (soughtHeader === headerName.toLowerCase()) {\n            return true\n        }\n    }\n\n    return false\n}\n\n/**\n * QueryParameterBag is a type alias representing HTTP Query Parameters\n */\nexport type QueryParameterBag = Record<string, string | Array<string>>\n\n/**\n * HTTPRequest represents an HTTP request\n */\nexport interface HTTPRequest {\n    /**\n     * The HTTP method to use\n     */\n    method: HTTPMethod\n\n    /**\n     * Represents an AWS service endpoint, providing utilities for parsing and handling URL details.\n     */\n    endpoint: Endpoint\n\n    /**\n     * The path to the resource\n     */\n    path: string\n\n    /**\n     * The query parameters to include in the request\n     */\n    query?: QueryParameterBag\n\n    /**\n     * The headers to include in the request\n     */\n    headers: HTTPHeaderBag\n\n    /**\n     * The body of the request\n     */\n    body?: string | ArrayBuffer | null\n}\n\n/**\n * SignedHTTPRequest represents an HTTP request that has been signed\n * with an AWS signature. It is a superset of HTTPRequest adding\n * the following fields:\n * - url: the fully qualified URL of the request that can be used in a k6 http.request.\n */\nexport interface SignedHTTPRequest extends HTTPRequest {\n    url: string\n}\n","/**\n *\n * @param value\n * @returns\n */\nexport function isArrayBuffer(value: unknown): value is ArrayBuffer {\n    return (\n        typeof ArrayBuffer === 'function' &&\n        (value instanceof ArrayBuffer ||\n            Object.prototype.toString.call(value) === '[object ArrayBuffer]')\n    )\n}\n\nexport function toFormUrlEncoded(form: Record<string, string | number | boolean>): string {\n    return Object.keys(form)\n        .reduce((params, key) => {\n            const value = form[key]\n            if (value !== undefined && value !== null) {\n                params.push(`${encodeURIComponent(key)}=${encodeURIComponent(value)}`)\n            }\n            return params\n        }, [] as string[])\n        .join('&')\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"k6/http\");","import { JSONObject } from 'k6'\nimport http, { RefinedResponse, ResponseType } from 'k6/http'\n\nimport { AWSClient } from './client'\nimport { AWSConfig } from './config'\nimport { AMZ_TARGET_HEADER } from './constants'\nimport { AWSError } from './error'\nimport { HTTPHeaders, HTTPMethod } from './http'\nimport { InvalidSignatureError, SignatureV4 } from './signature'\n\n/**\n * Class allowing to interact with Amazon AWS's Systems Manager service\n */\nexport class SystemsManagerClient extends AWSClient {\n    private readonly signature: SignatureV4\n    private readonly method: HTTPMethod\n    private readonly commonHeaders: HTTPHeaders\n\n    /**\n     * Create a SystemsManagerClient\n     * @param  {AWSConfig} awsConfig - configuration attributes to use when interacting with AWS' APIs\n     */\n    constructor(awsConfig: AWSConfig) {\n        super(awsConfig, 'ssm')\n\n        // All interactions with the Systems Manager service\n        // are made via the POST method.\n        this.method = 'POST'\n        this.commonHeaders = {\n            'Content-Type': 'application/x-amz-json-1.1',\n        }\n\n        this.signature = new SignatureV4({\n            service: this.serviceName,\n            region: awsConfig.region,\n            credentials: {\n                accessKeyId: awsConfig.accessKeyId,\n                secretAccessKey: awsConfig.secretAccessKey,\n                sessionToken: awsConfig.sessionToken,\n            },\n            uriEscapePath: true,\n            applyChecksum: false,\n        })\n    }\n\n    /**\n     * Retrieves a parameter from Amazon Systems Manager\n     *\n     * @param {string} name - The ARN or name of the parameter to retrieve.\n     * @param {boolean} withDecryption - whether returned secure string parameters should be decrypted.\n     * @returns {SystemsManagerParameter} - returns the fetched Parameter object.\n     * @throws {SystemsManagerServiceError}\n     * @throws {InvalidSignatureError}\n     */\n    async getParameter(\n        name: string,\n        withDecryption: boolean = false\n    ): Promise<SystemsManagerParameter | undefined> {\n        const signedRequest = this.signature.sign(\n            {\n                method: this.method,\n                endpoint: this.endpoint,\n                path: '/',\n                headers: {\n                    ...this.commonHeaders,\n                    [AMZ_TARGET_HEADER]: `AmazonSSM.GetParameter`,\n                },\n                body: JSON.stringify({ Name: name, WithDecryption: withDecryption }),\n            },\n            {}\n        )\n\n        const res = await http.asyncRequest(this.method, signedRequest.url, signedRequest.body, {\n            ...this.baseRequestParams,\n            headers: signedRequest.headers,\n        })\n        this.handleError(res, SystemsManagerOperation.GetParameter)\n\n        return SystemsManagerParameter.fromJSON(res.json() as JSONObject)\n    }\n\n    protected handleError(response: RefinedResponse<ResponseType | undefined>, operation?: string): boolean {\n        const errored = super.handleError(response, operation);\n        if (!errored) {\n            return false\n        }\n\n        const errorCode = response.error_code\n        const error = response.json() as JSONObject\n        if (errorCode >= 1400 && errorCode <= 1499) {\n            // In the event of certain errors, the message is not set.\n            // Also, note the inconsistency in casing...\n            const errorMessage: string =\n                (error.Message as string) || (error.message as string) || (error.__type as string)\n\n            // Handle specifically the case of an invalid signature\n            if (error.__type === 'InvalidSignatureException') {\n                throw new InvalidSignatureError(errorMessage, error.__type)\n            }\n\n            // Otherwise throw a standard service error\n            throw new SystemsManagerServiceError(errorMessage, error.__type as string, operation as SystemsManagerOperation)\n        }\n\n        if (errorCode === 1500) {\n            throw new SystemsManagerServiceError(\n                'An error occured on the server side',\n                'InternalServiceError',\n                operation as SystemsManagerOperation\n            )\n        }\n\n        return true\n    }\n}\n\n/**\n * Class representing a Systems Manager's Parameter\n */\nexport class SystemsManagerParameter {\n    /**\n     * The Amazon Resource Name (ARN) of the parameter.\n     */\n    arn: string\n\n    /**\n     * The data type of the parameter, such as text or aws:ec2:image.\n     * The default is text.\n     */\n    dataType: string\n\n    /**\n     * Date the parameter was last changed or updated and the parameter version was created.\n     */\n    lastModifiedDate: number\n\n    /**\n     * The friendly name of the parameter.\n     */\n    name: string\n\n    /**\n     * Either the version number or the label used to retrieve the parameter value. Specify selectors by using one of the following formats:\n     *  parameter_name:version\n     *  parameter_name:label\n     */\n    selector: string\n\n    /**\n     * plies to parameters that reference information in other AWS services. SourceResult is the raw result or response from the source.\n     */\n    sourceResult: string\n\n    /**\n     * The type of parameter. Valid values include the following: String, StringList, and SecureString.\n     */\n    type: string\n\n    /**\n     * The parameter value.\n     */\n    value: string\n\n    /**\n     * The parameter version.\n     */\n    version: number\n\n    /**\n     * Constructs a Systems Manager's Parameter\n     *\n     * @param  {string} arn - The Amazon Resource Name (ARN) of the parameter.\n     * @param  {string} dataType - The data type of the parameter, such as text or aws:ec2:image. The default is text.\n     * @param  {number} lastModifiedDate - Date the parameter was last changed or updated and the parameter version was created.\n     * @param  {string} name - The friendly name of the parameter.\n     * @param  {string} selector - Either the version number or the label used to retrieve the parameter value. Specify selectors by using one of the following formats:\n     *  parameter_name:version\n     *  parameter_name:label\n     * @param  {string} sourceResult - Applies to parameters that reference information in other AWS services. SourceResult is the raw result or response from the source.\n     * @param  {string} type - The type of parameter. Valid values include the following: String, StringList, and SecureString.\n     * @param  {string} value - The parameter value.\n     * @param  {number} version - The parameter version.\n     */\n    constructor(\n        arn: string,\n        dataType: string,\n        lastModifiedDate: number,\n        name: string,\n        selector: string,\n        sourceResult: string,\n        type: string,\n        value: string,\n        version: number\n    ) {\n        this.arn = arn\n        this.dataType = dataType\n        this.lastModifiedDate = lastModifiedDate\n        this.name = name\n        this.selector = selector\n        this.sourceResult = sourceResult\n        this.type = type\n        this.value = value\n        this.version = version\n    }\n\n    /**\n     * Parses and constructs a Systems Manager's Parameter from the content\n     * of a JSON response returned by the AWS service\n     *\n     * @param  {Object} json - JSON object as returned and parsed from\n     *     the AWS service's API call.\n     * @returns {SystemsManagerParameter}\n     */\n    static fromJSON(json: JSONObject): SystemsManagerParameter {\n        const parameter = json.Parameter as JSONObject\n\n        return new SystemsManagerParameter(\n            parameter.ARN as string,\n            parameter.DataType as string,\n            parameter.LastModifiedDate as number,\n            parameter.Name as string,\n            parameter.Selector as string,\n            parameter.SourceResult as string,\n            parameter.Type as string,\n            parameter.Value as string,\n            parameter.Version as number\n        )\n    }\n}\n\nexport class SystemsManagerServiceError extends AWSError {\n    operation: SystemsManagerOperation\n\n    /**\n     * Constructs a SystemsManagerServiceError\n     *\n     * @param  {string} message - human readable error message\n     * @param  {string} code - A unique short code representing the error that was emitted\n     * @param  {SystemsManagerOperation} operation - Name of the failed Operation\n     */\n    constructor(message: string, code: string, operation: SystemsManagerOperation) {\n        super(message, code)\n        this.name = 'SystemsManagerServiceError'\n        this.operation = operation\n    }\n}\n\n/**\n *  SystemsManagerOperation defines all currently implemented Systems Manager operations.\n */\nenum SystemsManagerOperation {\n    GetParameter = 'GetParameter',\n}\n","import { RefinedResponse, ResponseType, Params } from 'k6/http'\n\nimport { AWSConfig } from './config'\nimport { Endpoint } from './endpoint'\nimport { HTTPHeaders } from './http'\nimport {\n    GeneralErrorKind,\n    DNSErrorKind,\n    TCPErrorKind,\n    TLSErrorKind,\n    HTTP2ErrorKind,\n    GeneralError,\n    DNSError,\n    TCPError,\n    TLSError,\n    HTTP2Error,\n} from './error'\n\n/**\n * Class allowing to build requests targeting AWS APIs\n *\n * This class is meant to be used as a base class for specific\n * services clients. See S3Client or SecretsManagerClient for\n * usage examples.\n */\nexport class AWSClient {\n    readonly awsConfig: AWSConfig\n    readonly serviceName: string\n\n    // Because jslib-aws is mostly used as a way to setup or feed k6 tests, and\n    // we want the jslib-aws to be able to disregard k6's discardResponseBodies: meaning\n    // that for instance, even when setting discardResponseBodies to true in the k6 options, using\n    // s3.getObject still receives the underlying response body and returns data to the user.\n    //\n    // To achieve this, we set the responseType to 'text' in the baseRequestParams, as it\n    // will lead the http module to ignore the discardResponseBodies option.\n    //\n    // AWS Client classes can override this value if they want to receive the response body\n    // as a different type ('binary' for instance, e.g. S3Client.getObject).\n    //\n    // See #45: https://github.com/grafana/k6-jslib-aws/issues/45\n    readonly baseRequestParams: Params = {\n        responseType: 'text',\n    }\n\n    private _endpoint?: Endpoint\n\n    /**\n     * @param {AWSConfig} awsConfig - configuration attributes to use when interacting with AWS' APIs\n     * @param  {string} serviceName - name of the service to target.\n     * @param  {URIEncodingConfig} URIencodingConfig - configures how requests URIs should be encoded.\n     */\n    constructor(awsConfig: AWSConfig, serviceName: string) {\n        this.awsConfig = awsConfig\n        this.serviceName = serviceName\n\n        // If an endpoint is provided in the config, set it\n        // to ensure the default endpoint is not used.\n        if (awsConfig.endpoint != undefined) {\n            this._endpoint = awsConfig.endpoint\n        }\n    }\n\n    /**\n     * Represents the endpoint URL of the AWS service.\n     *\n     * If no custom endpoint is set, a default endpoint will be constructed\n     * using the service name and region provided in the AWS config.\n     *\n     * @type {Endpoint}\n     * @public\n     */\n    public get endpoint() {\n        if (this._endpoint == undefined) {\n            this._endpoint = new Endpoint(\n                `https://${this.serviceName}.${this.awsConfig.region}.amazonaws.com`\n            )\n        }\n        return this._endpoint\n    }\n\n    /**\n     * Updates the endpoint URL of the AWS service.\n     *\n     * This can be used to override the default AWS service endpoint or set a custom endpoint.\n     *\n     * @param {Endpoint} endpoint - The new endpoint to set for the AWS service.\n     * @public\n     */\n    public set endpoint(endpoint: Endpoint) {\n        this._endpoint = endpoint\n    }\n\n    /**\n     * Handles the k6 http response potential errors produced when making a\n     * request to an AWS service.\n     *\n     * Importantly, this method only handles errors that emerge from the k6 http client itself, and\n     * won't handle AWS specific errors. To handle AWS specific errors, client classes are\n     * expected to implement their own error handling logic by overriding this method.\n     *\n     * @param response {RefinedResponse<ResponseType | undefined>} the response received by the k6 http client\n     * @param operation {string | undefined } the name of the operation that was attempted when the error occurred\n     * @param {boolean} returns true if an error was handled, false otherwise\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    protected handleError(response: RefinedResponse<ResponseType | undefined>, operation?: string): boolean {\n        const status: number = response.status\n        const errorCode: number = response.error_code\n        const errorMessage: string = response.error\n\n        // We consider codes 200-299 as success.\n        //\n        // We do not consider 3xx as success as some services such as S3 can use\n        // 301 to indicate a bucket not found\n        if (status >= 200 && status < 300 && errorMessage == '' && errorCode === 0) {\n            return false\n        }\n\n        switch (errorCode) {\n            case GeneralErrorKind.GenericError:\n            case GeneralErrorKind.NonTCPNetworkError:\n            case GeneralErrorKind.InvalidURL:\n            case GeneralErrorKind.HTTPRequestTimeout:\n                throw new GeneralError(errorCode);\n            case DNSErrorKind.GenericDNSError:\n            case DNSErrorKind.NoIPFound:\n            case DNSErrorKind.BlacklistedIP:\n            case DNSErrorKind.BlacklistedHostname:\n                throw new DNSError(errorCode);\n            case TCPErrorKind.GenericTCPError:\n            case TCPErrorKind.BrokenPipeOnWrite:\n            case TCPErrorKind.UnknownTCPError:\n            case TCPErrorKind.GeneralTCPDialError:\n            case TCPErrorKind.DialTimeoutError:\n            case TCPErrorKind.DialConnectionRefused:\n            case TCPErrorKind.DialUnknownError:\n            case TCPErrorKind.ResetByPeer:\n                throw new TCPError(errorCode);\n            case TLSErrorKind.GeneralTLSError:\n            case TLSErrorKind.UnknownAuthority:\n            case TLSErrorKind.CertificateHostnameMismatch:\n                throw new TLSError(errorCode);\n            case HTTP2ErrorKind.GenericHTTP2Error:\n            case HTTP2ErrorKind.GeneralHTTP2GoAwayError:\n                throw new HTTP2Error(errorCode);\n        }\n\n        return true\n    }\n}\n\n/**\n * Type alias representing the result of an AWSClient.buildRequest call\n */\nexport interface AWSRequest {\n    readonly url: string\n    readonly headers: HTTPHeaders\n}\n"],"names":["__webpack_require__","module","getter","__esModule","d","a","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","Endpoint","endpoint","_classCallCheck","_defineProperty","completeUrl","startsWith","concat","DEFAULT_PROTOCOL","protocolMatch","match","hostnameWithPort","_slicedToArray","replace","split","this","_protocol","slice","_hostname","_port","parseInt","undefined","href","set","_value$split2","hostname","port","protocol","host","AWSConfig","options","region","InvalidAWSConfigError","accessKeyId","length","secretAccessKey","sessionToken","_createClass","__ENV","AWS_REGION","AWS_ACCESS_KEY_ID","AWS_SECRET_ACCESS_KEY","AWS_SESSION_TOKEN","_Error","message","_callSuper","_inherits","_wrapNativeSuper","Error","require","AWSError","code","_this","name","xmlDocument","doc","parseHTML","find","text","response","headers","error","json","Message","__type","parseXML","body","NetworkError","_Error2","_this2","ErrorMessages","GeneralError","_NetworkError2","DNSError","_NetworkError3","TCPError","_NetworkError4","TLSError","_NetworkError5","HTTP2Error","_NetworkError6","GeneralErrorKind","DNSErrorKind","TCPErrorKind","TLSErrorKind","HTTP2ErrorKind","_ErrorMessages","GenericError","NonTCPNetworkError","InvalidURL","HTTPRequestTimeout","GenericDNSError","NoIPFound","BlacklistedIP","BlacklistedHostname","GenericTCPError","BrokenPipeOnWrite","UnknownTCPError","GeneralTCPDialError","DialTimeoutError","DialConnectionRefused","DialUnknownError","ResetByPeer","GeneralTLSError","UnknownAuthority","CertificateHostnameMismatch","GenericHTTP2Error","GeneralHTTP2GoAwayError","AMZ_DATE_QUERY_PARAM","AMZ_SIGNATURE_QUERY_PARAM","AMZ_TOKEN_QUERY_PARAM","AMZ_CONTENT_SHA256_HEADER","AMZ_DATE_HEADER","toLowerCase","AMZ_SIGNATURE_HEADER","AMZ_TARGET_HEADER","AMZ_TOKEN_HEADER","AUTHORIZATION_HEADER","GENERATED_HEADERS","HOST_HEADER","ALWAYS_UNSIGNABLE_HEADERS","authorization","connection","expect","from","pragma","referer","te","trailer","upgrade","KEY_TYPE_IDENTIFIER","SIGNING_ALGORITHM_IDENTIFIER","SignatureV4","_ref","service","credentials","uriEscapePath","applyChecksum","request","arguments","finalOptions","_objectSpread","signingDate","Date","unsignableHeaders","Set","signableHeaders","_formatDate","formatDate","longDate","shortDate","signingService","signingRegion","scope","constants","_i","_Object$keys","keys","headerName","indexOf","ArrayBuffer","isView","buffer","payloadHash","computePayloadHash","soughtHeader","hasHeader","canonicalHeaders","computeCanonicalHeaders","signature","calculateSignature","deriveSigningKey","createCanonicalRequest","sort","join","url","path","endsWith","query","serializeQueryParameters","originalRequest","_options$signingDate","_options$expiresIn","expiresIn","unhoistableHeaders","_formatDate2","InvalidSignatureError","moveHeadersToQuery","toString","signingKey","canonicalRequest","_url","sortedHeaders","sortedCanonicalHeaders","map","signedHeaders","method","computeCanonicalURI","computeCanonicalQuerystring","credentialScope","hashedCanonicalRequest","crypto","stringToSign","createStringToSign","kSecret","kDate","kRegion","kService","_ref2","_step","normalizedURISegments","_iterator","_createForOfIteratorHelper","s","n","done","URISegment","pop","push","err","e","f","leading","URI","trailing","normalizedURI","encodeURIComponent","_ref3","_step2","_ref3$query","serialized","_loop","escapeURI","Array","isArray","reduce","encoded","_iterator2","filter","_ref4","_step3","_iterator3","canonicalHeaderName","has","trim","_ref5","requestCopy","JSON","parse","stringify","_requestCopy$query","_i2","_Object$keys2","_options$unhoistableH","lowerCaseName","ignoreKeys","_step4","_loop2","includes","_iterator4","_AWSError","c","charCodeAt","toUpperCase","date","time","Number","toDate","toISOString","_regeneratorRuntime","t","r","i","iterator","asyncIterator","u","define","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","h","l","y","GeneratorFunction","GeneratorFunctionPrototype","p","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","_typeof","resolve","__await","then","callInvokeWithMethodAndArg","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","resetTryEntry","completion","reset","isNaN","displayName","isGeneratorFunction","constructor","mark","setPrototypeOf","__proto__","awrap","async","Promise","reverse","prev","charAt","stop","rval","handle","complete","finish","delegateYield","ownKeys","getOwnPropertySymbols","getOwnPropertyDescriptor","apply","getOwnPropertyDescriptors","defineProperties","asyncGeneratorStep","_defineProperties","_toPropertyKey","_getPrototypeOf","ReferenceError","_assertThisInitialized","_possibleConstructorReturn","_isNativeReflectConstruct","Reflect","construct","Boolean","valueOf","_get","bind","_superPropBase","_setPrototypeOf","toPrimitive","String","_toPrimitive","SystemsManagerClient","_AWSClient","awsConfig","commonHeaders","serviceName","_callee","withDecryption","signedRequest","res","_args","_context","sign","Name","WithDecryption","http","baseRequestParams","handleError","SystemsManagerOperation","GetParameter","SystemsManagerParameter","fromJSON","_getParameter","_next","_throw","_x","operation","errorCode","error_code","errorMessage","SystemsManagerServiceError","AWSClient","responseType","_endpoint","status","arn","dataType","lastModifiedDate","selector","sourceResult","version","parameter","Parameter","ARN","DataType","LastModifiedDate","Selector","SourceResult","Type","Value","Version"],"sourceRoot":""}