{"version":3,"file":"sqs.js","mappings":"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","sources":["webpack://k6-jslib-aws/./src/internal/client.ts","webpack://k6-jslib-aws/./src/internal/config.ts","webpack://k6-jslib-aws/./src/internal/constants.ts","webpack://k6-jslib-aws/./src/internal/error.ts","webpack://k6-jslib-aws/./src/internal/http.ts","webpack://k6-jslib-aws/./src/internal/signature.ts","webpack://k6-jslib-aws/./src/internal/utils.ts","webpack://k6-jslib-aws/external commonjs \"k6/crypto\"","webpack://k6-jslib-aws/external commonjs \"k6/html\"","webpack://k6-jslib-aws/external commonjs \"k6/http\"","webpack://k6-jslib-aws/webpack/bootstrap","webpack://k6-jslib-aws/webpack/runtime/compat get default export","webpack://k6-jslib-aws/webpack/runtime/define property getters","webpack://k6-jslib-aws/webpack/runtime/hasOwnProperty shorthand","webpack://k6-jslib-aws/webpack/runtime/make namespace object","webpack://k6-jslib-aws/./src/internal/sqs.ts"],"sourcesContent":["import { AWSConfig } from './config'\nimport { HTTPHeaders } from './http'\n\n/**\n * Class allowing to build requests targeting AWS APIs\n *\n * This class is meant to be used as a base class for specific\n * services clients. See S3Client or SecretsManagerClient for\n * usage examples.\n */\nexport class AWSClient {\n    awsConfig: AWSConfig\n    serviceName: string\n\n    private _host?: string\n\n    /**\n     * @param {AWSConfig} awsConfig - configuration attributes to use when interacting with AWS' APIs\n     * @param  {string} serviceName - name of the service to target.\n     * @param  {URIEncodingConfig} URIencodingConfig - configures how requests URIs should be encoded.\n     */\n    constructor(awsConfig: AWSConfig, serviceName: string) {\n        this.awsConfig = awsConfig\n        this.serviceName = serviceName\n    }\n\n    /**\n     * Property computing the URL to send the requests to when interacting with\n     * the specific AWS service the child class implements the functionalities of.\n     */\n    public get host() {\n        if (this._host == undefined) {\n            return `${this.serviceName}.${this.awsConfig.region}.${this.awsConfig.endpoint}`\n        }\n        return this._host\n    }\n\n    public set host(host: string) {\n        this._host = host\n    }\n}\n\n/**\n * Type alias representing the result of an AWSClient.buildRequest call\n */\nexport interface AWSRequest {\n    url: string\n    headers: HTTPHeaders\n}\n","import { HTTPScheme } from './http'\n\n/** Class holding an AWS connection information */\nexport class AWSConfig {\n    /**\n     * The AWS region to connect to, as listed: https://docs.aws.amazon.com/general/latest/gr/rande.html\n     *\n     * @type {string}\n     */\n    region: string\n\n    /**\n     * Your user's AWS access key id credential.\n     *\n     * @type {string}\n     */\n    accessKeyId: string\n\n    /**\n     * Your user's AWS secret access key credential.\n     *\n     * @type {string}\n     */\n    secretAccessKey: string\n\n    /**\n     * Your user's AWS session token credential.\n     *\n     * @type {string}\n     */\n    sessionToken?: string\n\n    /**\n     * The HTTP scheme to use when connecting to AWS.\n     *\n     * @type {HTTPScheme} ['https']\n     */\n    scheme: HTTPScheme = 'https'\n\n    // FIXME: Should really be called \"host\" instead. When used\n    // with localstack we pass a complete host (hostname:port) here.\n    /**\n     * The AWS hostname to connect to.\n     *\n     * @type {string} ['amazonaws.com']\n     */\n    endpoint: string = 'amazonaws.com'\n\n    /**\n     * fromEnvironment creates an AWSConfig from the environment variables.\n     *\n     * It expects to find the following compulsory environment variables:\n     *  * AWS_REGION\n     *  * AWS_ACCESS_KEY_ID\n     *  * AWS_SECRET_ACCESS_KEY\n     *\n     * If set, the following optional environment variables are also used:\n     *  * AWS_SESSION_TOKEN\n     *\n     * Finally, the options parameter allows to explicitly set the scheme and endpoint\n     * to use when connecting to AWS.\n     *\n     * @param options {AWSConnectionOptions}\n     * @returns\n     */\n    static fromEnvironment(options?: AWSConnectionOptions): AWSConfig {\n        const region = __ENV.AWS_REGION;\n        const accessKeyId = __ENV.AWS_ACCESS_KEY_ID;\n        const secretAccessKey = __ENV.AWS_SECRET_ACCESS_KEY;\n        const sessionToken: string | undefined = __ENV.AWS_SESSION_TOKEN;\n        const scheme: HTTPScheme | undefined = options?.scheme;\n        const endpoint: string | undefined = options?.endpoint;\n\n        return new AWSConfig({\n            region,\n            accessKeyId,\n            secretAccessKey,\n            sessionToken,\n            scheme: scheme,\n            endpoint: endpoint,\n        })\n    }\n\n    /**\n     * Create an AWSConfig.\n     *\n     * @param {AWSConfigOptions} options - configuration attributes to use when interacting with AWS' APIs\n     * @throws {InvalidArgumentException}\n     */\n    constructor(options: AWSConfigOptions) {\n        if (!options.region || options.region === '') {\n            throw new InvalidAWSConfigError(\n                `invalid AWS region; reason: expected a valid AWS region name (e.g. \"us-east-1\"), got \\`${options.region}\\``\n            )\n        }\n\n        if (!options.accessKeyId || options.accessKeyId === '') {\n            throw new InvalidAWSConfigError(\n                `invalid AWS access key ID; reason: expected a non empty string, got \\`${options.accessKeyId}\\``\n            )\n        }\n\n        if (options.accessKeyId.length < 16 || options.accessKeyId.length > 128) {\n            throw new InvalidAWSConfigError(\n                `invalid AWS access key ID; reason: size should be between 16 and 128 characters, got ${options.accessKeyId.length}`\n            )\n        }\n\n        if (!options.secretAccessKey || options.secretAccessKey === '') {\n            throw new InvalidAWSConfigError(\n                `invalid AWS secret access key; reason: expected a non empty string, got \\`${options.secretAccessKey}\\``\n            )\n        }\n\n        if (options.secretAccessKey.length < 16 || options.secretAccessKey.length > 128) {\n            throw new InvalidAWSConfigError(\n                `invalid AWS secret access key; reason: size should be between 16 and 128 characters, got ${options.secretAccessKey.length}`\n            )\n        }\n\n        this.region = options.region\n        this.accessKeyId = options.accessKeyId\n        this.secretAccessKey = options.secretAccessKey\n\n        if (options.sessionToken !== undefined) {\n            this.sessionToken = options.sessionToken\n        }\n\n        if (options.scheme !== undefined) {\n            this.scheme = options.scheme\n        }\n\n        if (options.endpoint !== undefined) {\n            this.endpoint = options.endpoint\n        }\n    }\n}\n\n/**\n * Interface representing AWSConfig options\n */\nexport interface AWSConfigOptions extends AWSConnectionOptions {\n    /**\n     * The AWS region to connect to, as listed: https://docs.aws.amazon.com/general/latest/gr/rande.html\n     *\n     * @type {string}\n     */\n    region: string\n\n    /**\n     * Your user's AWS access key id credential.\n     *\n     * @type {string}\n     */\n    accessKeyId: string\n\n    /**\n     * Your user's AWS secret access key credential.\n     *\n     * @type {string}\n     */\n    secretAccessKey: string\n\n    /**\n     * Your user's AWS session token credential.\n     *\n     * @type {string}\n     */\n    sessionToken?: string\n}\n\n/**\n * Interface representing AWS connection options\n */\nexport interface AWSConnectionOptions {\n    /**\n     * The HTTP scheme to use when connecting to AWS.\n     *\n     * @type {HTTPScheme}\n     */\n    scheme?: HTTPScheme\n\n    /**\n     * The AWS hostname to connect to.\n     *\n     * @type {string}\n     */\n    endpoint?: string\n}\n\n/** Class representing an invalid AWS configuration */\nexport class InvalidAWSConfigError extends Error {\n    constructor(message: string) {\n        super(message)\n    }\n}\n","/**\n * Standard Amazon AWS query parameter names\n */\nexport const AMZ_ALGORITHM_QUERY_PARAM = 'X-Amz-Algorithm'\nexport const AMZ_CREDENTIAL_QUERY_PARAM = 'X-Amz-Credential'\nexport const AMZ_DATE_QUERY_PARAM = 'X-Amz-Date'\nexport const AMZ_EXPIRES_QUERY_PARAM = 'X-Amz-Expires'\nexport const AMZ_SIGNATURE_QUERY_PARAM = 'X-Amz-Signature'\nexport const AMZ_SIGNED_HEADERS_QUERY_PARAM = 'X-Amz-SignedHeaders'\nexport const AMZ_TARGET_QUERY_PARAM = 'X-Amz-Target'\nexport const AMZ_TOKEN_QUERY_PARAM = 'X-Amz-Security-Token'\n\n/**\n * Standard Amazon AWS header names\n */\nexport const AMZ_CONTENT_SHA256_HEADER = 'x-amz-content-sha256'\nexport const AMZ_DATE_HEADER = AMZ_DATE_QUERY_PARAM.toLowerCase()\nexport const AMZ_SIGNATURE_HEADER = AMZ_SIGNATURE_QUERY_PARAM.toLowerCase()\nexport const AMZ_TARGET_HEADER = AMZ_TARGET_QUERY_PARAM.toLowerCase()\nexport const AMZ_TOKEN_HEADER = AMZ_TOKEN_QUERY_PARAM.toLowerCase()\n\n/**\n * Common HTTP headers we rely on in the signing process\n */\nexport const AUTHORIZATION_HEADER = 'authorization'\nexport const DATE_HEADER = 'date'\n\n/**\n * Lists the headers that are generated as part of the signature process.\n */\nexport const GENERATED_HEADERS = [AUTHORIZATION_HEADER, AMZ_DATE_HEADER, DATE_HEADER]\nexport const HOST_HEADER = 'host'\n\n/**\n * Lists the headers that should never be included in the\n * request signature signature process.\n */\nexport const ALWAYS_UNSIGNABLE_HEADERS = {\n    authorization: true,\n    'cache-control': true,\n    connection: true,\n    expect: true,\n    from: true,\n    'keep-alive': true,\n    'max-forwards': true,\n    pragma: true,\n    referer: true,\n    te: true,\n    trailer: true,\n    'transfer-encoding': true,\n    upgrade: true,\n    'user-agent': true,\n    'x-amzn-trace-id': true,\n}\n\n/**\n * Signature specific constants included in the signing process\n */\nexport const KEY_TYPE_IDENTIFIER = 'aws4_request'\nexport const SIGNING_ALGORITHM_IDENTIFIER = 'AWS4-HMAC-SHA256'\n\n/**\n * Maximum time to live of a signed request in seconds: 7 days.\n */\nexport const MAX_PRESIGNED_TTL = 60 * 60 * 24 * 7\n\n/**\n * SHA256 hash of an empty string (so we don't waste cycles recomputing it)\n */\nexport const EMPTY_SHA256 = 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\n\n/**\n * SHA256 hash of the unsigned payload constant (so we don't waste cycles recomputing it)\n */\nexport const UNSIGNED_PAYLOAD_SHA256 =\n    '5a41b0751e4537c6ff868564ab44a4d4ecceec2ec5b1c5f74d97422968e04237'\n\nexport const UNSIGNED_PAYLOAD = 'UNSIGNED-PAYLOAD'\n","import { parseHTML } from 'k6/html'\n\n/**\n * Base class to derive errors from\n *\n * Inspired from AWS official error types, as\n * described in:\n *   * https://aws.amazon.com/blogs/developer/service-error-handling-modular-aws-sdk-js/\n *   * https://github.com/aws/aws-sdk-js/blob/master/lib/error.d.ts\n */\nexport class AWSError extends Error {\n    /**\n     * Error code issued by the service (if any)\n     */\n    code?: string\n\n    /**\n     * Create an AWSError\n     *\n     * @param {string} message - A longer human readable error message.\n     * @param {string?} code - A unique short code representing the error that was emitted\n     */\n    constructor(message: string, code?: string) {\n        super(message)\n        this.name = 'AWSError'\n        this.code = code\n    }\n\n    /**\n     * Parse an AWSError from an XML document\n     *\n     * @param  {string} xmlDocument - Serialized XML document to parse the error from\n     */\n    static parseXML(xmlDocument: string): AWSError {\n        const doc = parseHTML(xmlDocument)\n        return new AWSError(doc.find('Message').text(), doc.find('Code').text())\n    }\n}\n","/**\n * Type representing HTTP schemes\n */\nexport type HTTPScheme = 'http' | 'https'\n\n/**\n * Type representing HTTP Methods\n *\n */\nexport type HTTPMethod = 'GET' | 'POST' | 'PUT' | 'DELETE'\n\n/**\n * Type alias representing HTTP Headers\n */\nexport type HTTPHeaders = { [key: string]: string }\n\n/**\n * HTTPHeaderBag is a type alias representing HTTP Headers\n */\nexport type HTTPHeaderBag = Record<string, string>\n\nexport function hasHeader(soughtHeader: string, headers: HTTPHeaderBag): boolean {\n    soughtHeader = soughtHeader.toLowerCase()\n\n    for (const headerName of Object.keys(headers)) {\n        if (soughtHeader === headerName.toLowerCase()) {\n            return true\n        }\n    }\n\n    return false\n}\n\n/**\n * QueryParameterBag is a type alias representing HTTP Query Parameters\n */\nexport type QueryParameterBag = Record<string, string | Array<string>>\n\n/**\n * HTTPRequest represents an HTTP request\n */\nexport interface HTTPRequest {\n    /**\n     * The HTTP method to use\n     */\n    method: HTTPMethod\n\n    /**\n     * The protocol to use (http or https)\n     */\n    protocol: HTTPScheme\n\n    /**\n     * The hostname (domain name or IP address) the request targets\n     */\n    hostname: string\n\n    /**\n     * The port to the request targets\n     */\n    port?: number\n\n    /**\n     * The path to the resource\n     */\n    path: string\n\n    /**\n     * The query parameters to include in the request\n     */\n    query?: QueryParameterBag\n\n    /**\n     * The headers to include in the request\n     */\n    headers: HTTPHeaderBag\n\n    /**\n     * The body of the request\n     */\n    body?: string | ArrayBuffer | null\n}\n\n/**\n * SignedHTTPRequest represents an HTTP request that has been signed\n * with an AWS signature. It is a superset of HTTPRequest adding\n * the following fields:\n * - url: the fully qualified URL of the request that can be used in a k6 http.request.\n */\nexport interface SignedHTTPRequest extends HTTPRequest {\n    url: string\n}\n","import crypto from 'k6/crypto'\n\nimport * as constants from './constants'\nimport { AWSError } from './error'\nimport { hasHeader, HTTPHeaderBag, HTTPRequest, QueryParameterBag, SignedHTTPRequest } from './http'\nimport { isArrayBuffer } from './utils'\n\n/**\n * SignatureV4 can be used to sign HTTP requests and presign URLs using the AWS Signature\n * Version 4 signing process.\n *\n * It offers two signing methods:\n * - sign: signs the request headers and payload\n * - presign: returns a presigned (authorization information contained in the query string) URL\n *\n * @see https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html\n */\nexport class SignatureV4 {\n    /**\n     * The name of the service to sign for.\n     */\n    private readonly service: string\n\n    /**\n     * The name of the region to sign for.\n     */\n    private readonly region: string\n\n    /**\n     * The credentials with which the request should be signed.\n     */\n    private readonly credentials: Credentials\n\n    /**\n     * Whether to uri-escape the request URI path as part of computing the\n     * canonical request string. This is required for every AWS service, except\n     * Amazon S3, as of late 2017.\n     *\n     * @default [true]\n     */\n    private readonly uriEscapePath: boolean\n\n    /**\n     * Whether to calculate a checksum of the request body and include it as\n     * either a request header (when signing) or as a query string parameter\n     * (when presigning). This is required for AWS Glacier and Amazon S3 and optional for\n     * every other AWS service as of late 2017.\n     *\n     * @default [true]\n     */\n    private readonly applyChecksum: boolean\n\n    // TODO: uriEscapePath and applyChecksum should not be present in the constructor\n    constructor({\n        service,\n        region,\n        credentials,\n        uriEscapePath,\n        applyChecksum,\n    }: SignatureV4Options) {\n        this.service = service\n        this.region = region\n        this.credentials = credentials\n        this.uriEscapePath = typeof uriEscapePath === 'boolean' ? uriEscapePath : true\n        this.applyChecksum = typeof applyChecksum === 'boolean' ? applyChecksum : true\n    }\n\n    /**\n     * Includes AWS v4 signing information to the provided HTTP request.\n     *\n     * This method adds an Authorization header to the request, containing\n     * the signature and other signing information. It also returns a preformatted\n     * URL that can be used to make the k6 http request.\n     *\n     * This method mutates the request object.\n     *\n     * @param request {HTTPRequest} The request to sign.\n     * @param param1 {SignOptions} Options for signing the request.\n     * @returns {SignedHTTPRequest} The signed request.\n     */\n    sign(\n        request: HTTPRequest,\n        {\n            signingDate = new Date(),\n            signingService,\n            signingRegion,\n            unsignableHeaders = new Set<string>(),\n            signableHeaders = new Set<string>(),\n        }: RequestSigningOptions\n    ): SignedHTTPRequest {\n        const { longDate, shortDate }: DateInfo = formatDate(signingDate)\n        const service = signingService || this.service\n        const region = signingRegion || this.region\n        const scope = `${shortDate}/${region}/${service}/${constants.KEY_TYPE_IDENTIFIER}`\n\n        // Required by the specification:\n        //   \"For HTTP/1.1 requests, you must include the host header at a minimum.\n        //   Standard headers like content-type are optional.\n        //   For HTTP/2 requests, you must include the :authority header instead of\n        //   the host header. Different services might require other headers.\"\n        request.headers[constants.HOST_HEADER] = request.hostname\n\n        // Filter out headers that will be generated and managed by the signing process.\n        // If the user provide any of those as part of the HTTPRequest's headers, they\n        // will be ignored.\n        for (const headerName of Object.keys(request.headers)) {\n            if (constants.GENERATED_HEADERS.indexOf(headerName.toLowerCase()) > -1) {\n                delete request.headers[headerName]\n            }\n        }\n\n        request.headers[constants.AMZ_DATE_HEADER] = longDate\n        if (this.credentials.sessionToken) {\n            request.headers[constants.AMZ_TOKEN_HEADER] = this.credentials.sessionToken\n        }\n\n        // If the request body is a typed array, we need to convert it to a buffer\n        // so that we can calculate the checksum.\n        if (ArrayBuffer.isView(request.body)) {\n            request.body = request.body.buffer\n        }\n\n        // Ensure we avoid passing undefined to the crypto hash function.\n        if (!request.body) {\n            request.body = ''\n        }\n\n        let payloadHash = this.computePayloadHash(request)\n        if (!hasHeader(constants.AMZ_CONTENT_SHA256_HEADER, request.headers) && this.applyChecksum) {\n            request.headers[constants.AMZ_CONTENT_SHA256_HEADER] = payloadHash\n        }\n\n        const canonicalHeaders = this.computeCanonicalHeaders(request, unsignableHeaders, signableHeaders);\n        const signature = this.calculateSignature(\n            longDate,\n            scope,\n            this.deriveSigningKey(this.credentials, service, region, shortDate),\n            this.createCanonicalRequest(request, canonicalHeaders, payloadHash),\n        );\n\n        /**\n         * Step 4 of the signing process: add the signature to the HTTP request's headers.\n         *\n         * @see https://docs.aws.amazon.com/general/latest/gr/sigv4-add-signature-to-request.html\n         */\n        request.headers[constants.AUTHORIZATION_HEADER] =\n            `${constants.SIGNING_ALGORITHM_IDENTIFIER} ` +\n            `Credential=${this.credentials.accessKeyId}/${scope}, ` +\n            `SignedHeaders=${Object.keys(canonicalHeaders).sort().join(';')}, ` +\n            `Signature=${signature}`\n\n        // If a request path was provided, add it to the URL\n        let url = `${request.protocol}://${request.hostname}`\n        if (request.path) {\n            url += request.path\n        }\n\n        // If a request query string was provided, add it to the URL\n        if (request.query) {\n            // We exclude the signature from the query string\n            url += `?${this.serializeQueryParameters(request.query)}`\n        }\n\n        return {\n            url: url,\n            ...request,\n        }\n    }\n\n    /**\n     * Produces a presigned URL with AWS v4 signature information for the provided HTTP request.\n     *\n     * A presigned URL is a URL that contains the authorization information\n     * (signature and other signing information) in the query string. This method\n     * returns a preformatted URL that can be used to make the k6 http request.\n     *\n     * @param originalRequest - The original request to presign.\n     * @param options - Options controlling the signing of the request.\n     * @returns A signed request, including the presigned URL.\n     */\n    presign(originalRequest: HTTPRequest, options: PresignOptions = {}): SignedHTTPRequest {\n        const {\n            signingDate = new Date(),\n            expiresIn = 3600,\n            unsignableHeaders,\n            unhoistableHeaders,\n            signableHeaders,\n            signingRegion,\n            signingService,\n        } = options\n        const { longDate, shortDate }: DateInfo = formatDate(signingDate)\n        const region = signingRegion || this.region\n        const service = signingService || this.service\n\n        if (expiresIn > constants.MAX_PRESIGNED_TTL) {\n            throw new InvalidSignatureError(\n                \"Signature version 4 presigned URLs can't be valid for more than 7 days\"\n            )\n        }\n\n        const scope = `${shortDate}/${region}/${service}/${constants.KEY_TYPE_IDENTIFIER}`\n        const request = this.moveHeadersToQuery(originalRequest, { unhoistableHeaders })\n\n        // Required by the specification:\n        //   \"For HTTP/1.1 requests, you must include the host header at a minimum.\n        //   Standard headers like content-type are optional.\n        //   For HTTP/2 requests, you must include the :authority header instead of\n        //   the host header. Different services might require other headers.\"\n        request.headers[constants.HOST_HEADER] = originalRequest.hostname\n\n        // If the user provided a session token, include it in the signed url query string.\n        if (this.credentials.sessionToken) {\n            request.query[constants.AMZ_TOKEN_QUERY_PARAM] = this.credentials.sessionToken\n        }\n\n        // Add base signing query parameters to the request, as described in the documentation\n        // @see https://docs.aws.amazon.com/general/latest/gr/sigv4-add-signature-to-request.html\n        request.query[constants.AMZ_ALGORITHM_QUERY_PARAM] = constants.SIGNING_ALGORITHM_IDENTIFIER\n        request.query[\n            constants.AMZ_CREDENTIAL_QUERY_PARAM\n        ] = `${this.credentials.accessKeyId}/${scope}`\n        request.query[constants.AMZ_DATE_QUERY_PARAM] = longDate\n        request.query[constants.AMZ_EXPIRES_QUERY_PARAM] = expiresIn.toString(10)\n\n        const canonicalHeaders = this.computeCanonicalHeaders(\n            request,\n            unsignableHeaders,\n            signableHeaders\n        )\n        request.query[constants.AMZ_SIGNED_HEADERS_QUERY_PARAM] = Object.keys(canonicalHeaders)\n            .sort()\n            .join(';')\n\n        const signingKey = this.deriveSigningKey(this.credentials, service, region, shortDate)\n\n        // Computing the payload from the original request. This is required\n        // in the event the user attempts to produce a presigned URL for s3,\n        // which requires the payload hash to be 'UNSIGNED-PAYLOAD'.\n        //\n        // To that effect, users need to set the 'x-amz-content-sha256' header,\n        // and mark it as unhoistable and unsignable. When setup this way,\n        // the computePayloadHash method will then return the string 'UNSIGNED-PAYLOAD'.\n        const payloadHash = this.computePayloadHash(originalRequest)\n        const canonicalRequest = this.createCanonicalRequest(request, canonicalHeaders, payloadHash)\n\n        request.query[constants.AMZ_SIGNATURE_QUERY_PARAM] = this.calculateSignature(\n            longDate,\n            scope,\n            signingKey,\n            canonicalRequest\n        )\n\n        // If a request path was provided, add it to the URL\n        let url = `${request.protocol}://${request.hostname}`\n        if (request.path) {\n            url += request.path\n        }\n\n        // If a request query string was provided, add it to the URL\n        if (request.query) {\n            url += `?${this.serializeQueryParameters(request.query)}`\n        }\n\n        return { url: url, ...request }\n    }\n\n    /**\n     * Create a string including information from your request\n     * in a AWS signature v4 standardized (canonical) format.\n     *\n     * Step 1 of the signing process: create the canonical request string.\n     * @see https://docs.aws.amazon.com/general/latest/gr/sigv4-create-canonical-request.html\n     *\n     * @param request {HTTPRequest} The request to sign.\n     * @param canonicalHeaders {HTTPHeaderBag} The request's canonical headers.\n     * @param payloadHash {string} The hexadecimally encoded request's payload hash .\n     * @returns {string} The canonical request string.\n     */\n    private createCanonicalRequest(\n        request: HTTPRequest,\n        canonicalHeaders: HTTPHeaderBag,\n        payloadHash: string\n    ): string {\n        const sortedHeaders = Object.keys(canonicalHeaders).sort()\n        const sortedCanonicalHeaders = sortedHeaders\n            .map((name) => `${name}:${canonicalHeaders[name]}`)\n            .join('\\n')\n        const signedHeaders = sortedHeaders.join(';')\n\n        return (\n            `${request.method}\\n` +\n            `${this.computeCanonicalURI(request)}\\n` +\n            `${this.computeCanonicalQuerystring(request)}\\n` +\n            `${sortedCanonicalHeaders}\\n\\n` +\n            `${signedHeaders}\\n` +\n            `${payloadHash}`\n        )\n    }\n\n    /**\n     * Create the \"string to sign\" part of the signature Version 4 protocol.\n     *\n     * The \"string to sign\" includes meta information about your request and\n     * about the canonical request that you created with `createCanonicalRequest`.\n     * It is used hand in hand with the signing key to create the request signature.\n     * Step 2 of the signing process: create the string to sign.\n     * @see https://docs.aws.amazon.com/general/latest/gr/sigv4-create-string-to-sign.html\n     *\n     * @param longDate {string} The request's date in iso 8601 format.\n     * @param credentialScope {string} The request's credential scope.\n     * @param canonicalRequest {string} The request's canonical request.\n     * @returns {string} The \"string to sign\".\n     */\n    private createStringToSign(\n        longDate: string,\n        credentialScope: string,\n        canonicalRequest: string\n    ): string {\n        const hashedCanonicalRequest = crypto.sha256(canonicalRequest, 'hex')\n\n        return (\n            `${constants.SIGNING_ALGORITHM_IDENTIFIER}\\n` +\n            `${longDate}\\n` +\n            `${credentialScope}\\n` +\n            `${hashedCanonicalRequest}`\n        )\n    }\n\n    /**\n     * Calculte the signature for AWS signature version 4.\n     *\n     * Step 3 of the signing process: create the signature.\n     * @see https://docs.aws.amazon.com/general/latest/gr/sigv4-calculate-signature.html\n     *\n     * @param longDate {string} The request's date in iso 8601 format.\n     * @param credentialScope {string} The request's credential scope.\n     * @param signingKey {string} the signing key as computed by the deriveSigningKey method.\n     * @param canonicalRequest {string} The request's canonical request.\n     * @returns {string} The signature.\n     */\n    private calculateSignature(\n        longDate: string,\n        credentialScope: string,\n        signingKey: Uint8Array,\n        canonicalRequest: string\n    ): string {\n        const stringToSign = this.createStringToSign(longDate, credentialScope, canonicalRequest)\n        return crypto.hmac('sha256', signingKey, stringToSign, 'hex')\n    }\n\n    /**\n     * Derives the signing key for authenticating requests signed with\n     * the Signature version 4 authentication protocol.\n     *\n     * deriveSigningKey produces a signing key by creating a series of\n     * hash-based message authentication codes (HMACs) represented in\n     * a binary format.\n     *\n     * The derived signing key is specific to the date it's made at, as well as\n     * the service and region it targets.\n     *\n     * @param credentials {AWSCredentials} The credentials to use for signing.\n     * @param service {string} The service the request is targeted at.\n     * @param region {string} The region the request is targeted at.\n     * @param shortDate {string} The request's date in YYYYMMDD format.\n     * @returns {Uint8Array} The derived signing key.\n     */\n    private deriveSigningKey(\n        credentials: Credentials,\n        service: string,\n        region: string,\n        shortDate: string\n    ): Uint8Array {\n        const kSecret: string = credentials.secretAccessKey\n        const kDate: any = crypto.hmac('sha256', 'AWS4' + kSecret, shortDate, 'binary')\n        const kRegion: any = crypto.hmac('sha256', kDate, region, 'binary')\n        const kService: any = crypto.hmac('sha256', kRegion, service, 'binary')\n        const kSigning: any = crypto.hmac('sha256', kService, 'aws4_request', 'binary')\n\n        return kSigning\n    }\n\n    /**\n     * Create a string that includes information from your request\n     * in a AWS signature v4 standardized (canonical) format.\n     *\n     * @param param0 {HTTPRequest} The request to sign.\n     * @returns {string} The canonical URI.\n     */\n    private computeCanonicalURI({ path }: HTTPRequest): string {\n        if (this.uriEscapePath) {\n            // Non-S3 services, we normalize the path and then double URI encode it.\n            // Ref: \"Remove Dot Segments\" https://datatracker.ietf.org/doc/html/rfc3986#section-5.2.4\n            const normalizedURISegments = []\n\n            for (const URISegment of path.split('/')) {\n                if (URISegment?.length === 0) {\n                    continue\n                }\n\n                if (URISegment === '.') {\n                    continue\n                }\n\n                if (URISegment === '..') {\n                    normalizedURISegments.pop()\n                } else {\n                    normalizedURISegments.push(URISegment)\n                }\n            }\n\n            // Normalize the URI\n            const leading = path?.startsWith('/') ? '/' : ''\n            const URI = normalizedURISegments.join('/')\n            const trailing = normalizedURISegments.length > 0 && path?.endsWith('/') ? '/' : ''\n            const normalizedURI = `${leading}${URI}${trailing}`\n\n            const doubleEncoded = encodeURIComponent(normalizedURI)\n\n            return doubleEncoded.replace(/%2F/g, '/')\n        }\n\n        // For S3, we shouldn't normalize the path. For example, object name\n        // my-object//example//photo.user should not be normalized to\n        // my-object/example/photo.user\n        return path\n    }\n\n    /**\n     * Serializes the request's query parameters into their canonical\n     * string version. If the request does not include a query parameters,\n     * returns an empty string.\n     *\n     * @param param0 {HTTPRequest} The request containing the query parameters.\n     * @returns {string} The canonical query string.\n     */\n    private computeCanonicalQuerystring({ query = {} }: HTTPRequest): string {\n        const keys: Array<string> = []\n        const serialized: Record<string, string> = {}\n\n        for (const key of Object.keys(query).sort()) {\n            if (key.toLowerCase() === constants.AMZ_SIGNATURE_HEADER) {\n                continue\n            }\n\n            keys.push(key)\n            const value = query[key]\n\n            if (typeof value === 'string') {\n                serialized[key] = `${escapeURI(key)}=${escapeURI(value)}`\n            } else if (Array.isArray(value)) {\n                serialized[key] = value\n                    .slice(0)\n                    .sort()\n                    .reduce(\n                        (encoded: Array<string>, value: string) =>\n                            encoded.concat([`${escapeURI(key)}=${escapeURI(value)}`]),\n                        []\n                    )\n                    .join('&')\n            }\n        }\n\n        return keys\n            .map((key) => serialized[key])\n            .filter((serialized) => serialized)\n            .join('&')\n    }\n\n    /**\n     * Create the canonical form of the request's headers.\n     * Canonical headers consist of all the HTTP headers you\n     * are including with the signed request.\n     *\n     * @param param0 {HTTPRequest} The request to compute the canonical headers of.\n     * @param unsignableHeaders {Set<string>} The headers that should not be signed.\n     * @param signableHeaders {Set<string>} The headers that should be signed.\n     * @returns {string} The canonical headers.\n     */\n    private computeCanonicalHeaders(\n        { headers }: HTTPRequest,\n        unsignableHeaders?: Set<string>,\n        signableHeaders?: Set<string>\n    ): HTTPHeaderBag {\n        const canonicalHeaders: HTTPHeaderBag = {}\n\n        for (const headerName of Object.keys(headers).sort()) {\n            if (headers[headerName] == undefined) {\n                continue\n            }\n\n            const canonicalHeaderName = headerName.toLowerCase()\n            if (\n                canonicalHeaderName in constants.ALWAYS_UNSIGNABLE_HEADERS ||\n                unsignableHeaders?.has(canonicalHeaderName)\n            ) {\n                if (\n                    !signableHeaders ||\n                    (signableHeaders && !signableHeaders.has(canonicalHeaderName))\n                ) {\n                    continue\n                }\n            }\n\n            canonicalHeaders[canonicalHeaderName] = headers[headerName].trim().replace(/\\s+/g, ' ')\n        }\n\n        return canonicalHeaders\n    }\n\n    /**\n     * Computes the SHA256 cryptographic hash of the request's body.\n     *\n     * If the headers contain the 'X-Amz-Content-Sha256' header, then\n     * the value of that header is returned instead. This proves useful\n     * when, for example, presiging a URL for S3, as the payload hash\n     * must always be equal to 'UNSIGNED-PAYLOAD'.\n     *\n     * @param param0 {HTTPRequest} The request to compute the payload hash of.\n     * @returns {string} The hex encoded SHA256 payload hash, or the value of the 'X-Amz-Content-Sha256' header.\n     */\n    private computePayloadHash({ headers, body }: HTTPRequest): string {\n        // for (const headerName of Object.keys(headers)) {\n        //     // If the header is present, return its value.\n        //     // So that we let the 'UNSIGNED-PAYLOAD' value pass through.\n        //     if (headerName.toLowerCase() === constants.AMZ_CONTENT_SHA256_HEADER) {\n        //         return headers[headerName]\n        //     }\n        // }\n\n        if (headers[constants.AMZ_CONTENT_SHA256_HEADER]) {\n            return headers[constants.AMZ_CONTENT_SHA256_HEADER]\n        }\n\n        if (body == undefined) {\n            return constants.EMPTY_SHA256\n        }\n\n        if (typeof body === 'string' || isArrayBuffer(body)) {\n            return crypto.sha256(body, 'hex').toLowerCase()\n        }\n\n        if (ArrayBuffer.isView(body)) {\n            // If the request body is a typed array, we need to convert it to a buffer\n            // so that we can calculate the checksum.\n            return crypto.sha256((body as DataView).buffer, 'hex').toLowerCase()\n        }\n\n        return constants.UNSIGNED_PAYLOAD\n    }\n\n    /**\n     * Moves a request's headers to its query parameters.\n     *\n     * The operation will ignore any amazon standard headers, prefixed\n     * with 'X-Amz-'. It will also ignore any headers specified as unhoistable\n     * by the options.\n     *\n     * The operation will delete the headers from the request.\n     *\n     * @param request {HTTPRequest} The request to move the headers from.\n     * @param options\n     * @returns {HTTPRequest} The request with the headers moved to the query parameters.\n     */\n    private moveHeadersToQuery(\n        request: HTTPRequest,\n        options: { unhoistableHeaders?: Set<string> } = {}\n    ): HTTPRequest & { query: QueryParameterBag } {\n        const requestCopy = JSON.parse(JSON.stringify(request))\n        const { headers, query = {} as QueryParameterBag } = requestCopy\n\n        for (const name of Object.keys(headers)) {\n            const lowerCaseName = name.toLowerCase()\n            if (\n                lowerCaseName.slice(0, 6) === 'x-amz-' &&\n                !options.unhoistableHeaders?.has(lowerCaseName)\n            ) {\n                query[name] = headers[name]\n                delete headers[name]\n            }\n        }\n\n        return {\n            ...requestCopy,\n            headers,\n            query,\n        }\n    }\n\n    /**\n     * Serializes a HTTPRequest's query parameter bag into a string.\n     *\n     * @param query {QueryParameterBag} The query parameters to serialize.\n     * @param ignoreKeys {Set<string>} The keys to ignore.\n     * @returns {string} The serialized, and ready to use in a URL, query parameters.\n     */\n    private serializeQueryParameters(query: QueryParameterBag, ignoreKeys?: string[]): string {\n        const keys: Array<string> = []\n        const serialized: Record<string, string> = {}\n\n        for (const key of Object.keys(query).sort()) {\n            if (ignoreKeys?.includes(key.toLowerCase())) {\n                continue\n            }\n\n            keys.push(key)\n            const value = query[key]\n\n            if (typeof value === 'string') {\n                serialized[key] = `${escapeURI(key)}=${escapeURI(value)}`\n            } else if (Array.isArray(value)) {\n                serialized[key] = value\n                    .slice(0)\n                    .sort()\n                    .reduce(\n                        (encoded: Array<string>, value: string) =>\n                            encoded.concat([`${escapeURI(key)}=${escapeURI(value)}`]),\n                        []\n                    )\n                    .join('&')\n            }\n        }\n\n        return keys\n            .map((key) => serialized[key])\n            .filter((serialized) => serialized)\n            .join('&')\n    }\n}\n\n/**\n * Error indicating an Invalid signature has been sent to AWS services\n *\n * Inspired from AWS official error types, as\n * described in:\n *   * https://aws.amazon.com/blogs/developer/service-error-handling-modular-aws-sdk-js/\n *   * https://github.com/aws/aws-sdk-js/blob/master/lib/error.d.ts\n */\nexport class InvalidSignatureError extends AWSError {\n    /**\n     * Constructs an InvalidSignatureError\n     *\n     * @param  {string} message - human readable error message\n     */\n    constructor(message: string, code?: string) {\n        super(message, code)\n        this.name = 'InvalidSignatureError'\n    }\n}\n\nexport interface SignatureV4Options {\n    /**\n     * The name of the service to sign for.\n     */\n    service: string\n\n    /**\n     * The name of the region to sign for.\n     */\n    region: string\n\n    /**\n     * The credentials with which the request should be signed.\n     */\n    credentials: Credentials\n\n    /**\n     * Whether to uri-escape the request URI path as part of computing the\n     * canonical request string. This is required for every AWS service, except\n     * Amazon S3, as of late 2017.\n     *\n     * @default [true]\n     */\n    uriEscapePath?: boolean\n\n    /**\n     * Whether to calculate a checksum of the request body and include it as\n     * either a request header (when signing) or as a query string parameter\n     * (when presigning). This is required for AWS Glacier and Amazon S3 and optional for\n     * every other AWS service as of late 2017.\n     *\n     * @default [true]\n     */\n    applyChecksum?: boolean\n}\n\nexport interface SignOptions {\n    /**\n     * The date and time to be used as signature metadata. This value should be\n     * a Date object, a unix (epoch) timestamp, or a string that can be\n     * understood by the JavaScript `Date` constructor.If not supplied, the\n     * value returned by `new Date()` will be used.\n     */\n    signingDate?: Date\n\n    /**\n     * The service signing name. It will override the service name of the signer\n     * in current invocation\n     */\n    signingService?: string\n\n    /**\n     * The region name to sign the request. It will override the signing region of the\n     * signer in current invocation\n     */\n    signingRegion?: string\n}\n\nexport interface RequestSigningOptions extends SignOptions {\n    /**\n     * A set of strings whose members represents headers that cannot be signed.\n     * All headers in the provided request will have their names converted to\n     * lower case and then checked for existence in the unsignableHeaders set.\n     */\n    unsignableHeaders?: Set<string>\n\n    /**\n     * A set of strings whose members represents headers that should be signed.\n     * Any values passed here will override those provided via unsignableHeaders,\n     * allowing them to be signed.\n     *\n     * All headers in the provided request will have their names converted to\n     * lower case before signing.\n     */\n    signableHeaders?: Set<string>\n}\n\nexport interface PresignOptions extends RequestSigningOptions {\n    /**\n     * The number of seconds before the presigned URL expires\n     */\n    expiresIn?: number\n\n    /**\n     * A set of strings whose representing headers that should not be hoisted\n     * to presigned request's query string. If not supplied, the presigner\n     * moves all the AWS-specific headers (starting with `x-amz-`) to the request\n     * query string. If supplied, these headers remain in the presigned request's\n     * header.\n     * All headers in the provided request will have their names converted to\n     * lower case and then checked for existence in the unhoistableHeaders set.\n     */\n    unhoistableHeaders?: Set<string>\n}\n\nexport interface Credentials {\n    /**\n     * AWS access key ID\n     */\n    readonly accessKeyId: string\n\n    /**\n     * AWS secret access key\n     */\n    readonly secretAccessKey: string\n\n    /**\n     * A security or session token to use with these credentials. Usually\n     * present for temporary credentials.\n     */\n    readonly sessionToken?: string\n}\n\nexport interface DateInfo {\n    /**\n     * ISO8601 formatted date string\n     */\n    longDate: string\n\n    /**\n     * String in the format YYYYMMDD\n     */\n    shortDate: string\n}\n\n/**\n * Escapes a URI following the AWS signature v4 escaping rules.\n *\n * @param URI {string} The URI to escape.\n * @returns {string} The escaped URI.\n */\nfunction escapeURI(URI: string): string {\n    const hexEncode = (c: string): string => {\n        return `%${c.charCodeAt(0).toString(16).toUpperCase()}`\n    }\n\n    return encodeURIComponent(URI).replace(/[!'()*]/g, hexEncode)\n}\n\n/**\n * formatDate formats a Date object into a ISO8601 formatted date string\n * and a string in the format YYYYMMDD.\n *\n * @param date {Date} The date to format.\n * @returns {DateInfo} The formatted date.\n */\nfunction formatDate(date: Date): DateInfo {\n    const longDate = iso8601(date).replace(/[\\-:]/g, '')\n    return {\n        longDate,\n        shortDate: longDate.slice(0, 8),\n    }\n}\n\n/**\n * Formats a time into an ISO 8601 string.\n *\n * @see https://en.wikipedia.org/wiki/ISO_8601\n *\n * @param time {number | string | Date} The time to format.\n * @returns {string} The ISO 8601 formatted time.\n */\nfunction iso8601(time: number | string | Date): string {\n    return toDate(time)\n        .toISOString()\n        .replace(/\\.\\d{3}Z$/, 'Z')\n}\n\n/**\n * Converts a time value into a Date object.\n *\n * @param time {number | string | Date} The time to convert.\n * @returns {Date} The resulting Date object.\n */\nfunction toDate(time: number | string | Date): Date {\n    if (typeof time === 'number') {\n        return new Date(time * 1000)\n    }\n\n    if (typeof time === 'string') {\n        if (Number(time)) {\n            return new Date(Number(time) * 1000)\n        }\n\n        return new Date(time)\n    }\n\n    return time\n}\n","/**\n *\n * @param value\n * @returns\n */\nexport function isArrayBuffer(value: any): value is ArrayBuffer {\n    return (\n        typeof ArrayBuffer === 'function' &&\n        (value instanceof ArrayBuffer ||\n            Object.prototype.toString.call(value) === '[object ArrayBuffer]')\n    )\n}\n\nexport function toFormUrlEncoded(form: any): string {\n    return Object.keys(form).reduce((params, key) => {\n        let value = form[key]\n        if (value !== undefined && value !== null) {\n            params.push(`${encodeURIComponent(key)}=${encodeURIComponent(value)}`)\n        }\n        return params;\n    }, [] as string[]).join('&')\n}","module.exports = require(\"k6/crypto\");","module.exports = require(\"k6/html\");","module.exports = require(\"k6/http\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { AWSClient } from './client'\nimport { AWSConfig } from './config'\nimport { SignatureV4, InvalidSignatureError } from './signature'\nimport { HTTPHeaders, SignedHTTPRequest } from './http'\nimport http, { RefinedResponse, ResponseType } from 'k6/http'\nimport { toFormUrlEncoded } from './utils'\nimport { AWSError } from './error'\n\nconst API_VERSION = '2012-11-05'\n\nexport class SQSClient extends AWSClient {\n    private readonly signature: SignatureV4\n    private readonly commonHeaders: HTTPHeaders\n\n    constructor(awsConfig: AWSConfig) {\n        super(awsConfig, 'sqs')\n\n        this.signature = new SignatureV4({\n            service: this.serviceName,\n            region: this.awsConfig.region,\n            credentials: {\n                accessKeyId: this.awsConfig.accessKeyId,\n                secretAccessKey: this.awsConfig.secretAccessKey,\n                sessionToken: this.awsConfig.sessionToken\n            },\n            uriEscapePath: true,\n            applyChecksum: true\n        })\n\n        this.commonHeaders = {\n            'Content-Type': 'application/x-www-form-urlencoded'\n        }\n    }\n\n    /**\n     * Delivers a message to the specified queue.\n     *\n     * @param {string} queueUrl - The URL of the Amazon SQS queue to which a message is sent. Queue URLs and names are case-sensitive.\n     * @param {string} messageBody - The message to send. The minimum size is one character. The maximum size is 256 KB.\n     * @param {Object} options - Options for the request\n     * @param {string} [options.messageDeduplicationId] - The message deduplication id.\n     * @param {string} [options.messageGroupId] - The message group ID for FIFO queues\n     * @returns {Message} - The message that was sent.\n     */\n    sendMessage(queueUrl: string, messageBody: string, options: { messageDeduplicationId?: string; messageGroupId?: string} = {}): Message {\n        const method = 'POST'\n\n        let body: any = {\n            Action: 'SendMessage',\n            Version: API_VERSION,\n            QueueUrl: queueUrl,\n            MessageBody: messageBody,\n        }\n\n        if (typeof(options.messageDeduplicationId) !== 'undefined') {\n            body = { ...body,\n                MessageDeduplicationId: options.messageDeduplicationId\n            }\n        }\n\n        if (typeof(options.messageGroupId) !== 'undefined') {\n            body = { ...body,\n                MessageGroupId: options.messageGroupId\n            }\n        }\n\n        const signedRequest: SignedHTTPRequest = this.signature.sign(\n            {\n                method: 'POST',\n                protocol: 'https',\n                hostname: this.host,\n                path: '/',\n                headers: {\n                    ...this.commonHeaders\n                },\n                body: toFormUrlEncoded(body)\n            },\n            {}\n        )\n\n        const res = http.request(method, signedRequest.url, signedRequest.body || '', {\n            headers: signedRequest.headers\n        })\n        this._handleError('SendMessage', res)\n\n        const parsed = res.html('SendMessageResponse > SendMessageResult')\n        return new Message(\n            parsed.find('MessageId').text(),\n            parsed.find('MD5OfMessageBody').text()\n        )\n    }\n\n    /**\n     * Returns a list of your queues in the current region.\n     *\n     * @param {ListQueuesRequestParameters} [parameters={}] request parameters\n     * @param {number} [ListQueuesRequestParameters.maxResults] Maximum number of results to include in the response. Value range is 1 to 1000. You must set maxResults to receive a value for nextToken in the response.\n     * @param {string} [ListQueuesRequestParameters.nextToken] Pagination token to request the next set of results.\n     * @param {string} [ListQueuesRequestParameters.queueNamePrefix] A string to use for filtering the list results. Only those queues whose name begins with the specified string are returned.\n     * @returns {Object}\n     * @returns {string[]} Object.queueUrls - A list of queue URLs, up to 1000 entries.\n     * @returns {string} [Object.nextToken] - In the future, you can use NextToken to request the next set of results.\n     */\n    listQueues(parameters: ListQueuesRequestParameters = {}): ListQueuesResponse {\n        const method = 'POST'\n\n        let body: any = {\n            Action: 'ListQueues',\n            Version: API_VERSION,\n        }\n\n        if (typeof(parameters?.maxResults) !== 'undefined') {\n            body = { ...body,\n                MaxResults: parameters.maxResults\n            }\n        }\n\n        if (typeof(parameters?.nextToken) !== 'undefined') {\n            body = { ...body,\n                NextToken: parameters.nextToken\n            }\n        }\n\n        if (typeof(parameters?.queueNamePrefix) !== 'undefined') {\n            body = { ...body,\n                QueueNamePrefix: parameters.queueNamePrefix\n            }\n        }\n\n        const signedRequest: SignedHTTPRequest = this.signature.sign(\n            {\n                method: 'POST',\n                protocol: 'https',\n                hostname: this.host,\n                path: '/',\n                headers: {\n                    ...this.commonHeaders,\n                    'Host': this.host\n                },\n                body: toFormUrlEncoded(body)\n            },\n            {}\n        )\n\n        const res = http.request(method, signedRequest.url, signedRequest.body || '', {\n            headers: signedRequest.headers\n        })\n        this._handleError('ListQueues', res)\n\n        let parsed = res.html()\n        return {\n            urls: parsed.find('QueueUrl').toArray().map(e => e.text()),\n            nextToken: parsed.find('NextToken').text() || undefined\n        }\n    }\n\n    private _handleError(operation: SQSOperation, response: RefinedResponse<ResponseType | undefined>) {\n        const errorCode: number = response.error_code\n        const errorMessage: string = response.error\n\n        if (errorMessage == '' && errorCode === 0) {\n            return\n        }\n\n        const awsError = AWSError.parseXML(response.body as string)\n        switch (awsError.code) {\n            case 'AuthorizationHeaderMalformed':\n                throw new InvalidSignatureError(awsError.message, awsError.code)\n            default:\n                throw new SQSServiceError(awsError.message, awsError.code || 'unknown', operation)\n        }\n    }\n}\n\n/**\n * An Amazon SQS message.\n */\nexport class Message {\n    /**\n     * A unique identifier for the message.\n     * A MessageIdis considered unique across all AWS accounts for an extended period of time.\n     */\n    id: string\n\n    /**\n     * An MD5 digest of the non-URL-encoded message body string.\n     */\n    bodyMD5: string\n\n    /**\n     * Instantiates a new Message object.\n     *\n     * @param id\n     * @param md5Ofbody\n     */\n    constructor(id: string, bodyMD5: string) {\n        this.id = id\n        this.bodyMD5 = bodyMD5\n    }\n}\n\n/**\n * SQSServiceError indicates an error occurred while interacting with the SQS API.\n */\nexport class SQSServiceError extends AWSError {\n    operation: SQSOperation;\n\n    constructor(message: string, code: string, operation: SQSOperation) {\n        super(message, code)\n        this.name = 'SQSServiceError'\n        this.operation = operation\n    }\n}\n\n/**\n * SQSOperation describes possible SQS operations.\n */\ntype SQSOperation = 'ListQueues' | 'SendMessage'\n\nexport interface SendMessageOptions {\n    /*\n     * The message deduplication ID for FIFO queues\n    */\n    messageDeduplicationId?: string\n\n    /*\n     * The message group ID for FIFO queues\n     */\n    messageGroupId?: string\n}\n\nexport interface ListQueuesRequestParameters {\n    /**\n     * Maximum number of results to include in the response. Value range is 1 to 1000.\n     */\n    maxResults?: number\n    /**\n     * Pagination token to request the next set of results.\n     */\n    nextToken?: string\n    /**\n     * A string to use for filtering the list results. Only those queues whose name begins with the specified string are returned.\n     * Queue URLs and names are case-sensitive.\n     */\n    queueNamePrefix?: string\n}\n\nexport interface ListQueuesResponse {\n    /**\n     * A list of queue URLs, up to 1,000 entries, or the value of MaxResults you sent in the request.\n     */\n    urls: string[]\n    /**\n     * Pagination token to include in the next request.\n     */\n    nextToken?: string\n}"],"names":["AWSClient","awsConfig","serviceName","this","undefined","_host","region","endpoint","host","AWSConfig","options","InvalidAWSConfigError","accessKeyId","length","secretAccessKey","sessionToken","scheme","__ENV","AWS_REGION","AWS_ACCESS_KEY_ID","AWS_SECRET_ACCESS_KEY","AWS_SESSION_TOKEN","message","Error","AMZ_ALGORITHM_QUERY_PARAM","AMZ_CREDENTIAL_QUERY_PARAM","AMZ_DATE_QUERY_PARAM","AMZ_EXPIRES_QUERY_PARAM","AMZ_SIGNATURE_QUERY_PARAM","AMZ_SIGNED_HEADERS_QUERY_PARAM","AMZ_TOKEN_QUERY_PARAM","AMZ_CONTENT_SHA256_HEADER","AMZ_DATE_HEADER","toLowerCase","AMZ_SIGNATURE_HEADER","AMZ_TOKEN_HEADER","AUTHORIZATION_HEADER","GENERATED_HEADERS","HOST_HEADER","ALWAYS_UNSIGNABLE_HEADERS","authorization","connection","expect","from","pragma","referer","te","trailer","upgrade","KEY_TYPE_IDENTIFIER","SIGNING_ALGORITHM_IDENTIFIER","MAX_PRESIGNED_TTL","EMPTY_SHA256","UNSIGNED_PAYLOAD","AWSError","code","name","xmlDocument","doc","parseHTML","find","text","hasHeader","soughtHeader","headers","Object","keys","SignatureV4","service","credentials","uriEscapePath","applyChecksum","request","signingDate","Date","signingService","signingRegion","unsignableHeaders","Set","signableHeaders","formatDate","longDate","shortDate","scope","constants","hostname","headerName","ArrayBuffer","isView","body","buffer","payloadHash","computePayloadHash","canonicalHeaders","computeCanonicalHeaders","signature","calculateSignature","deriveSigningKey","createCanonicalRequest","sort","join","url","protocol","path","query","serializeQueryParameters","originalRequest","expiresIn","unhoistableHeaders","InvalidSignatureError","moveHeadersToQuery","toString","signingKey","canonicalRequest","sortedHeaders","sortedCanonicalHeaders","map","signedHeaders","method","computeCanonicalURI","computeCanonicalQuerystring","credentialScope","hashedCanonicalRequest","crypto","stringToSign","createStringToSign","kSecret","kDate","kRegion","kService","normalizedURISegments","split","URISegment","pop","push","leading","startsWith","URI","trailing","endsWith","normalizedURI","encodeURIComponent","replace","serialized","key","value","escapeURI","Array","isArray","slice","reduce","encoded","concat","filter","canonicalHeaderName","has","trim","isArrayBuffer","requestCopy","JSON","parse","stringify","lowerCaseName","ignoreKeys","includes","c","charCodeAt","toUpperCase","date","time","Number","toDate","toISOString","prototype","call","toFormUrlEncoded","form","params","module","exports","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","n","getter","__esModule","d","a","definition","o","defineProperty","enumerable","get","obj","prop","hasOwnProperty","r","Symbol","toStringTag","API_VERSION","SQSClient","commonHeaders","queueUrl","messageBody","Action","Version","QueueUrl","MessageBody","messageDeduplicationId","MessageDeduplicationId","messageGroupId","MessageGroupId","signedRequest","sign","res","http","_handleError","parsed","html","Message","parameters","maxResults","MaxResults","nextToken","NextToken","queueNamePrefix","QueueNamePrefix","urls","toArray","e","operation","response","errorCode","error_code","error","awsError","SQSServiceError","id","bodyMD5"],"sourceRoot":""}