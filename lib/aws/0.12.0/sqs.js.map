{"version":3,"file":"sqs.js","mappings":"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","sources":["webpack://k6-jslib-aws/./src/internal/client.ts","webpack://k6-jslib-aws/./src/internal/config.ts","webpack://k6-jslib-aws/./src/internal/constants.ts","webpack://k6-jslib-aws/./src/internal/endpoint.ts","webpack://k6-jslib-aws/./src/internal/error.ts","webpack://k6-jslib-aws/./src/internal/http.ts","webpack://k6-jslib-aws/./src/internal/signature.ts","webpack://k6-jslib-aws/./src/internal/utils.ts","webpack://k6-jslib-aws/external commonjs \"k6/crypto\"","webpack://k6-jslib-aws/external commonjs \"k6/html\"","webpack://k6-jslib-aws/external commonjs \"k6/http\"","webpack://k6-jslib-aws/webpack/bootstrap","webpack://k6-jslib-aws/webpack/runtime/compat get default export","webpack://k6-jslib-aws/webpack/runtime/define property getters","webpack://k6-jslib-aws/webpack/runtime/hasOwnProperty shorthand","webpack://k6-jslib-aws/webpack/runtime/make namespace object","webpack://k6-jslib-aws/./src/internal/sqs.ts"],"sourcesContent":["import { AWSConfig } from './config'\nimport { Endpoint } from './endpoint'\nimport { HTTPHeaders } from './http'\n\n/**\n * Class allowing to build requests targeting AWS APIs\n *\n * This class is meant to be used as a base class for specific\n * services clients. See S3Client or SecretsManagerClient for\n * usage examples.\n */\nexport class AWSClient {\n    readonly awsConfig: AWSConfig\n    readonly serviceName: string\n\n    private _endpoint?: Endpoint\n\n    /**\n     * @param {AWSConfig} awsConfig - configuration attributes to use when interacting with AWS' APIs\n     * @param  {string} serviceName - name of the service to target.\n     * @param  {URIEncodingConfig} URIencodingConfig - configures how requests URIs should be encoded.\n     */\n    constructor(awsConfig: AWSConfig, serviceName: string) {\n        this.awsConfig = awsConfig\n        this.serviceName = serviceName\n\n        // If an endpoint is provided in the config, set it\n        // to ensure the default endpoint is not used.\n        if (awsConfig.endpoint != undefined) {\n            this._endpoint = awsConfig.endpoint\n        }\n    }\n\n    /**\n     * Represents the endpoint URL of the AWS service.\n     *\n     * If no custom endpoint is set, a default endpoint will be constructed\n     * using the service name and region provided in the AWS config.\n     *\n     * @type {Endpoint}\n     * @public\n     */\n    public get endpoint() {\n        if (this._endpoint == undefined) {\n            this._endpoint = new Endpoint(\n                `https://${this.serviceName}.${this.awsConfig.region}.amazonaws.com`\n            )\n        }\n        return this._endpoint\n    }\n\n    /**\n     * Updates the endpoint URL of the AWS service.\n     *\n     * This can be used to override the default AWS service endpoint or set a custom endpoint.\n     *\n     * @param {Endpoint} endpoint - The new endpoint to set for the AWS service.\n     * @public\n     */\n    public set endpoint(endpoint: Endpoint) {\n        this._endpoint = endpoint\n    }\n}\n\n/**\n * Type alias representing the result of an AWSClient.buildRequest call\n */\nexport interface AWSRequest {\n    readonly url: string\n    readonly headers: HTTPHeaders\n}\n","import { HTTPScheme } from './http'\nimport { Endpoint } from './endpoint'\n\n/** Class holding an AWS connection information */\nexport class AWSConfig {\n    /**\n     * The AWS region to connect to, as listed: https://docs.aws.amazon.com/general/latest/gr/rande.html\n     *\n     * @type {string}\n     */\n    region: string\n\n    /**\n     * Your user's AWS access key id credential.\n     *\n     * @type {string}\n     */\n    accessKeyId: string\n\n    /**\n     * Your user's AWS secret access key credential.\n     *\n     * @type {string}\n     */\n    secretAccessKey: string\n\n    /**\n     * Your user's AWS session token credential.\n     *\n     * @type {string}\n     */\n    sessionToken?: string\n\n    /**\n     * The AWS hostname to connect to.\n     *\n     * @type {string} ['amazonaws.com']\n     */\n    endpoint?: Endpoint\n\n    /**\n     * fromEnvironment creates an AWSConfig from the environment variables.\n     *\n     * It expects to find the following compulsory environment variables:\n     *  * AWS_REGION\n     *  * AWS_ACCESS_KEY_ID\n     *  * AWS_SECRET_ACCESS_KEY\n     *\n     * If set, the following optional environment variables are also used:\n     *  * AWS_SESSION_TOKEN\n     *\n     * Finally, the options parameter allows to explicitly set the scheme and endpoint\n     * to use when connecting to AWS.\n     *\n     * @param options {AWSConnectionOptions}\n     * @returns\n     */\n    static fromEnvironment(options?: AWSConnectionOptions): AWSConfig {\n        const region = __ENV.AWS_REGION\n        const accessKeyId = __ENV.AWS_ACCESS_KEY_ID\n        const secretAccessKey = __ENV.AWS_SECRET_ACCESS_KEY\n        const sessionToken: string | undefined = __ENV.AWS_SESSION_TOKEN\n        const endpoint: Endpoint | string | undefined = options?.endpoint\n\n        return new AWSConfig({\n            region,\n            accessKeyId,\n            secretAccessKey,\n            sessionToken,\n            endpoint: endpoint,\n        })\n    }\n\n    /**\n     * Create an AWSConfig.\n     *\n     * @param {AWSConfigOptions} options - configuration attributes to use when interacting with AWS' APIs\n     * @throws {InvalidArgumentException}\n     */\n    constructor(options: AWSConfigOptions) {\n        if (!options.region || options.region === '') {\n            throw new InvalidAWSConfigError(\n                `invalid AWS region; reason: expected a valid AWS region name (e.g. \"us-east-1\"), got \\`${options.region}\\``\n            )\n        }\n\n        if (!options.accessKeyId || options.accessKeyId === '') {\n            throw new InvalidAWSConfigError(\n                `invalid AWS access key ID; reason: expected a non empty string, got \\`${options.accessKeyId}\\``\n            )\n        }\n\n        if (options.accessKeyId.length < 16 || options.accessKeyId.length > 128) {\n            throw new InvalidAWSConfigError(\n                `invalid AWS access key ID; reason: size should be between 16 and 128 characters, got ${options.accessKeyId.length}`\n            )\n        }\n\n        if (!options.secretAccessKey || options.secretAccessKey === '') {\n            throw new InvalidAWSConfigError(\n                `invalid AWS secret access key; reason: expected a non empty string, got \\`${options.secretAccessKey}\\``\n            )\n        }\n\n        this.region = options.region\n        this.accessKeyId = options.accessKeyId\n        this.secretAccessKey = options.secretAccessKey\n\n        if (options.sessionToken !== undefined) {\n            this.sessionToken = options.sessionToken\n        }\n\n        if (options.endpoint !== undefined) {\n            if (typeof options.endpoint === 'string') {\n                this.endpoint = new Endpoint(options.endpoint)\n            } else {\n                this.endpoint = options.endpoint\n            }\n        }\n    }\n}\n\n/**\n * Interface representing AWSConfig options\n */\nexport interface AWSConfigOptions extends AWSConnectionOptions {\n    /**\n     * The AWS region to connect to, as listed: https://docs.aws.amazon.com/general/latest/gr/rande.html\n     *\n     * @type {string}\n     */\n    region: string\n\n    /**\n     * Your user's AWS access key id credential.\n     *\n     * @type {string}\n     */\n    accessKeyId: string\n\n    /**\n     * Your user's AWS secret access key credential.\n     *\n     * @type {string}\n     */\n    secretAccessKey: string\n\n    /**\n     * Your user's AWS session token credential.\n     *\n     * @type {string}\n     */\n    sessionToken?: string\n}\n\n/**\n * Interface representing AWS connection options\n */\nexport interface AWSConnectionOptions {\n    /**\n     * The HTTP scheme to use when connecting to AWS.\n     *\n     * @type {HTTPScheme}\n     */\n    scheme?: HTTPScheme\n\n    /**\n     * The AWS hostname to connect to.\n     *\n     * @type {string}\n     */\n    endpoint?: Endpoint | string\n}\n\n/** Class representing an invalid AWS configuration */\nexport class InvalidAWSConfigError extends Error {\n    constructor(message: string) {\n        super(message)\n    }\n}\n","/**\n * Standard Amazon AWS query parameter names\n */\nexport const AMZ_ALGORITHM_QUERY_PARAM = 'X-Amz-Algorithm'\nexport const AMZ_CREDENTIAL_QUERY_PARAM = 'X-Amz-Credential'\nexport const AMZ_DATE_QUERY_PARAM = 'X-Amz-Date'\nexport const AMZ_EXPIRES_QUERY_PARAM = 'X-Amz-Expires'\nexport const AMZ_SIGNATURE_QUERY_PARAM = 'X-Amz-Signature'\nexport const AMZ_SIGNED_HEADERS_QUERY_PARAM = 'X-Amz-SignedHeaders'\nexport const AMZ_TARGET_QUERY_PARAM = 'X-Amz-Target'\nexport const AMZ_TOKEN_QUERY_PARAM = 'X-Amz-Security-Token'\n\n/**\n * Standard Amazon AWS header names\n */\nexport const AMZ_CONTENT_SHA256_HEADER = 'x-amz-content-sha256'\nexport const AMZ_DATE_HEADER = AMZ_DATE_QUERY_PARAM.toLowerCase()\nexport const AMZ_SIGNATURE_HEADER = AMZ_SIGNATURE_QUERY_PARAM.toLowerCase()\nexport const AMZ_TARGET_HEADER = AMZ_TARGET_QUERY_PARAM.toLowerCase()\nexport const AMZ_TOKEN_HEADER = AMZ_TOKEN_QUERY_PARAM.toLowerCase()\n\n/**\n * Common HTTP headers we rely on in the signing process\n */\nexport const AUTHORIZATION_HEADER = 'authorization'\nexport const DATE_HEADER = 'date'\n\n/**\n * Lists the headers that are generated as part of the signature process.\n */\nexport const GENERATED_HEADERS = [AUTHORIZATION_HEADER, AMZ_DATE_HEADER, DATE_HEADER]\nexport const HOST_HEADER = 'host'\n\n/**\n * Lists the headers that should never be included in the\n * request signature signature process.\n */\nexport const ALWAYS_UNSIGNABLE_HEADERS = {\n    authorization: true,\n    'cache-control': true,\n    connection: true,\n    expect: true,\n    from: true,\n    'keep-alive': true,\n    'max-forwards': true,\n    pragma: true,\n    referer: true,\n    te: true,\n    trailer: true,\n    'transfer-encoding': true,\n    upgrade: true,\n    'user-agent': true,\n    'x-amzn-trace-id': true,\n}\n\n/**\n * Signature specific constants included in the signing process\n */\nexport const KEY_TYPE_IDENTIFIER = 'aws4_request'\nexport const SIGNING_ALGORITHM_IDENTIFIER = 'AWS4-HMAC-SHA256'\n\n/**\n * Maximum time to live of a signed request in seconds: 7 days.\n */\nexport const MAX_PRESIGNED_TTL = 60 * 60 * 24 * 7\n\n/**\n * SHA256 hash of an empty string (so we don't waste cycles recomputing it)\n */\nexport const EMPTY_SHA256 = 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\n\n/**\n * SHA256 hash of the unsigned payload constant (so we don't waste cycles recomputing it)\n */\nexport const UNSIGNED_PAYLOAD_SHA256 =\n    '5a41b0751e4537c6ff868564ab44a4d4ecceec2ec5b1c5f74d97422968e04237'\n\nexport const UNSIGNED_PAYLOAD = 'UNSIGNED-PAYLOAD'\n","/**\n * Represents an AWS service endpoint, providing utilities for parsing and handling URL details.\n */\nexport class Endpoint {\n    private _protocol: string\n    private _hostname: string\n    private _port?: number\n\n    // Default protocol, this can be globally changed as per application requirements\n    private static readonly DEFAULT_PROTOCOL = 'https' // Set this as per AWS.config\n\n    /**\n    //  * Constructs a new Endpoint instance.\n     *\n     * @param {string} endpoint - The URL to construct an endpoint from. If the URL omits a protocol, the default protocol will be used.\n     */\n    constructor(endpoint: string) {\n        const isDefaultProtocol =\n            !endpoint.startsWith('http://') && !endpoint.startsWith('https://')\n        const completeUrl = isDefaultProtocol\n            ? `${Endpoint.DEFAULT_PROTOCOL}://${endpoint}`\n            : endpoint\n\n        const protocolMatch = completeUrl.match(/^https?:/)\n        const hostAndPath = completeUrl.replace(/^https?:\\/\\//, '')\n        const [hostnameWithPort] = hostAndPath.split('/')\n\n        this._protocol = protocolMatch ? protocolMatch[0].slice(0, -1) : Endpoint.DEFAULT_PROTOCOL\n        this._hostname = hostnameWithPort.split(':')[0]\n        this._port = hostnameWithPort.split(':')[1]\n            ? parseInt(hostnameWithPort.split(':')[1])\n            : undefined\n    }\n\n    /**\n     * Creates a new Endpoint instance that is a copy of the current one.\n     *\n     * @returns {Endpoint} The copied Endpoint.\n     */\n    public copy(): Endpoint {\n        return new Endpoint(this.href)\n    }\n\n    /**\n     * Gets the host portion of the endpoint including the port.\n     *\n     * @returns {string} The host portion of the endpoint including the port.\n     */\n    public get host(): string {\n        return this._port ? `${this._hostname}:${this._port}` : this._hostname\n    }\n\n    /**\n     * Sets the host portion of the endpoint including the port.\n     *\n     * @param {string} value - The value to set for the host.\n     */\n    public set host(value: string) {\n        const [hostname, port] = value.split(':')\n        this._hostname = hostname\n        this._port = port ? parseInt(port) : undefined\n    }\n\n    /**\n     * Gets the host portion of the endpoint without the port.\n     *\n     * @returns {string} The host portion of the endpoint.\n     */\n    public get hostname(): string {\n        return this._hostname\n    }\n\n    /**\n     * Sets the host portion of the endpoint without the port.\n     *\n     * @param {string} value - The value to set for the hostname.\n     */\n    public set hostname(value: string) {\n        this._hostname = value\n    }\n\n    /**\n     * Gets the full URL of the endpoint.\n     *\n     * @returns {string} The full URL of the endpoint.\n     */\n    public get href(): string {\n        return `${this.protocol}://${this.host}`\n    }\n\n    /**\n     * Sets the full URL of the endpoint.\n     *\n     * @param {string} value - The value to set for the full URL.\n     */\n    public set href(value: string) {\n        const protocolMatch = value.match(/^https?:/)\n        const withoutProtocol = value.replace(/^https?:\\/\\//, '')\n        const [hostnameWithPort] = withoutProtocol.split('/')\n\n        this._protocol = protocolMatch ? protocolMatch[0].slice(0, -1) : Endpoint.DEFAULT_PROTOCOL // remove the trailing colon\n        this._hostname = hostnameWithPort.split(':')[0]\n        this._port = hostnameWithPort.split(':')[1]\n            ? parseInt(hostnameWithPort.split(':')[1])\n            : undefined\n    }\n\n    /**\n     * Gets the port of the endpoint.\n     *\n     * @returns {number|undefined} The port of the endpoint.\n     */\n    public get port(): number | undefined {\n        return this._port\n    }\n\n    /**\n     * Sets the port of the endpoint.\n     *\n     * @param {number|undefined} value - The value to set for the port.\n     */\n    public set port(value: number | undefined) {\n        this._port = value\n    }\n\n    /**\n     * Gets the protocol (http or https) of the endpoint URL.\n     *\n     * @returns {string} The protocol of the endpoint URL.\n     */\n    public get protocol(): string {\n        return this._protocol\n    }\n\n    /**\n     * Sets the protocol (http or https) of the endpoint URL.\n     *\n     * @param {string} value - The value to set for the protocol.\n     */\n    public set protocol(value: string) {\n        this._protocol = value\n    }\n}\n","import { JSONObject } from './json'\nimport { parseHTML } from 'k6/html'\nimport { Response } from 'k6/http'\n\n/**\n * Base class to derive errors from\n *\n * Inspired from AWS official error types, as\n * described in:\n *   * https://aws.amazon.com/blogs/developer/service-error-handling-modular-aws-sdk-js/\n *   * https://github.com/aws/aws-sdk-js/blob/master/lib/error.d.ts\n */\nexport class AWSError extends Error {\n    /**\n     * Error code issued by the service (if any)\n     */\n    code?: string\n\n    /**\n     * Create an AWSError\n     *\n     * @param {string} message - A longer human readable error message.\n     * @param {string?} code - A unique short code representing the error that was emitted\n     */\n    constructor(message: string, code?: string) {\n        super(message)\n        this.name = 'AWSError'\n        this.code = code\n    }\n\n    /**\n     * Parse an AWSError from an XML document\n     *\n     * @param  {string} xmlDocument - Serialized XML document to parse the error from\n     */\n    static parseXML(xmlDocument: string): AWSError {\n        const doc = parseHTML(xmlDocument)\n        return new AWSError(doc.find('Message').text(), doc.find('Code').text())\n    }\n\n    static parse(response: Response): AWSError {\n        if (response.headers['Content-Type'] === 'application/json') {\n            const error = (response.json() as JSONObject) || {}\n            const message =\n                error.Message ||\n                error.message ||\n                error.__type ||\n                'An error occurred on the server side'\n            const code = response.headers['X-Amzn-Errortype'] || error.__type\n            return new AWSError(message as string, code as string)\n        } else {\n            return AWSError.parseXML(response.body as string)\n        }\n    }\n}\n","import { Endpoint } from './endpoint'\n\n/**\n * Type representing HTTP schemes\n */\nexport type HTTPScheme = 'http' | 'https'\n\n/**\n * Type representing HTTP Methods\n *\n */\nexport type HTTPMethod = 'GET' | 'POST' | 'PUT' | 'DELETE'\n\n/**\n * Type alias representing HTTP Headers\n */\nexport type HTTPHeaders = { [key: string]: string }\n\n/**\n * HTTPHeaderBag is a type alias representing HTTP Headers\n */\nexport type HTTPHeaderBag = Record<string, string>\n\nexport function hasHeader(soughtHeader: string, headers: HTTPHeaderBag): boolean {\n    soughtHeader = soughtHeader.toLowerCase()\n\n    for (const headerName of Object.keys(headers)) {\n        if (soughtHeader === headerName.toLowerCase()) {\n            return true\n        }\n    }\n\n    return false\n}\n\n/**\n * QueryParameterBag is a type alias representing HTTP Query Parameters\n */\nexport type QueryParameterBag = Record<string, string | Array<string>>\n\n/**\n * HTTPRequest represents an HTTP request\n */\nexport interface HTTPRequest {\n    /**\n     * The HTTP method to use\n     */\n    method: HTTPMethod\n\n    /**\n     * Represents an AWS service endpoint, providing utilities for parsing and handling URL details.\n     */\n    endpoint: Endpoint\n\n    /**\n     * The path to the resource\n     */\n    path: string\n\n    /**\n     * The query parameters to include in the request\n     */\n    query?: QueryParameterBag\n\n    /**\n     * The headers to include in the request\n     */\n    headers: HTTPHeaderBag\n\n    /**\n     * The body of the request\n     */\n    body?: string | ArrayBuffer | null\n}\n\n/**\n * SignedHTTPRequest represents an HTTP request that has been signed\n * with an AWS signature. It is a superset of HTTPRequest adding\n * the following fields:\n * - url: the fully qualified URL of the request that can be used in a k6 http.request.\n */\nexport interface SignedHTTPRequest extends HTTPRequest {\n    url: string\n}\n","import crypto from 'k6/crypto'\n\nimport * as constants from './constants'\nimport { AWSError } from './error'\nimport { hasHeader, HTTPHeaderBag, HTTPRequest, QueryParameterBag, SignedHTTPRequest } from './http'\nimport { isArrayBuffer } from './utils'\n\n/**\n * SignatureV4 can be used to sign HTTP requests and presign URLs using the AWS Signature\n * Version 4 signing process.\n *\n * It offers two signing methods:\n * - sign: signs the request headers and payload\n * - presign: returns a presigned (authorization information contained in the query string) URL\n *\n * @see https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html\n */\nexport class SignatureV4 {\n    /**\n     * The name of the service to sign for.\n     */\n    private readonly service: string\n\n    /**\n     * The name of the region to sign for.\n     */\n    private readonly region: string\n\n    /**\n     * The credentials with which the request should be signed.\n     */\n    private readonly credentials: Credentials\n\n    /**\n     * Whether to uri-escape the request URI path as part of computing the\n     * canonical request string. This is required for every AWS service, except\n     * Amazon S3, as of late 2017.\n     *\n     * @default [true]\n     */\n    private readonly uriEscapePath: boolean\n\n    /**\n     * Whether to calculate a checksum of the request body and include it as\n     * either a request header (when signing) or as a query string parameter\n     * (when presigning). This is required for AWS Glacier and Amazon S3 and optional for\n     * every other AWS service as of late 2017.\n     *\n     * @default [true]\n     */\n    private readonly applyChecksum: boolean\n\n    // TODO: uriEscapePath and applyChecksum should not be present in the constructor\n    constructor({\n        service,\n        region,\n        credentials,\n        uriEscapePath,\n        applyChecksum,\n    }: SignatureV4Options) {\n        this.service = service\n        this.region = region\n        this.credentials = credentials\n        this.uriEscapePath = typeof uriEscapePath === 'boolean' ? uriEscapePath : true\n        this.applyChecksum = typeof applyChecksum === 'boolean' ? applyChecksum : true\n    }\n\n    /**\n     * Includes AWS v4 signing information to the provided HTTP request.\n     *\n     * This method adds an Authorization header to the request, containing\n     * the signature and other signing information. It also returns a preformatted\n     * URL that can be used to make the k6 http request.\n     *\n     * This method mutates the request object.\n     *\n     * @param request {HTTPRequest} The request to sign.\n     * @param options {Partial<RequestSigningOptions>} Options for signing the request.\n     * @returns {SignedHTTPRequest} The signed request.\n     */\n    sign(request: HTTPRequest, options: Partial<RequestSigningOptions> = {}): SignedHTTPRequest {\n        // Set default values for options which are not provided by the user.\n        const defaultOptions = {\n            signingDate: new Date(),\n            unsignableHeaders: new Set<string>(),\n            signableHeaders: new Set<string>(),\n        }\n\n        // Merge default options with the ones maybe provided by the user.\n        const finalOptions = { ...defaultOptions, ...options }\n\n        const { longDate, shortDate }: DateInfo = formatDate(finalOptions.signingDate)\n        const service = finalOptions.signingService || this.service\n        const region = finalOptions.signingRegion || this.region\n        const scope = `${shortDate}/${region}/${service}/${constants.KEY_TYPE_IDENTIFIER}`\n\n        // Required by the specification:\n        //   \"For HTTP/1.1 requests, you must include the host header at a minimum.\n        //   Standard headers like content-type are optional.\n        //   For HTTP/2 requests, you must include the :authority header instead of\n        //   the host header. Different services might require other headers.\"\n        if (!request.headers[constants.HOST_HEADER]) {\n          request.headers[constants.HOST_HEADER] = request.endpoint.hostname\n      }\n        \n\n        // Filter out headers that will be generated and managed by the signing process.\n        // If the user provide any of those as part of the HTTPRequest's headers, they\n        // will be ignored.\n        for (const headerName of Object.keys(request.headers)) {\n            if (constants.GENERATED_HEADERS.indexOf(headerName.toLowerCase()) > -1) {\n                delete request.headers[headerName]\n            }\n        }\n\n        request.headers[constants.AMZ_DATE_HEADER] = longDate\n        if (this.credentials.sessionToken) {\n            request.headers[constants.AMZ_TOKEN_HEADER] = this.credentials.sessionToken\n        }\n\n        // If the request body is a typed array, we need to convert it to a buffer\n        // so that we can calculate the checksum.\n        if (ArrayBuffer.isView(request.body)) {\n            request.body = request.body.buffer\n        }\n\n        // Ensure we avoid passing undefined to the crypto hash function.\n        if (!request.body) {\n            request.body = ''\n        }\n\n        const payloadHash = this.computePayloadHash(request)\n        if (\n            !hasHeader(constants.AMZ_CONTENT_SHA256_HEADER, request.headers) &&\n            this.applyChecksum\n        ) {\n            request.headers[constants.AMZ_CONTENT_SHA256_HEADER] = payloadHash\n        }\n\n        const canonicalHeaders = this.computeCanonicalHeaders(\n            request,\n            finalOptions.unsignableHeaders,\n            finalOptions.signableHeaders\n        )\n        const signature = this.calculateSignature(\n            longDate,\n            scope,\n            this.deriveSigningKey(this.credentials, service, region, shortDate),\n            this.createCanonicalRequest(request, canonicalHeaders, payloadHash)\n        )\n\n        /**\n         * Step 4 of the signing process: add the signature to the HTTP request's headers.\n         *\n         * @see https://docs.aws.amazon.com/general/latest/gr/sigv4-add-signature-to-request.html\n         */\n        request.headers[constants.AUTHORIZATION_HEADER] =\n            `${constants.SIGNING_ALGORITHM_IDENTIFIER} ` +\n            `Credential=${this.credentials.accessKeyId}/${scope}, ` +\n            `SignedHeaders=${Object.keys(canonicalHeaders).sort().join(';')}, ` +\n            `Signature=${signature}`\n\n        // If a request path was provided, add it to the URL\n        let url = request.endpoint.href\n        if (request.path) {\n            url += request.path\n        }\n\n        // If a request query string was provided, add it to the URL\n        if (request.query) {\n            // We exclude the signature from the query string\n            url += `?${this.serializeQueryParameters(request.query)}`\n        }\n\n        return {\n            url: url,\n            ...request,\n        }\n    }\n\n    /**\n     * Produces a presigned URL with AWS v4 signature information for the provided HTTP request.\n     *\n     * A presigned URL is a URL that contains the authorization information\n     * (signature and other signing information) in the query string. This method\n     * returns a preformatted URL that can be used to make the k6 http request.\n     *\n     * @param originalRequest - The original request to presign.\n     * @param options - Options controlling the signing of the request.\n     * @returns A signed request, including the presigned URL.\n     */\n    presign(originalRequest: HTTPRequest, options: PresignOptions = {}): SignedHTTPRequest {\n        const {\n            signingDate = new Date(),\n            expiresIn = 3600,\n            unsignableHeaders,\n            unhoistableHeaders,\n            signableHeaders,\n            signingRegion,\n            signingService,\n        } = options\n        const { longDate, shortDate }: DateInfo = formatDate(signingDate)\n        const region = signingRegion || this.region\n        const service = signingService || this.service\n\n        if (expiresIn > constants.MAX_PRESIGNED_TTL) {\n            throw new InvalidSignatureError(\n                \"Signature version 4 presigned URLs can't be valid for more than 7 days\"\n            )\n        }\n\n        const scope = `${shortDate}/${region}/${service}/${constants.KEY_TYPE_IDENTIFIER}`\n        const request = this.moveHeadersToQuery(originalRequest, { unhoistableHeaders })\n\n        // Required by the specification:\n        //   \"For HTTP/1.1 requests, you must include the host header at a minimum.\n        //   Standard headers like content-type are optional.\n        //   For HTTP/2 requests, you must include the :authority header instead of\n        //   the host header. Different services might require other headers.\"\n        if (!request.headers[constants.HOST_HEADER]) {\n          request.headers[constants.HOST_HEADER] = originalRequest.endpoint.hostname\n      }\n\n        // If the user provided a session token, include it in the signed url query string.\n        if (this.credentials.sessionToken) {\n            request.query[constants.AMZ_TOKEN_QUERY_PARAM] = this.credentials.sessionToken\n        }\n\n        // Add base signing query parameters to the request, as described in the documentation\n        // @see https://docs.aws.amazon.com/general/latest/gr/sigv4-add-signature-to-request.html\n        request.query[constants.AMZ_ALGORITHM_QUERY_PARAM] = constants.SIGNING_ALGORITHM_IDENTIFIER\n        request.query[\n            constants.AMZ_CREDENTIAL_QUERY_PARAM\n        ] = `${this.credentials.accessKeyId}/${scope}`\n        request.query[constants.AMZ_DATE_QUERY_PARAM] = longDate\n        request.query[constants.AMZ_EXPIRES_QUERY_PARAM] = expiresIn.toString(10)\n\n        const canonicalHeaders = this.computeCanonicalHeaders(\n            request,\n            unsignableHeaders,\n            signableHeaders\n        )\n        request.query[constants.AMZ_SIGNED_HEADERS_QUERY_PARAM] = Object.keys(canonicalHeaders)\n            .sort()\n            .join(';')\n\n        const signingKey = this.deriveSigningKey(this.credentials, service, region, shortDate)\n\n        // Computing the payload from the original request. This is required\n        // in the event the user attempts to produce a presigned URL for s3,\n        // which requires the payload hash to be 'UNSIGNED-PAYLOAD'.\n        //\n        // To that effect, users need to set the 'x-amz-content-sha256' header,\n        // and mark it as unhoistable and unsignable. When setup this way,\n        // the computePayloadHash method will then return the string 'UNSIGNED-PAYLOAD'.\n        const payloadHash = this.computePayloadHash(originalRequest)\n        const canonicalRequest = this.createCanonicalRequest(request, canonicalHeaders, payloadHash)\n\n        request.query[constants.AMZ_SIGNATURE_QUERY_PARAM] = this.calculateSignature(\n            longDate,\n            scope,\n            signingKey,\n            canonicalRequest\n        )\n\n        // If a request path was provided, add it to the URL\n        let url = request.endpoint.href\n        if (request.path) {\n            url += request.path\n        }\n\n        // If a request query string was provided, add it to the URL\n        if (request.query) {\n            url += `?${this.serializeQueryParameters(request.query)}`\n        }\n\n        return { url: url, ...request }\n    }\n\n    /**\n     * Create a string including information from your request\n     * in a AWS signature v4 standardized (canonical) format.\n     *\n     * Step 1 of the signing process: create the canonical request string.\n     * @see https://docs.aws.amazon.com/general/latest/gr/sigv4-create-canonical-request.html\n     *\n     * @param request {HTTPRequest} The request to sign.\n     * @param canonicalHeaders {HTTPHeaderBag} The request's canonical headers.\n     * @param payloadHash {string} The hexadecimally encoded request's payload hash .\n     * @returns {string} The canonical request string.\n     */\n    private createCanonicalRequest(\n        request: HTTPRequest,\n        canonicalHeaders: HTTPHeaderBag,\n        payloadHash: string\n    ): string {\n        const sortedHeaders = Object.keys(canonicalHeaders).sort()\n        const sortedCanonicalHeaders = sortedHeaders\n            .map((name) => `${name}:${canonicalHeaders[name]}`)\n            .join('\\n')\n        const signedHeaders = sortedHeaders.join(';')\n\n        return (\n            `${request.method}\\n` +\n            `${this.computeCanonicalURI(request)}\\n` +\n            `${this.computeCanonicalQuerystring(request)}\\n` +\n            `${sortedCanonicalHeaders}\\n\\n` +\n            `${signedHeaders}\\n` +\n            `${payloadHash}`\n        )\n    }\n\n    /**\n     * Create the \"string to sign\" part of the signature Version 4 protocol.\n     *\n     * The \"string to sign\" includes meta information about your request and\n     * about the canonical request that you created with `createCanonicalRequest`.\n     * It is used hand in hand with the signing key to create the request signature.\n     * Step 2 of the signing process: create the string to sign.\n     * @see https://docs.aws.amazon.com/general/latest/gr/sigv4-create-string-to-sign.html\n     *\n     * @param longDate {string} The request's date in iso 8601 format.\n     * @param credentialScope {string} The request's credential scope.\n     * @param canonicalRequest {string} The request's canonical request.\n     * @returns {string} The \"string to sign\".\n     */\n    private createStringToSign(\n        longDate: string,\n        credentialScope: string,\n        canonicalRequest: string\n    ): string {\n        const hashedCanonicalRequest = crypto.sha256(canonicalRequest, 'hex')\n\n        return (\n            `${constants.SIGNING_ALGORITHM_IDENTIFIER}\\n` +\n            `${longDate}\\n` +\n            `${credentialScope}\\n` +\n            `${hashedCanonicalRequest}`\n        )\n    }\n\n    /**\n     * Calculte the signature for AWS signature version 4.\n     *\n     * Step 3 of the signing process: create the signature.\n     * @see https://docs.aws.amazon.com/general/latest/gr/sigv4-calculate-signature.html\n     *\n     * @param longDate {string} The request's date in iso 8601 format.\n     * @param credentialScope {string} The request's credential scope.\n     * @param signingKey {string} the signing key as computed by the deriveSigningKey method.\n     * @param canonicalRequest {string} The request's canonical request.\n     * @returns {string} The signature.\n     */\n    private calculateSignature(\n        longDate: string,\n        credentialScope: string,\n        signingKey: Uint8Array,\n        canonicalRequest: string\n    ): string {\n        const stringToSign = this.createStringToSign(longDate, credentialScope, canonicalRequest)\n        return crypto.hmac('sha256', signingKey, stringToSign, 'hex')\n    }\n\n    /**\n     * Derives the signing key for authenticating requests signed with\n     * the Signature version 4 authentication protocol.\n     *\n     * deriveSigningKey produces a signing key by creating a series of\n     * hash-based message authentication codes (HMACs) represented in\n     * a binary format.\n     *\n     * The derived signing key is specific to the date it's made at, as well as\n     * the service and region it targets.\n     *\n     * @param credentials {AWSCredentials} The credentials to use for signing.\n     * @param service {string} The service the request is targeted at.\n     * @param region {string} The region the request is targeted at.\n     * @param shortDate {string} The request's date in YYYYMMDD format.\n     * @returns {Uint8Array} The derived signing key.\n     */\n    private deriveSigningKey(\n        credentials: Credentials,\n        service: string,\n        region: string,\n        shortDate: string\n    ): Uint8Array {\n        const kSecret: string = credentials.secretAccessKey\n        /**\n         * crypto.hmac returns a value of type `bytes`, which is an alias for\n         * number[]. However, the secret argument to hmac needs to either be\n         * a `string` or ArrayBuffer. The only way to get around this is to\n         * cast the return value of hmac to any, thus, we disable the no-explicit-any\n         * ESLint rule for this function.\n         */\n        /* eslint-disable @typescript-eslint/no-explicit-any */\n        const kDate: any = crypto.hmac('sha256', 'AWS4' + kSecret, shortDate, 'binary')\n        const kRegion: any = crypto.hmac('sha256', kDate, region, 'binary')\n        const kService: any = crypto.hmac('sha256', kRegion, service, 'binary')\n        const kSigning: any = crypto.hmac('sha256', kService, 'aws4_request', 'binary')\n        /* eslint-enable @typescript-eslint/no-explicit-any */\n\n        return kSigning\n    }\n\n    /**\n     * Create a string that includes information from your request\n     * in a AWS signature v4 standardized (canonical) format.\n     *\n     * @param param0 {HTTPRequest} The request to sign.\n     * @returns {string} The canonical URI.\n     */\n    private computeCanonicalURI({ path }: HTTPRequest): string {\n        if (this.uriEscapePath) {\n            // Non-S3 services, we normalize the path and then double URI encode it.\n            // Ref: \"Remove Dot Segments\" https://datatracker.ietf.org/doc/html/rfc3986#section-5.2.4\n            const normalizedURISegments = []\n\n            for (const URISegment of path.split('/')) {\n                if (URISegment?.length === 0) {\n                    continue\n                }\n\n                if (URISegment === '.') {\n                    continue\n                }\n\n                if (URISegment === '..') {\n                    normalizedURISegments.pop()\n                } else {\n                    normalizedURISegments.push(URISegment)\n                }\n            }\n\n            // Normalize the URI\n            const leading = path?.startsWith('/') ? '/' : ''\n            const URI = normalizedURISegments.join('/')\n            const trailing = normalizedURISegments.length > 0 && path?.endsWith('/') ? '/' : ''\n            const normalizedURI = `${leading}${URI}${trailing}`\n\n            const doubleEncoded = encodeURIComponent(normalizedURI)\n\n            return doubleEncoded.replace(/%2F/g, '/')\n        }\n\n        // For S3, we shouldn't normalize the path. For example, object name\n        // my-object//example//photo.user should not be normalized to\n        // my-object/example/photo.user\n        return path\n    }\n\n    /**\n     * Serializes the request's query parameters into their canonical\n     * string version. If the request does not include a query parameters,\n     * returns an empty string.\n     *\n     * @param param0 {HTTPRequest} The request containing the query parameters.\n     * @returns {string} The canonical query string.\n     */\n    private computeCanonicalQuerystring({ query = {} }: HTTPRequest): string {\n        const keys: Array<string> = []\n        const serialized: Record<string, string> = {}\n\n        for (const key of Object.keys(query).sort()) {\n            if (key.toLowerCase() === constants.AMZ_SIGNATURE_HEADER) {\n                continue\n            }\n\n            keys.push(key)\n            const value = query[key]\n\n            if (typeof value === 'string') {\n                serialized[key] = `${escapeURI(key)}=${escapeURI(value)}`\n            } else if (Array.isArray(value)) {\n                serialized[key] = value\n                    .slice(0)\n                    .sort()\n                    .reduce(\n                        (encoded: Array<string>, value: string) =>\n                            encoded.concat([`${escapeURI(key)}=${escapeURI(value)}`]),\n                        []\n                    )\n                    .join('&')\n            }\n        }\n\n        return keys\n            .map((key) => serialized[key])\n            .filter((serialized) => serialized)\n            .join('&')\n    }\n\n    /**\n     * Create the canonical form of the request's headers.\n     * Canonical headers consist of all the HTTP headers you\n     * are including with the signed request.\n     *\n     * @param param0 {HTTPRequest} The request to compute the canonical headers of.\n     * @param unsignableHeaders {Set<string>} The headers that should not be signed.\n     * @param signableHeaders {Set<string>} The headers that should be signed.\n     * @returns {string} The canonical headers.\n     */\n    private computeCanonicalHeaders(\n        { headers }: HTTPRequest,\n        unsignableHeaders?: Set<string>,\n        signableHeaders?: Set<string>\n    ): HTTPHeaderBag {\n        const canonicalHeaders: HTTPHeaderBag = {}\n\n        for (const headerName of Object.keys(headers).sort()) {\n            if (headers[headerName] == undefined) {\n                continue\n            }\n\n            const canonicalHeaderName = headerName.toLowerCase()\n            if (\n                canonicalHeaderName in constants.ALWAYS_UNSIGNABLE_HEADERS ||\n                unsignableHeaders?.has(canonicalHeaderName)\n            ) {\n                if (\n                    !signableHeaders ||\n                    (signableHeaders && !signableHeaders.has(canonicalHeaderName))\n                ) {\n                    continue\n                }\n            }\n\n            if (typeof headers[headerName] === 'string') {\n                canonicalHeaders[canonicalHeaderName] = headers[headerName] = headers[headerName]\n                    .trim()\n                    .replace(/\\s+/g, ' ')\n            }\n        }\n\n        return canonicalHeaders\n    }\n\n    /**\n     * Computes the SHA256 cryptographic hash of the request's body.\n     *\n     * If the headers contain the 'X-Amz-Content-Sha256' header, then\n     * the value of that header is returned instead. This proves useful\n     * when, for example, presiging a URL for S3, as the payload hash\n     * must always be equal to 'UNSIGNED-PAYLOAD'.\n     *\n     * @param param0 {HTTPRequest} The request to compute the payload hash of.\n     * @returns {string} The hex encoded SHA256 payload hash, or the value of the 'X-Amz-Content-Sha256' header.\n     */\n    private computePayloadHash({ headers, body }: HTTPRequest): string {\n        // for (const headerName of Object.keys(headers)) {\n        //     // If the header is present, return its value.\n        //     // So that we let the 'UNSIGNED-PAYLOAD' value pass through.\n        //     if (headerName.toLowerCase() === constants.AMZ_CONTENT_SHA256_HEADER) {\n        //         return headers[headerName]\n        //     }\n        // }\n\n        if (headers[constants.AMZ_CONTENT_SHA256_HEADER]) {\n            return headers[constants.AMZ_CONTENT_SHA256_HEADER]\n        }\n\n        if (body == undefined) {\n            return constants.EMPTY_SHA256\n        }\n\n        if (typeof body === 'string' || isArrayBuffer(body)) {\n            return crypto.sha256(body, 'hex').toLowerCase()\n        }\n\n        if (ArrayBuffer.isView(body)) {\n            // If the request body is a typed array, we need to convert it to a buffer\n            // so that we can calculate the checksum.\n            return crypto.sha256((body as DataView).buffer, 'hex').toLowerCase()\n        }\n\n        return constants.UNSIGNED_PAYLOAD\n    }\n\n    /**\n     * Moves a request's headers to its query parameters.\n     *\n     * The operation will ignore any amazon standard headers, prefixed\n     * with 'X-Amz-'. It will also ignore any headers specified as unhoistable\n     * by the options.\n     *\n     * The operation will delete the headers from the request.\n     *\n     * @param request {HTTPRequest} The request to move the headers from.\n     * @param options\n     * @returns {HTTPRequest} The request with the headers moved to the query parameters.\n     */\n    private moveHeadersToQuery(\n        request: HTTPRequest,\n        options: { unhoistableHeaders?: Set<string> } = {}\n    ): HTTPRequest & { query: QueryParameterBag } {\n        const requestCopy = JSON.parse(JSON.stringify(request))\n        const { headers, query = {} as QueryParameterBag } = requestCopy\n\n        for (const name of Object.keys(headers)) {\n            const lowerCaseName = name.toLowerCase()\n            if (\n                lowerCaseName.slice(0, 6) === 'x-amz-' &&\n                !options.unhoistableHeaders?.has(lowerCaseName)\n            ) {\n                query[name] = headers[name]\n                delete headers[name]\n            }\n        }\n\n        return {\n            ...requestCopy,\n            headers,\n            query,\n        }\n    }\n\n    /**\n     * Serializes a HTTPRequest's query parameter bag into a string.\n     *\n     * @param query {QueryParameterBag} The query parameters to serialize.\n     * @param ignoreKeys {Set<string>} The keys to ignore.\n     * @returns {string} The serialized, and ready to use in a URL, query parameters.\n     */\n    private serializeQueryParameters(query: QueryParameterBag, ignoreKeys?: string[]): string {\n        const keys: Array<string> = []\n        const serialized: Record<string, string> = {}\n\n        for (const key of Object.keys(query).sort()) {\n            if (ignoreKeys?.includes(key.toLowerCase())) {\n                continue\n            }\n\n            keys.push(key)\n            const value = query[key]\n\n            if (typeof value === 'string') {\n                serialized[key] = `${escapeURI(key)}=${escapeURI(value)}`\n            } else if (Array.isArray(value)) {\n                serialized[key] = value\n                    .slice(0)\n                    .sort()\n                    .reduce(\n                        (encoded: Array<string>, value: string) =>\n                            encoded.concat([`${escapeURI(key)}=${escapeURI(value)}`]),\n                        []\n                    )\n                    .join('&')\n            }\n        }\n\n        return keys\n            .map((key) => serialized[key])\n            .filter((serialized) => serialized)\n            .join('&')\n    }\n}\n\n/**\n * Error indicating an Invalid signature has been sent to AWS services\n *\n * Inspired from AWS official error types, as\n * described in:\n *   * https://aws.amazon.com/blogs/developer/service-error-handling-modular-aws-sdk-js/\n *   * https://github.com/aws/aws-sdk-js/blob/master/lib/error.d.ts\n */\nexport class InvalidSignatureError extends AWSError {\n    /**\n     * Constructs an InvalidSignatureError\n     *\n     * @param  {string} message - human readable error message\n     */\n    constructor(message: string, code?: string) {\n        super(message, code)\n        this.name = 'InvalidSignatureError'\n    }\n}\n\nexport interface SignatureV4Options {\n    /**\n     * The name of the service to sign for.\n     */\n    service: string\n\n    /**\n     * The name of the region to sign for.\n     */\n    region: string\n\n    /**\n     * The credentials with which the request should be signed.\n     */\n    credentials: Credentials\n\n    /**\n     * Whether to uri-escape the request URI path as part of computing the\n     * canonical request string. This is required for every AWS service, except\n     * Amazon S3, as of late 2017.\n     *\n     * @default [true]\n     */\n    uriEscapePath?: boolean\n\n    /**\n     * Whether to calculate a checksum of the request body and include it as\n     * either a request header (when signing) or as a query string parameter\n     * (when presigning). This is required for AWS Glacier and Amazon S3 and optional for\n     * every other AWS service as of late 2017.\n     *\n     * @default [true]\n     */\n    applyChecksum?: boolean\n}\n\nexport interface SignOptions {\n    /**\n     * The date and time to be used as signature metadata. This value should be\n     * a Date object, a unix (epoch) timestamp, or a string that can be\n     * understood by the JavaScript `Date` constructor.If not supplied, the\n     * value returned by `new Date()` will be used.\n     */\n    signingDate?: Date\n\n    /**\n     * The service signing name. It will override the service name of the signer\n     * in current invocation\n     */\n    signingService?: string\n\n    /**\n     * The region name to sign the request. It will override the signing region of the\n     * signer in current invocation\n     */\n    signingRegion?: string\n}\n\nexport interface RequestSigningOptions extends SignOptions {\n    /**\n     * A set of strings whose members represents headers that cannot be signed.\n     * All headers in the provided request will have their names converted to\n     * lower case and then checked for existence in the unsignableHeaders set.\n     */\n    unsignableHeaders?: Set<string>\n\n    /**\n     * A set of strings whose members represents headers that should be signed.\n     * Any values passed here will override those provided via unsignableHeaders,\n     * allowing them to be signed.\n     *\n     * All headers in the provided request will have their names converted to\n     * lower case before signing.\n     */\n    signableHeaders?: Set<string>\n}\n\nexport interface PresignOptions extends RequestSigningOptions {\n    /**\n     * The number of seconds before the presigned URL expires\n     */\n    expiresIn?: number\n\n    /**\n     * A set of strings whose representing headers that should not be hoisted\n     * to presigned request's query string. If not supplied, the presigner\n     * moves all the AWS-specific headers (starting with `x-amz-`) to the request\n     * query string. If supplied, these headers remain in the presigned request's\n     * header.\n     * All headers in the provided request will have their names converted to\n     * lower case and then checked for existence in the unhoistableHeaders set.\n     */\n    unhoistableHeaders?: Set<string>\n}\n\nexport interface Credentials {\n    /**\n     * AWS access key ID\n     */\n    readonly accessKeyId: string\n\n    /**\n     * AWS secret access key\n     */\n    readonly secretAccessKey: string\n\n    /**\n     * A security or session token to use with these credentials. Usually\n     * present for temporary credentials.\n     */\n    readonly sessionToken?: string\n}\n\nexport interface DateInfo {\n    /**\n     * ISO8601 formatted date string\n     */\n    longDate: string\n\n    /**\n     * String in the format YYYYMMDD\n     */\n    shortDate: string\n}\n\n/**\n * Escapes a URI following the AWS signature v4 escaping rules.\n *\n * @param URI {string} The URI to escape.\n * @returns {string} The escaped URI.\n */\nfunction escapeURI(URI: string): string {\n    const hexEncode = (c: string): string => {\n        return `%${c.charCodeAt(0).toString(16).toUpperCase()}`\n    }\n\n    return encodeURIComponent(URI).replace(/[!'()*]/g, hexEncode)\n}\n\n/**\n * formatDate formats a Date object into a ISO8601 formatted date string\n * and a string in the format YYYYMMDD.\n *\n * @param date {Date} The date to format.\n * @returns {DateInfo} The formatted date.\n */\nfunction formatDate(date: Date): DateInfo {\n    const longDate = iso8601(date).replace(/[-:]/g, '')\n    return {\n        longDate,\n        shortDate: longDate.slice(0, 8),\n    }\n}\n\n/**\n * Formats a time into an ISO 8601 string.\n *\n * @see https://en.wikipedia.org/wiki/ISO_8601\n *\n * @param time {number | string | Date} The time to format.\n * @returns {string} The ISO 8601 formatted time.\n */\nfunction iso8601(time: number | string | Date): string {\n    return toDate(time)\n        .toISOString()\n        .replace(/\\.\\d{3}Z$/, 'Z')\n}\n\n/**\n * Converts a time value into a Date object.\n *\n * @param time {number | string | Date} The time to convert.\n * @returns {Date} The resulting Date object.\n */\nfunction toDate(time: number | string | Date): Date {\n    if (typeof time === 'number') {\n        return new Date(time * 1000)\n    }\n\n    if (typeof time === 'string') {\n        if (Number(time)) {\n            return new Date(Number(time) * 1000)\n        }\n\n        return new Date(time)\n    }\n\n    return time\n}\n","/**\n *\n * @param value\n * @returns\n */\nexport function isArrayBuffer(value: unknown): value is ArrayBuffer {\n    return (\n        typeof ArrayBuffer === 'function' &&\n        (value instanceof ArrayBuffer ||\n            Object.prototype.toString.call(value) === '[object ArrayBuffer]')\n    )\n}\n\nexport function toFormUrlEncoded(form: Record<string, string | number | boolean>): string {\n    return Object.keys(form)\n        .reduce((params, key) => {\n            const value = form[key]\n            if (value !== undefined && value !== null) {\n                params.push(`${encodeURIComponent(key)}=${encodeURIComponent(value)}`)\n            }\n            return params\n        }, [] as string[])\n        .join('&')\n}\n","module.exports = require(\"k6/crypto\");","module.exports = require(\"k6/html\");","module.exports = require(\"k6/http\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { AWSClient } from './client'\nimport { AWSConfig } from './config'\nimport { InvalidSignatureError, SignatureV4 } from './signature'\nimport { HTTPHeaders, SignedHTTPRequest } from './http'\nimport http, { RefinedResponse, ResponseType } from 'k6/http'\nimport { toFormUrlEncoded } from './utils'\nimport { AWSError } from './error'\n\nconst API_VERSION = '2012-11-05'\n\nexport class SQSClient extends AWSClient {\n    private readonly signature: SignatureV4\n    private readonly commonHeaders: HTTPHeaders\n\n    constructor(awsConfig: AWSConfig) {\n        super(awsConfig, 'sqs')\n\n        this.signature = new SignatureV4({\n            service: this.serviceName,\n            region: this.awsConfig.region,\n            credentials: {\n                accessKeyId: this.awsConfig.accessKeyId,\n                secretAccessKey: this.awsConfig.secretAccessKey,\n                sessionToken: this.awsConfig.sessionToken,\n            },\n            uriEscapePath: true,\n            applyChecksum: true,\n        })\n\n        this.commonHeaders = {\n            'Content-Type': 'application/x-www-form-urlencoded',\n        }\n    }\n\n    /**\n     * Delivers a message to the specified queue.\n     *\n     * @param {string} queueUrl - The URL of the Amazon SQS queue to which a message is sent. Queue URLs and names are case-sensitive.\n     * @param {string} messageBody - The message to send. The minimum size is one character. The maximum size is 256 KB.\n     * @param {Object} options - Options for the request\n     * @param {string} [options.messageDeduplicationId] - The message deduplication id.\n     * @param {string} [options.messageGroupId] - The message group ID for FIFO queues\n     * @returns {Message} - The message that was sent.\n     */\n    async sendMessage(\n        queueUrl: string,\n        messageBody: string,\n        options: SendMessageOptions = {}\n    ): Promise<Message> {\n        const method = 'POST'\n\n        let body: object = {\n            Action: 'SendMessage',\n            Version: API_VERSION,\n            QueueUrl: queueUrl,\n            MessageBody: messageBody,\n        }\n\n        if (typeof options.messageDeduplicationId !== 'undefined') {\n            body = { ...body, MessageDeduplicationId: options.messageDeduplicationId }\n        }\n\n        if (typeof options.messageGroupId !== 'undefined') {\n            body = { ...body, MessageGroupId: options.messageGroupId }\n        }\n\n        if (typeof options.messageAttributes !== 'undefined') {\n            /*\n             * A single message attribute is represented as 3 separate parameters: name, value, and type.\n             * The name of the value parameter varies based on the data type.\n             * See https://docs.aws.amazon.com/AWSSimpleQueueService/latest/APIReference/API_SendMessage.html#SQS-SendMessage-request-MessageAttributes\n             * for more information.\n             */\n            const attributeParameters = Object.entries(options.messageAttributes).reduce(\n                (params, [name, attribute], i) => {\n                    const valueParameterSuffix =\n                        attribute.type === 'Binary' ? 'BinaryValue' : 'StringValue'\n                    return Object.assign(params, {\n                        [`MessageAttribute.${i + 1}.Name`]: name,\n                        [`MessageAttribute.${i + 1}.Value.${valueParameterSuffix}`]:\n                            attribute.value,\n                        [`MessageAttribute.${i + 1}.Value.DataType`]: attribute.type,\n                    })\n                },\n                {} as Record<string, string>\n            )\n            body = { ...body, ...attributeParameters }\n        }\n\n        if (typeof options.delaySeconds !== 'undefined') {\n            body = { ...body, DelaySeconds: options.delaySeconds }\n        }\n\n        const signedRequest: SignedHTTPRequest = this.signature.sign(\n            {\n                method: 'POST',\n                endpoint: this.endpoint,\n                path: '/',\n                headers: {\n                    ...this.commonHeaders,\n                },\n                body: toFormUrlEncoded(body),\n            },\n            {}\n        )\n\n        const res = await http.asyncRequest(method, signedRequest.url, signedRequest.body || '', {\n            headers: signedRequest.headers,\n        })\n        this._handleError('SendMessage', res)\n\n        const parsed = res.html('SendMessageResponse > SendMessageResult')\n        return new Message(parsed.find('MessageId').text(), parsed.find('MD5OfMessageBody').text())\n    }\n\n    /**\n     * Returns a list of your queues in the current region.\n     *\n     * @param {ListQueuesRequestParameters} [parameters={}] request parameters\n     * @param {number} [ListQueuesRequestParameters.maxResults] Maximum number of results to include in the response. Value range is 1 to 1000. You must set maxResults to receive a value for nextToken in the response.\n     * @param {string} [ListQueuesRequestParameters.nextToken] Pagination token to request the next set of results.\n     * @param {string} [ListQueuesRequestParameters.queueNamePrefix] A string to use for filtering the list results. Only those queues whose name begins with the specified string are returned.\n     * @returns {Object}\n     * @returns {string[]} Object.queueUrls - A list of queue URLs, up to 1000 entries.\n     * @returns {string} [Object.nextToken] - In the future, you can use NextToken to request the next set of results.\n     */\n    async listQueues(parameters: ListQueuesRequestParameters = {}): Promise<ListQueuesResponse> {\n        const method = 'POST'\n\n        let body: object = {\n            Action: 'ListQueues',\n            Version: API_VERSION,\n        }\n\n        if (typeof parameters?.maxResults !== 'undefined') {\n            body = { ...body, MaxResults: parameters.maxResults }\n        }\n\n        if (typeof parameters?.nextToken !== 'undefined') {\n            body = { ...body, NextToken: parameters.nextToken }\n        }\n\n        if (typeof parameters?.queueNamePrefix !== 'undefined') {\n            body = { ...body, QueueNamePrefix: parameters.queueNamePrefix }\n        }\n\n        const signedRequest: SignedHTTPRequest = this.signature.sign(\n            {\n                method: 'POST',\n                endpoint: this.endpoint,\n                path: '/',\n                headers: {\n                    ...this.commonHeaders,\n                    Host: this.endpoint.host,\n                },\n                body: toFormUrlEncoded(body),\n            },\n            {}\n        )\n\n        const res = await http.asyncRequest(method, signedRequest.url, signedRequest.body || '', {\n            headers: signedRequest.headers,\n        })\n        this._handleError('ListQueues', res)\n\n        const parsed = res.html()\n        return {\n            urls: parsed\n                .find('QueueUrl')\n                .toArray()\n                .map((e) => e.text()),\n            nextToken: parsed.find('NextToken').text() || undefined,\n        }\n    }\n\n    private _handleError(\n        operation: SQSOperation,\n        response: RefinedResponse<ResponseType | undefined>\n    ) {\n        const errorCode: number = response.error_code\n        const errorMessage: string = response.error\n\n        if (errorMessage == '' && errorCode === 0) {\n            return\n        }\n\n        const awsError = AWSError.parseXML(response.body as string)\n        switch (awsError.code) {\n            case 'AuthorizationHeaderMalformed':\n                throw new InvalidSignatureError(awsError.message, awsError.code)\n            default:\n                throw new SQSServiceError(awsError.message, awsError.code || 'unknown', operation)\n        }\n    }\n}\n\n/**\n * An Amazon SQS message.\n */\nexport class Message {\n    /**\n     * A unique identifier for the message.\n     * A MessageIdis considered unique across all AWS accounts for an extended period of time.\n     */\n    id: string\n\n    /**\n     * An MD5 digest of the non-URL-encoded message body string.\n     */\n    bodyMD5: string\n\n    /**\n     * Instantiates a new Message object.\n     *\n     * @param id\n     * @param md5Ofbody\n     */\n    constructor(id: string, bodyMD5: string) {\n        this.id = id\n        this.bodyMD5 = bodyMD5\n    }\n}\n\n/**\n * SQSServiceError indicates an error occurred while interacting with the SQS API.\n */\nexport class SQSServiceError extends AWSError {\n    operation: SQSOperation\n\n    constructor(message: string, code: string, operation: SQSOperation) {\n        super(message, code)\n        this.name = 'SQSServiceError'\n        this.operation = operation\n    }\n}\n\n/**\n * SQSOperation describes possible SQS operations.\n */\ntype SQSOperation = 'ListQueues' | 'SendMessage'\n\nexport interface SendMessageOptions {\n    /**\n     * The message deduplication ID for FIFO queues\n     */\n    messageDeduplicationId?: string\n\n    /**\n     * The message group ID for FIFO queues\n     */\n    messageGroupId?: string\n\n    /**\n     * The message attributes\n     */\n    messageAttributes?: {\n        [name: string]: { type: 'String' | 'Number' | 'Binary'; value: string }\n    }\n\n    /**\n     * The length of time, in seconds, for which to delay a specific message.\n     */\n    delaySeconds?: number\n}\n\nexport interface ListQueuesRequestParameters {\n    /**\n     * Maximum number of results to include in the response. Value range is 1 to 1000.\n     */\n    maxResults?: number\n    /**\n     * Pagination token to request the next set of results.\n     */\n    nextToken?: string\n    /**\n     * A string to use for filtering the list results. Only those queues whose name begins with the specified string are returned.\n     * Queue URLs and names are case-sensitive.\n     */\n    queueNamePrefix?: string\n}\n\nexport interface ListQueuesResponse {\n    /**\n     * A list of queue URLs, up to 1,000 entries, or the value of MaxResults you sent in the request.\n     */\n    urls: string[]\n    /**\n     * Pagination token to include in the next request.\n     */\n    nextToken?: string\n}\n"],"names":["AWSClient","awsConfig","serviceName","_classCallCheck","_defineProperty","this","undefined","endpoint","_endpoint","key","get","Endpoint","concat","region","set","AWSConfig","options","InvalidAWSConfigError","accessKeyId","length","secretAccessKey","sessionToken","_createClass","value","__ENV","AWS_REGION","AWS_ACCESS_KEY_ID","AWS_SECRET_ACCESS_KEY","AWS_SESSION_TOKEN","_Error","_inherits","_super","_createSuper","message","call","_wrapNativeSuper","Error","AMZ_ALGORITHM_QUERY_PARAM","AMZ_CREDENTIAL_QUERY_PARAM","AMZ_DATE_QUERY_PARAM","AMZ_EXPIRES_QUERY_PARAM","AMZ_SIGNATURE_QUERY_PARAM","AMZ_SIGNED_HEADERS_QUERY_PARAM","AMZ_TOKEN_QUERY_PARAM","AMZ_CONTENT_SHA256_HEADER","AMZ_DATE_HEADER","toLowerCase","AMZ_SIGNATURE_HEADER","AMZ_TOKEN_HEADER","AUTHORIZATION_HEADER","GENERATED_HEADERS","HOST_HEADER","ALWAYS_UNSIGNABLE_HEADERS","authorization","connection","expect","from","pragma","referer","te","trailer","upgrade","KEY_TYPE_IDENTIFIER","SIGNING_ALGORITHM_IDENTIFIER","MAX_PRESIGNED_TTL","EMPTY_SHA256","UNSIGNED_PAYLOAD","completeUrl","startsWith","DEFAULT_PROTOCOL","protocolMatch","match","hostnameWithPort","_slicedToArray","replace","split","_protocol","slice","_hostname","_port","parseInt","href","_value$split2","hostname","port","protocol","host","AWSError","code","_this","_assertThisInitialized","name","xmlDocument","doc","parseHTML","find","text","response","headers","error","json","Message","__type","parseXML","body","hasHeader","soughtHeader","_i","_Object$keys","Object","keys","SignatureV4","_ref","service","credentials","uriEscapePath","applyChecksum","request","arguments","finalOptions","_objectSpread","signingDate","Date","unsignableHeaders","Set","signableHeaders","_formatDate","formatDate","longDate","shortDate","signingService","signingRegion","scope","constants","headerName","indexOf","ArrayBuffer","isView","buffer","payloadHash","computePayloadHash","canonicalHeaders","computeCanonicalHeaders","signature","calculateSignature","deriveSigningKey","createCanonicalRequest","sort","join","url","path","query","serializeQueryParameters","originalRequest","_options$signingDate","_options$expiresIn","expiresIn","unhoistableHeaders","_formatDate2","InvalidSignatureError","moveHeadersToQuery","toString","signingKey","canonicalRequest","sortedHeaders","sortedCanonicalHeaders","map","signedHeaders","method","computeCanonicalURI","computeCanonicalQuerystring","credentialScope","hashedCanonicalRequest","crypto","stringToSign","createStringToSign","kSecret","kDate","kRegion","kService","_ref2","_step","normalizedURISegments","_iterator","_createForOfIteratorHelper","s","n","done","URISegment","pop","push","err","e","f","leading","URI","trailing","endsWith","normalizedURI","encodeURIComponent","_ref3","_step2","_ref3$query","serialized","_loop","escapeURI","Array","isArray","reduce","encoded","_iterator2","filter","_ref4","_step3","_iterator3","canonicalHeaderName","has","trim","_ref5","isArrayBuffer","requestCopy","JSON","parse","stringify","_requestCopy$query","_i2","_Object$keys2","_options$unhoistableH","lowerCaseName","ignoreKeys","_step4","_loop2","includes","_iterator4","_AWSError","c","charCodeAt","toUpperCase","date","time","Number","toDate","toISOString","prototype","toFormUrlEncoded","form","params","module","exports","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","getter","__esModule","d","a","definition","o","defineProperty","enumerable","obj","prop","hasOwnProperty","r","Symbol","toStringTag","_regeneratorRuntime","t","i","iterator","asyncIterator","u","define","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","h","l","y","GeneratorFunction","GeneratorFunctionPrototype","p","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","_typeof","resolve","__await","then","callInvokeWithMethodAndArg","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","resetTryEntry","completion","reset","isNaN","displayName","isGeneratorFunction","constructor","mark","setPrototypeOf","__proto__","awrap","async","Promise","reverse","prev","charAt","stop","rval","handle","complete","finish","delegateYield","arr","_arrayWithHoles","_iterableToArrayLimit","minLen","_arrayLikeToArray","test","_unsupportedIterableToArray","_nonIterableRest","len","arr2","ownKeys","getOwnPropertySymbols","getOwnPropertyDescriptor","apply","getOwnPropertyDescriptors","defineProperties","asyncGeneratorStep","gen","reject","_next","_throw","info","_asyncToGenerator","fn","self","args","instance","Constructor","_defineProperties","target","props","descriptor","_toPropertyKey","protoProps","staticProps","subClass","superClass","_setPrototypeOf","bind","Derived","hasNativeReflectConstruct","Reflect","construct","sham","Proxy","Boolean","valueOf","_isNativeReflectConstruct","result","Super","_getPrototypeOf","NewTarget","_possibleConstructorReturn","ReferenceError","input","hint","prim","toPrimitive","res","String","_toPrimitive","API_VERSION","SQSClient","_AWSClient","_listQueues","_sendMessage","commonHeaders","_callee","queueUrl","messageBody","attributeParameters","signedRequest","parsed","_args","_context","Action","Version","QueueUrl","MessageBody","messageDeduplicationId","MessageDeduplicationId","messageGroupId","MessageGroupId","messageAttributes","entries","_Object$assign","attribute","valueParameterSuffix","assign","delaySeconds","DelaySeconds","sign","http","_handleError","html","_x","_x2","_callee2","parameters","_args2","_context2","maxResults","MaxResults","nextToken","NextToken","queueNamePrefix","QueueNamePrefix","Host","urls","toArray","operation","errorCode","error_code","awsError","SQSServiceError","id","bodyMD5","_super2","_this2"],"sourceRoot":""}