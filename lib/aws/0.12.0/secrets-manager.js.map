{"version":3,"file":"secrets-manager.js","mappings":"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","sources":["webpack://k6-jslib-aws/./node_modules/uuid/index.js","webpack://k6-jslib-aws/./node_modules/uuid/lib/bytesToUuid.js","webpack://k6-jslib-aws/./node_modules/uuid/lib/rng-browser.js","webpack://k6-jslib-aws/./node_modules/uuid/v1.js","webpack://k6-jslib-aws/./node_modules/uuid/v4.js","webpack://k6-jslib-aws/webpack/bootstrap","webpack://k6-jslib-aws/webpack/runtime/compat get default export","webpack://k6-jslib-aws/webpack/runtime/define property getters","webpack://k6-jslib-aws/webpack/runtime/hasOwnProperty shorthand","webpack://k6-jslib-aws/webpack/runtime/make namespace object","webpack://k6-jslib-aws/./src/internal/endpoint.ts","webpack://k6-jslib-aws/./src/internal/config.ts","webpack://k6-jslib-aws/external commonjs \"k6/crypto\"","webpack://k6-jslib-aws/./src/internal/constants.ts","webpack://k6-jslib-aws/external commonjs \"k6/html\"","webpack://k6-jslib-aws/./src/internal/error.ts","webpack://k6-jslib-aws/./src/internal/signature.ts","webpack://k6-jslib-aws/./src/internal/http.ts","webpack://k6-jslib-aws/./src/internal/utils.ts","webpack://k6-jslib-aws/external commonjs \"k6/http\"","webpack://k6-jslib-aws/./src/internal/secrets-manager.ts","webpack://k6-jslib-aws/./src/internal/client.ts"],"sourcesContent":["var v1 = require('./v1');\nvar v4 = require('./v4');\n\nvar uuid = v4;\nuuid.v1 = v1;\nuuid.v4 = v4;\n\nmodule.exports = uuid;\n","/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\nvar byteToHex = [];\nfor (var i = 0; i < 256; ++i) {\n  byteToHex[i] = (i + 0x100).toString(16).substr(1);\n}\n\nfunction bytesToUuid(buf, offset) {\n  var i = offset || 0;\n  var bth = byteToHex;\n  // join used to fix memory issue caused by concatenation: https://bugs.chromium.org/p/v8/issues/detail?id=3175#c4\n  return ([\n    bth[buf[i++]], bth[buf[i++]],\n    bth[buf[i++]], bth[buf[i++]], '-',\n    bth[buf[i++]], bth[buf[i++]], '-',\n    bth[buf[i++]], bth[buf[i++]], '-',\n    bth[buf[i++]], bth[buf[i++]], '-',\n    bth[buf[i++]], bth[buf[i++]],\n    bth[buf[i++]], bth[buf[i++]],\n    bth[buf[i++]], bth[buf[i++]]\n  ]).join('');\n}\n\nmodule.exports = bytesToUuid;\n","// Unique ID creation requires a high quality random # generator.  In the\n// browser this is a little complicated due to unknown quality of Math.random()\n// and inconsistent support for the `crypto` API.  We do the best we can via\n// feature-detection\n\n// getRandomValues needs to be invoked in a context where \"this\" is a Crypto\n// implementation. Also, find the complete implementation of crypto on IE11.\nvar getRandomValues = (typeof(crypto) != 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto)) ||\n                      (typeof(msCrypto) != 'undefined' && typeof window.msCrypto.getRandomValues == 'function' && msCrypto.getRandomValues.bind(msCrypto));\n\nif (getRandomValues) {\n  // WHATWG crypto RNG - http://wiki.whatwg.org/wiki/Crypto\n  var rnds8 = new Uint8Array(16); // eslint-disable-line no-undef\n\n  module.exports = function whatwgRNG() {\n    getRandomValues(rnds8);\n    return rnds8;\n  };\n} else {\n  // Math.random()-based (RNG)\n  //\n  // If all else fails, use Math.random().  It's fast, but is of unspecified\n  // quality.\n  var rnds = new Array(16);\n\n  module.exports = function mathRNG() {\n    for (var i = 0, r; i < 16; i++) {\n      if ((i & 0x03) === 0) r = Math.random() * 0x100000000;\n      rnds[i] = r >>> ((i & 0x03) << 3) & 0xff;\n    }\n\n    return rnds;\n  };\n}\n","var rng = require('./lib/rng');\nvar bytesToUuid = require('./lib/bytesToUuid');\n\n// **`v1()` - Generate time-based UUID**\n//\n// Inspired by https://github.com/LiosK/UUID.js\n// and http://docs.python.org/library/uuid.html\n\nvar _nodeId;\nvar _clockseq;\n\n// Previous uuid creation time\nvar _lastMSecs = 0;\nvar _lastNSecs = 0;\n\n// See https://github.com/uuidjs/uuid for API details\nfunction v1(options, buf, offset) {\n  var i = buf && offset || 0;\n  var b = buf || [];\n\n  options = options || {};\n  var node = options.node || _nodeId;\n  var clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq;\n\n  // node and clockseq need to be initialized to random values if they're not\n  // specified.  We do this lazily to minimize issues related to insufficient\n  // system entropy.  See #189\n  if (node == null || clockseq == null) {\n    var seedBytes = rng();\n    if (node == null) {\n      // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)\n      node = _nodeId = [\n        seedBytes[0] | 0x01,\n        seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]\n      ];\n    }\n    if (clockseq == null) {\n      // Per 4.2.2, randomize (14 bit) clockseq\n      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;\n    }\n  }\n\n  // UUID timestamps are 100 nano-second units since the Gregorian epoch,\n  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so\n  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'\n  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.\n  var msecs = options.msecs !== undefined ? options.msecs : new Date().getTime();\n\n  // Per 4.2.1.2, use count of uuid's generated during the current clock\n  // cycle to simulate higher resolution clock\n  var nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1;\n\n  // Time since last uuid creation (in msecs)\n  var dt = (msecs - _lastMSecs) + (nsecs - _lastNSecs)/10000;\n\n  // Per 4.2.1.2, Bump clockseq on clock regression\n  if (dt < 0 && options.clockseq === undefined) {\n    clockseq = clockseq + 1 & 0x3fff;\n  }\n\n  // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new\n  // time interval\n  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {\n    nsecs = 0;\n  }\n\n  // Per 4.2.1.2 Throw error if too many uuids are requested\n  if (nsecs >= 10000) {\n    throw new Error('uuid.v1(): Can\\'t create more than 10M uuids/sec');\n  }\n\n  _lastMSecs = msecs;\n  _lastNSecs = nsecs;\n  _clockseq = clockseq;\n\n  // Per 4.1.4 - Convert from unix epoch to Gregorian epoch\n  msecs += 12219292800000;\n\n  // `time_low`\n  var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;\n  b[i++] = tl >>> 24 & 0xff;\n  b[i++] = tl >>> 16 & 0xff;\n  b[i++] = tl >>> 8 & 0xff;\n  b[i++] = tl & 0xff;\n\n  // `time_mid`\n  var tmh = (msecs / 0x100000000 * 10000) & 0xfffffff;\n  b[i++] = tmh >>> 8 & 0xff;\n  b[i++] = tmh & 0xff;\n\n  // `time_high_and_version`\n  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version\n  b[i++] = tmh >>> 16 & 0xff;\n\n  // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)\n  b[i++] = clockseq >>> 8 | 0x80;\n\n  // `clock_seq_low`\n  b[i++] = clockseq & 0xff;\n\n  // `node`\n  for (var n = 0; n < 6; ++n) {\n    b[i + n] = node[n];\n  }\n\n  return buf ? buf : bytesToUuid(b);\n}\n\nmodule.exports = v1;\n","var rng = require('./lib/rng');\nvar bytesToUuid = require('./lib/bytesToUuid');\n\nfunction v4(options, buf, offset) {\n  var i = buf && offset || 0;\n\n  if (typeof(options) == 'string') {\n    buf = options === 'binary' ? new Array(16) : null;\n    options = null;\n  }\n  options = options || {};\n\n  var rnds = options.random || (options.rng || rng)();\n\n  // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n  rnds[6] = (rnds[6] & 0x0f) | 0x40;\n  rnds[8] = (rnds[8] & 0x3f) | 0x80;\n\n  // Copy bytes to buffer, if provided\n  if (buf) {\n    for (var ii = 0; ii < 16; ++ii) {\n      buf[i + ii] = rnds[ii];\n    }\n  }\n\n  return buf || bytesToUuid(rnds);\n}\n\nmodule.exports = v4;\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/**\n * Represents an AWS service endpoint, providing utilities for parsing and handling URL details.\n */\nexport class Endpoint {\n    private _protocol: string\n    private _hostname: string\n    private _port?: number\n\n    // Default protocol, this can be globally changed as per application requirements\n    private static readonly DEFAULT_PROTOCOL = 'https' // Set this as per AWS.config\n\n    /**\n    //  * Constructs a new Endpoint instance.\n     *\n     * @param {string} endpoint - The URL to construct an endpoint from. If the URL omits a protocol, the default protocol will be used.\n     */\n    constructor(endpoint: string) {\n        const isDefaultProtocol =\n            !endpoint.startsWith('http://') && !endpoint.startsWith('https://')\n        const completeUrl = isDefaultProtocol\n            ? `${Endpoint.DEFAULT_PROTOCOL}://${endpoint}`\n            : endpoint\n\n        const protocolMatch = completeUrl.match(/^https?:/)\n        const hostAndPath = completeUrl.replace(/^https?:\\/\\//, '')\n        const [hostnameWithPort] = hostAndPath.split('/')\n\n        this._protocol = protocolMatch ? protocolMatch[0].slice(0, -1) : Endpoint.DEFAULT_PROTOCOL\n        this._hostname = hostnameWithPort.split(':')[0]\n        this._port = hostnameWithPort.split(':')[1]\n            ? parseInt(hostnameWithPort.split(':')[1])\n            : undefined\n    }\n\n    /**\n     * Creates a new Endpoint instance that is a copy of the current one.\n     *\n     * @returns {Endpoint} The copied Endpoint.\n     */\n    public copy(): Endpoint {\n        return new Endpoint(this.href)\n    }\n\n    /**\n     * Gets the host portion of the endpoint including the port.\n     *\n     * @returns {string} The host portion of the endpoint including the port.\n     */\n    public get host(): string {\n        return this._port ? `${this._hostname}:${this._port}` : this._hostname\n    }\n\n    /**\n     * Sets the host portion of the endpoint including the port.\n     *\n     * @param {string} value - The value to set for the host.\n     */\n    public set host(value: string) {\n        const [hostname, port] = value.split(':')\n        this._hostname = hostname\n        this._port = port ? parseInt(port) : undefined\n    }\n\n    /**\n     * Gets the host portion of the endpoint without the port.\n     *\n     * @returns {string} The host portion of the endpoint.\n     */\n    public get hostname(): string {\n        return this._hostname\n    }\n\n    /**\n     * Sets the host portion of the endpoint without the port.\n     *\n     * @param {string} value - The value to set for the hostname.\n     */\n    public set hostname(value: string) {\n        this._hostname = value\n    }\n\n    /**\n     * Gets the full URL of the endpoint.\n     *\n     * @returns {string} The full URL of the endpoint.\n     */\n    public get href(): string {\n        return `${this.protocol}://${this.host}`\n    }\n\n    /**\n     * Sets the full URL of the endpoint.\n     *\n     * @param {string} value - The value to set for the full URL.\n     */\n    public set href(value: string) {\n        const protocolMatch = value.match(/^https?:/)\n        const withoutProtocol = value.replace(/^https?:\\/\\//, '')\n        const [hostnameWithPort] = withoutProtocol.split('/')\n\n        this._protocol = protocolMatch ? protocolMatch[0].slice(0, -1) : Endpoint.DEFAULT_PROTOCOL // remove the trailing colon\n        this._hostname = hostnameWithPort.split(':')[0]\n        this._port = hostnameWithPort.split(':')[1]\n            ? parseInt(hostnameWithPort.split(':')[1])\n            : undefined\n    }\n\n    /**\n     * Gets the port of the endpoint.\n     *\n     * @returns {number|undefined} The port of the endpoint.\n     */\n    public get port(): number | undefined {\n        return this._port\n    }\n\n    /**\n     * Sets the port of the endpoint.\n     *\n     * @param {number|undefined} value - The value to set for the port.\n     */\n    public set port(value: number | undefined) {\n        this._port = value\n    }\n\n    /**\n     * Gets the protocol (http or https) of the endpoint URL.\n     *\n     * @returns {string} The protocol of the endpoint URL.\n     */\n    public get protocol(): string {\n        return this._protocol\n    }\n\n    /**\n     * Sets the protocol (http or https) of the endpoint URL.\n     *\n     * @param {string} value - The value to set for the protocol.\n     */\n    public set protocol(value: string) {\n        this._protocol = value\n    }\n}\n","import { HTTPScheme } from './http'\nimport { Endpoint } from './endpoint'\n\n/** Class holding an AWS connection information */\nexport class AWSConfig {\n    /**\n     * The AWS region to connect to, as listed: https://docs.aws.amazon.com/general/latest/gr/rande.html\n     *\n     * @type {string}\n     */\n    region: string\n\n    /**\n     * Your user's AWS access key id credential.\n     *\n     * @type {string}\n     */\n    accessKeyId: string\n\n    /**\n     * Your user's AWS secret access key credential.\n     *\n     * @type {string}\n     */\n    secretAccessKey: string\n\n    /**\n     * Your user's AWS session token credential.\n     *\n     * @type {string}\n     */\n    sessionToken?: string\n\n    /**\n     * The AWS hostname to connect to.\n     *\n     * @type {string} ['amazonaws.com']\n     */\n    endpoint?: Endpoint\n\n    /**\n     * fromEnvironment creates an AWSConfig from the environment variables.\n     *\n     * It expects to find the following compulsory environment variables:\n     *  * AWS_REGION\n     *  * AWS_ACCESS_KEY_ID\n     *  * AWS_SECRET_ACCESS_KEY\n     *\n     * If set, the following optional environment variables are also used:\n     *  * AWS_SESSION_TOKEN\n     *\n     * Finally, the options parameter allows to explicitly set the scheme and endpoint\n     * to use when connecting to AWS.\n     *\n     * @param options {AWSConnectionOptions}\n     * @returns\n     */\n    static fromEnvironment(options?: AWSConnectionOptions): AWSConfig {\n        const region = __ENV.AWS_REGION\n        const accessKeyId = __ENV.AWS_ACCESS_KEY_ID\n        const secretAccessKey = __ENV.AWS_SECRET_ACCESS_KEY\n        const sessionToken: string | undefined = __ENV.AWS_SESSION_TOKEN\n        const endpoint: Endpoint | string | undefined = options?.endpoint\n\n        return new AWSConfig({\n            region,\n            accessKeyId,\n            secretAccessKey,\n            sessionToken,\n            endpoint: endpoint,\n        })\n    }\n\n    /**\n     * Create an AWSConfig.\n     *\n     * @param {AWSConfigOptions} options - configuration attributes to use when interacting with AWS' APIs\n     * @throws {InvalidArgumentException}\n     */\n    constructor(options: AWSConfigOptions) {\n        if (!options.region || options.region === '') {\n            throw new InvalidAWSConfigError(\n                `invalid AWS region; reason: expected a valid AWS region name (e.g. \"us-east-1\"), got \\`${options.region}\\``\n            )\n        }\n\n        if (!options.accessKeyId || options.accessKeyId === '') {\n            throw new InvalidAWSConfigError(\n                `invalid AWS access key ID; reason: expected a non empty string, got \\`${options.accessKeyId}\\``\n            )\n        }\n\n        if (options.accessKeyId.length < 16 || options.accessKeyId.length > 128) {\n            throw new InvalidAWSConfigError(\n                `invalid AWS access key ID; reason: size should be between 16 and 128 characters, got ${options.accessKeyId.length}`\n            )\n        }\n\n        if (!options.secretAccessKey || options.secretAccessKey === '') {\n            throw new InvalidAWSConfigError(\n                `invalid AWS secret access key; reason: expected a non empty string, got \\`${options.secretAccessKey}\\``\n            )\n        }\n\n        this.region = options.region\n        this.accessKeyId = options.accessKeyId\n        this.secretAccessKey = options.secretAccessKey\n\n        if (options.sessionToken !== undefined) {\n            this.sessionToken = options.sessionToken\n        }\n\n        if (options.endpoint !== undefined) {\n            if (typeof options.endpoint === 'string') {\n                this.endpoint = new Endpoint(options.endpoint)\n            } else {\n                this.endpoint = options.endpoint\n            }\n        }\n    }\n}\n\n/**\n * Interface representing AWSConfig options\n */\nexport interface AWSConfigOptions extends AWSConnectionOptions {\n    /**\n     * The AWS region to connect to, as listed: https://docs.aws.amazon.com/general/latest/gr/rande.html\n     *\n     * @type {string}\n     */\n    region: string\n\n    /**\n     * Your user's AWS access key id credential.\n     *\n     * @type {string}\n     */\n    accessKeyId: string\n\n    /**\n     * Your user's AWS secret access key credential.\n     *\n     * @type {string}\n     */\n    secretAccessKey: string\n\n    /**\n     * Your user's AWS session token credential.\n     *\n     * @type {string}\n     */\n    sessionToken?: string\n}\n\n/**\n * Interface representing AWS connection options\n */\nexport interface AWSConnectionOptions {\n    /**\n     * The HTTP scheme to use when connecting to AWS.\n     *\n     * @type {HTTPScheme}\n     */\n    scheme?: HTTPScheme\n\n    /**\n     * The AWS hostname to connect to.\n     *\n     * @type {string}\n     */\n    endpoint?: Endpoint | string\n}\n\n/** Class representing an invalid AWS configuration */\nexport class InvalidAWSConfigError extends Error {\n    constructor(message: string) {\n        super(message)\n    }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"k6/crypto\");","/**\n * Standard Amazon AWS query parameter names\n */\nexport const AMZ_ALGORITHM_QUERY_PARAM = 'X-Amz-Algorithm'\nexport const AMZ_CREDENTIAL_QUERY_PARAM = 'X-Amz-Credential'\nexport const AMZ_DATE_QUERY_PARAM = 'X-Amz-Date'\nexport const AMZ_EXPIRES_QUERY_PARAM = 'X-Amz-Expires'\nexport const AMZ_SIGNATURE_QUERY_PARAM = 'X-Amz-Signature'\nexport const AMZ_SIGNED_HEADERS_QUERY_PARAM = 'X-Amz-SignedHeaders'\nexport const AMZ_TARGET_QUERY_PARAM = 'X-Amz-Target'\nexport const AMZ_TOKEN_QUERY_PARAM = 'X-Amz-Security-Token'\n\n/**\n * Standard Amazon AWS header names\n */\nexport const AMZ_CONTENT_SHA256_HEADER = 'x-amz-content-sha256'\nexport const AMZ_DATE_HEADER = AMZ_DATE_QUERY_PARAM.toLowerCase()\nexport const AMZ_SIGNATURE_HEADER = AMZ_SIGNATURE_QUERY_PARAM.toLowerCase()\nexport const AMZ_TARGET_HEADER = AMZ_TARGET_QUERY_PARAM.toLowerCase()\nexport const AMZ_TOKEN_HEADER = AMZ_TOKEN_QUERY_PARAM.toLowerCase()\n\n/**\n * Common HTTP headers we rely on in the signing process\n */\nexport const AUTHORIZATION_HEADER = 'authorization'\nexport const DATE_HEADER = 'date'\n\n/**\n * Lists the headers that are generated as part of the signature process.\n */\nexport const GENERATED_HEADERS = [AUTHORIZATION_HEADER, AMZ_DATE_HEADER, DATE_HEADER]\nexport const HOST_HEADER = 'host'\n\n/**\n * Lists the headers that should never be included in the\n * request signature signature process.\n */\nexport const ALWAYS_UNSIGNABLE_HEADERS = {\n    authorization: true,\n    'cache-control': true,\n    connection: true,\n    expect: true,\n    from: true,\n    'keep-alive': true,\n    'max-forwards': true,\n    pragma: true,\n    referer: true,\n    te: true,\n    trailer: true,\n    'transfer-encoding': true,\n    upgrade: true,\n    'user-agent': true,\n    'x-amzn-trace-id': true,\n}\n\n/**\n * Signature specific constants included in the signing process\n */\nexport const KEY_TYPE_IDENTIFIER = 'aws4_request'\nexport const SIGNING_ALGORITHM_IDENTIFIER = 'AWS4-HMAC-SHA256'\n\n/**\n * Maximum time to live of a signed request in seconds: 7 days.\n */\nexport const MAX_PRESIGNED_TTL = 60 * 60 * 24 * 7\n\n/**\n * SHA256 hash of an empty string (so we don't waste cycles recomputing it)\n */\nexport const EMPTY_SHA256 = 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\n\n/**\n * SHA256 hash of the unsigned payload constant (so we don't waste cycles recomputing it)\n */\nexport const UNSIGNED_PAYLOAD_SHA256 =\n    '5a41b0751e4537c6ff868564ab44a4d4ecceec2ec5b1c5f74d97422968e04237'\n\nexport const UNSIGNED_PAYLOAD = 'UNSIGNED-PAYLOAD'\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"k6/html\");","import { JSONObject } from './json'\nimport { parseHTML } from 'k6/html'\nimport { Response } from 'k6/http'\n\n/**\n * Base class to derive errors from\n *\n * Inspired from AWS official error types, as\n * described in:\n *   * https://aws.amazon.com/blogs/developer/service-error-handling-modular-aws-sdk-js/\n *   * https://github.com/aws/aws-sdk-js/blob/master/lib/error.d.ts\n */\nexport class AWSError extends Error {\n    /**\n     * Error code issued by the service (if any)\n     */\n    code?: string\n\n    /**\n     * Create an AWSError\n     *\n     * @param {string} message - A longer human readable error message.\n     * @param {string?} code - A unique short code representing the error that was emitted\n     */\n    constructor(message: string, code?: string) {\n        super(message)\n        this.name = 'AWSError'\n        this.code = code\n    }\n\n    /**\n     * Parse an AWSError from an XML document\n     *\n     * @param  {string} xmlDocument - Serialized XML document to parse the error from\n     */\n    static parseXML(xmlDocument: string): AWSError {\n        const doc = parseHTML(xmlDocument)\n        return new AWSError(doc.find('Message').text(), doc.find('Code').text())\n    }\n\n    static parse(response: Response): AWSError {\n        if (response.headers['Content-Type'] === 'application/json') {\n            const error = (response.json() as JSONObject) || {}\n            const message =\n                error.Message ||\n                error.message ||\n                error.__type ||\n                'An error occurred on the server side'\n            const code = response.headers['X-Amzn-Errortype'] || error.__type\n            return new AWSError(message as string, code as string)\n        } else {\n            return AWSError.parseXML(response.body as string)\n        }\n    }\n}\n","import crypto from 'k6/crypto'\n\nimport * as constants from './constants'\nimport { AWSError } from './error'\nimport { hasHeader, HTTPHeaderBag, HTTPRequest, QueryParameterBag, SignedHTTPRequest } from './http'\nimport { isArrayBuffer } from './utils'\n\n/**\n * SignatureV4 can be used to sign HTTP requests and presign URLs using the AWS Signature\n * Version 4 signing process.\n *\n * It offers two signing methods:\n * - sign: signs the request headers and payload\n * - presign: returns a presigned (authorization information contained in the query string) URL\n *\n * @see https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html\n */\nexport class SignatureV4 {\n    /**\n     * The name of the service to sign for.\n     */\n    private readonly service: string\n\n    /**\n     * The name of the region to sign for.\n     */\n    private readonly region: string\n\n    /**\n     * The credentials with which the request should be signed.\n     */\n    private readonly credentials: Credentials\n\n    /**\n     * Whether to uri-escape the request URI path as part of computing the\n     * canonical request string. This is required for every AWS service, except\n     * Amazon S3, as of late 2017.\n     *\n     * @default [true]\n     */\n    private readonly uriEscapePath: boolean\n\n    /**\n     * Whether to calculate a checksum of the request body and include it as\n     * either a request header (when signing) or as a query string parameter\n     * (when presigning). This is required for AWS Glacier and Amazon S3 and optional for\n     * every other AWS service as of late 2017.\n     *\n     * @default [true]\n     */\n    private readonly applyChecksum: boolean\n\n    // TODO: uriEscapePath and applyChecksum should not be present in the constructor\n    constructor({\n        service,\n        region,\n        credentials,\n        uriEscapePath,\n        applyChecksum,\n    }: SignatureV4Options) {\n        this.service = service\n        this.region = region\n        this.credentials = credentials\n        this.uriEscapePath = typeof uriEscapePath === 'boolean' ? uriEscapePath : true\n        this.applyChecksum = typeof applyChecksum === 'boolean' ? applyChecksum : true\n    }\n\n    /**\n     * Includes AWS v4 signing information to the provided HTTP request.\n     *\n     * This method adds an Authorization header to the request, containing\n     * the signature and other signing information. It also returns a preformatted\n     * URL that can be used to make the k6 http request.\n     *\n     * This method mutates the request object.\n     *\n     * @param request {HTTPRequest} The request to sign.\n     * @param options {Partial<RequestSigningOptions>} Options for signing the request.\n     * @returns {SignedHTTPRequest} The signed request.\n     */\n    sign(request: HTTPRequest, options: Partial<RequestSigningOptions> = {}): SignedHTTPRequest {\n        // Set default values for options which are not provided by the user.\n        const defaultOptions = {\n            signingDate: new Date(),\n            unsignableHeaders: new Set<string>(),\n            signableHeaders: new Set<string>(),\n        }\n\n        // Merge default options with the ones maybe provided by the user.\n        const finalOptions = { ...defaultOptions, ...options }\n\n        const { longDate, shortDate }: DateInfo = formatDate(finalOptions.signingDate)\n        const service = finalOptions.signingService || this.service\n        const region = finalOptions.signingRegion || this.region\n        const scope = `${shortDate}/${region}/${service}/${constants.KEY_TYPE_IDENTIFIER}`\n\n        // Required by the specification:\n        //   \"For HTTP/1.1 requests, you must include the host header at a minimum.\n        //   Standard headers like content-type are optional.\n        //   For HTTP/2 requests, you must include the :authority header instead of\n        //   the host header. Different services might require other headers.\"\n        if (!request.headers[constants.HOST_HEADER]) {\n          request.headers[constants.HOST_HEADER] = request.endpoint.hostname\n      }\n        \n\n        // Filter out headers that will be generated and managed by the signing process.\n        // If the user provide any of those as part of the HTTPRequest's headers, they\n        // will be ignored.\n        for (const headerName of Object.keys(request.headers)) {\n            if (constants.GENERATED_HEADERS.indexOf(headerName.toLowerCase()) > -1) {\n                delete request.headers[headerName]\n            }\n        }\n\n        request.headers[constants.AMZ_DATE_HEADER] = longDate\n        if (this.credentials.sessionToken) {\n            request.headers[constants.AMZ_TOKEN_HEADER] = this.credentials.sessionToken\n        }\n\n        // If the request body is a typed array, we need to convert it to a buffer\n        // so that we can calculate the checksum.\n        if (ArrayBuffer.isView(request.body)) {\n            request.body = request.body.buffer\n        }\n\n        // Ensure we avoid passing undefined to the crypto hash function.\n        if (!request.body) {\n            request.body = ''\n        }\n\n        const payloadHash = this.computePayloadHash(request)\n        if (\n            !hasHeader(constants.AMZ_CONTENT_SHA256_HEADER, request.headers) &&\n            this.applyChecksum\n        ) {\n            request.headers[constants.AMZ_CONTENT_SHA256_HEADER] = payloadHash\n        }\n\n        const canonicalHeaders = this.computeCanonicalHeaders(\n            request,\n            finalOptions.unsignableHeaders,\n            finalOptions.signableHeaders\n        )\n        const signature = this.calculateSignature(\n            longDate,\n            scope,\n            this.deriveSigningKey(this.credentials, service, region, shortDate),\n            this.createCanonicalRequest(request, canonicalHeaders, payloadHash)\n        )\n\n        /**\n         * Step 4 of the signing process: add the signature to the HTTP request's headers.\n         *\n         * @see https://docs.aws.amazon.com/general/latest/gr/sigv4-add-signature-to-request.html\n         */\n        request.headers[constants.AUTHORIZATION_HEADER] =\n            `${constants.SIGNING_ALGORITHM_IDENTIFIER} ` +\n            `Credential=${this.credentials.accessKeyId}/${scope}, ` +\n            `SignedHeaders=${Object.keys(canonicalHeaders).sort().join(';')}, ` +\n            `Signature=${signature}`\n\n        // If a request path was provided, add it to the URL\n        let url = request.endpoint.href\n        if (request.path) {\n            url += request.path\n        }\n\n        // If a request query string was provided, add it to the URL\n        if (request.query) {\n            // We exclude the signature from the query string\n            url += `?${this.serializeQueryParameters(request.query)}`\n        }\n\n        return {\n            url: url,\n            ...request,\n        }\n    }\n\n    /**\n     * Produces a presigned URL with AWS v4 signature information for the provided HTTP request.\n     *\n     * A presigned URL is a URL that contains the authorization information\n     * (signature and other signing information) in the query string. This method\n     * returns a preformatted URL that can be used to make the k6 http request.\n     *\n     * @param originalRequest - The original request to presign.\n     * @param options - Options controlling the signing of the request.\n     * @returns A signed request, including the presigned URL.\n     */\n    presign(originalRequest: HTTPRequest, options: PresignOptions = {}): SignedHTTPRequest {\n        const {\n            signingDate = new Date(),\n            expiresIn = 3600,\n            unsignableHeaders,\n            unhoistableHeaders,\n            signableHeaders,\n            signingRegion,\n            signingService,\n        } = options\n        const { longDate, shortDate }: DateInfo = formatDate(signingDate)\n        const region = signingRegion || this.region\n        const service = signingService || this.service\n\n        if (expiresIn > constants.MAX_PRESIGNED_TTL) {\n            throw new InvalidSignatureError(\n                \"Signature version 4 presigned URLs can't be valid for more than 7 days\"\n            )\n        }\n\n        const scope = `${shortDate}/${region}/${service}/${constants.KEY_TYPE_IDENTIFIER}`\n        const request = this.moveHeadersToQuery(originalRequest, { unhoistableHeaders })\n\n        // Required by the specification:\n        //   \"For HTTP/1.1 requests, you must include the host header at a minimum.\n        //   Standard headers like content-type are optional.\n        //   For HTTP/2 requests, you must include the :authority header instead of\n        //   the host header. Different services might require other headers.\"\n        if (!request.headers[constants.HOST_HEADER]) {\n          request.headers[constants.HOST_HEADER] = originalRequest.endpoint.hostname\n      }\n\n        // If the user provided a session token, include it in the signed url query string.\n        if (this.credentials.sessionToken) {\n            request.query[constants.AMZ_TOKEN_QUERY_PARAM] = this.credentials.sessionToken\n        }\n\n        // Add base signing query parameters to the request, as described in the documentation\n        // @see https://docs.aws.amazon.com/general/latest/gr/sigv4-add-signature-to-request.html\n        request.query[constants.AMZ_ALGORITHM_QUERY_PARAM] = constants.SIGNING_ALGORITHM_IDENTIFIER\n        request.query[\n            constants.AMZ_CREDENTIAL_QUERY_PARAM\n        ] = `${this.credentials.accessKeyId}/${scope}`\n        request.query[constants.AMZ_DATE_QUERY_PARAM] = longDate\n        request.query[constants.AMZ_EXPIRES_QUERY_PARAM] = expiresIn.toString(10)\n\n        const canonicalHeaders = this.computeCanonicalHeaders(\n            request,\n            unsignableHeaders,\n            signableHeaders\n        )\n        request.query[constants.AMZ_SIGNED_HEADERS_QUERY_PARAM] = Object.keys(canonicalHeaders)\n            .sort()\n            .join(';')\n\n        const signingKey = this.deriveSigningKey(this.credentials, service, region, shortDate)\n\n        // Computing the payload from the original request. This is required\n        // in the event the user attempts to produce a presigned URL for s3,\n        // which requires the payload hash to be 'UNSIGNED-PAYLOAD'.\n        //\n        // To that effect, users need to set the 'x-amz-content-sha256' header,\n        // and mark it as unhoistable and unsignable. When setup this way,\n        // the computePayloadHash method will then return the string 'UNSIGNED-PAYLOAD'.\n        const payloadHash = this.computePayloadHash(originalRequest)\n        const canonicalRequest = this.createCanonicalRequest(request, canonicalHeaders, payloadHash)\n\n        request.query[constants.AMZ_SIGNATURE_QUERY_PARAM] = this.calculateSignature(\n            longDate,\n            scope,\n            signingKey,\n            canonicalRequest\n        )\n\n        // If a request path was provided, add it to the URL\n        let url = request.endpoint.href\n        if (request.path) {\n            url += request.path\n        }\n\n        // If a request query string was provided, add it to the URL\n        if (request.query) {\n            url += `?${this.serializeQueryParameters(request.query)}`\n        }\n\n        return { url: url, ...request }\n    }\n\n    /**\n     * Create a string including information from your request\n     * in a AWS signature v4 standardized (canonical) format.\n     *\n     * Step 1 of the signing process: create the canonical request string.\n     * @see https://docs.aws.amazon.com/general/latest/gr/sigv4-create-canonical-request.html\n     *\n     * @param request {HTTPRequest} The request to sign.\n     * @param canonicalHeaders {HTTPHeaderBag} The request's canonical headers.\n     * @param payloadHash {string} The hexadecimally encoded request's payload hash .\n     * @returns {string} The canonical request string.\n     */\n    private createCanonicalRequest(\n        request: HTTPRequest,\n        canonicalHeaders: HTTPHeaderBag,\n        payloadHash: string\n    ): string {\n        const sortedHeaders = Object.keys(canonicalHeaders).sort()\n        const sortedCanonicalHeaders = sortedHeaders\n            .map((name) => `${name}:${canonicalHeaders[name]}`)\n            .join('\\n')\n        const signedHeaders = sortedHeaders.join(';')\n\n        return (\n            `${request.method}\\n` +\n            `${this.computeCanonicalURI(request)}\\n` +\n            `${this.computeCanonicalQuerystring(request)}\\n` +\n            `${sortedCanonicalHeaders}\\n\\n` +\n            `${signedHeaders}\\n` +\n            `${payloadHash}`\n        )\n    }\n\n    /**\n     * Create the \"string to sign\" part of the signature Version 4 protocol.\n     *\n     * The \"string to sign\" includes meta information about your request and\n     * about the canonical request that you created with `createCanonicalRequest`.\n     * It is used hand in hand with the signing key to create the request signature.\n     * Step 2 of the signing process: create the string to sign.\n     * @see https://docs.aws.amazon.com/general/latest/gr/sigv4-create-string-to-sign.html\n     *\n     * @param longDate {string} The request's date in iso 8601 format.\n     * @param credentialScope {string} The request's credential scope.\n     * @param canonicalRequest {string} The request's canonical request.\n     * @returns {string} The \"string to sign\".\n     */\n    private createStringToSign(\n        longDate: string,\n        credentialScope: string,\n        canonicalRequest: string\n    ): string {\n        const hashedCanonicalRequest = crypto.sha256(canonicalRequest, 'hex')\n\n        return (\n            `${constants.SIGNING_ALGORITHM_IDENTIFIER}\\n` +\n            `${longDate}\\n` +\n            `${credentialScope}\\n` +\n            `${hashedCanonicalRequest}`\n        )\n    }\n\n    /**\n     * Calculte the signature for AWS signature version 4.\n     *\n     * Step 3 of the signing process: create the signature.\n     * @see https://docs.aws.amazon.com/general/latest/gr/sigv4-calculate-signature.html\n     *\n     * @param longDate {string} The request's date in iso 8601 format.\n     * @param credentialScope {string} The request's credential scope.\n     * @param signingKey {string} the signing key as computed by the deriveSigningKey method.\n     * @param canonicalRequest {string} The request's canonical request.\n     * @returns {string} The signature.\n     */\n    private calculateSignature(\n        longDate: string,\n        credentialScope: string,\n        signingKey: Uint8Array,\n        canonicalRequest: string\n    ): string {\n        const stringToSign = this.createStringToSign(longDate, credentialScope, canonicalRequest)\n        return crypto.hmac('sha256', signingKey, stringToSign, 'hex')\n    }\n\n    /**\n     * Derives the signing key for authenticating requests signed with\n     * the Signature version 4 authentication protocol.\n     *\n     * deriveSigningKey produces a signing key by creating a series of\n     * hash-based message authentication codes (HMACs) represented in\n     * a binary format.\n     *\n     * The derived signing key is specific to the date it's made at, as well as\n     * the service and region it targets.\n     *\n     * @param credentials {AWSCredentials} The credentials to use for signing.\n     * @param service {string} The service the request is targeted at.\n     * @param region {string} The region the request is targeted at.\n     * @param shortDate {string} The request's date in YYYYMMDD format.\n     * @returns {Uint8Array} The derived signing key.\n     */\n    private deriveSigningKey(\n        credentials: Credentials,\n        service: string,\n        region: string,\n        shortDate: string\n    ): Uint8Array {\n        const kSecret: string = credentials.secretAccessKey\n        /**\n         * crypto.hmac returns a value of type `bytes`, which is an alias for\n         * number[]. However, the secret argument to hmac needs to either be\n         * a `string` or ArrayBuffer. The only way to get around this is to\n         * cast the return value of hmac to any, thus, we disable the no-explicit-any\n         * ESLint rule for this function.\n         */\n        /* eslint-disable @typescript-eslint/no-explicit-any */\n        const kDate: any = crypto.hmac('sha256', 'AWS4' + kSecret, shortDate, 'binary')\n        const kRegion: any = crypto.hmac('sha256', kDate, region, 'binary')\n        const kService: any = crypto.hmac('sha256', kRegion, service, 'binary')\n        const kSigning: any = crypto.hmac('sha256', kService, 'aws4_request', 'binary')\n        /* eslint-enable @typescript-eslint/no-explicit-any */\n\n        return kSigning\n    }\n\n    /**\n     * Create a string that includes information from your request\n     * in a AWS signature v4 standardized (canonical) format.\n     *\n     * @param param0 {HTTPRequest} The request to sign.\n     * @returns {string} The canonical URI.\n     */\n    private computeCanonicalURI({ path }: HTTPRequest): string {\n        if (this.uriEscapePath) {\n            // Non-S3 services, we normalize the path and then double URI encode it.\n            // Ref: \"Remove Dot Segments\" https://datatracker.ietf.org/doc/html/rfc3986#section-5.2.4\n            const normalizedURISegments = []\n\n            for (const URISegment of path.split('/')) {\n                if (URISegment?.length === 0) {\n                    continue\n                }\n\n                if (URISegment === '.') {\n                    continue\n                }\n\n                if (URISegment === '..') {\n                    normalizedURISegments.pop()\n                } else {\n                    normalizedURISegments.push(URISegment)\n                }\n            }\n\n            // Normalize the URI\n            const leading = path?.startsWith('/') ? '/' : ''\n            const URI = normalizedURISegments.join('/')\n            const trailing = normalizedURISegments.length > 0 && path?.endsWith('/') ? '/' : ''\n            const normalizedURI = `${leading}${URI}${trailing}`\n\n            const doubleEncoded = encodeURIComponent(normalizedURI)\n\n            return doubleEncoded.replace(/%2F/g, '/')\n        }\n\n        // For S3, we shouldn't normalize the path. For example, object name\n        // my-object//example//photo.user should not be normalized to\n        // my-object/example/photo.user\n        return path\n    }\n\n    /**\n     * Serializes the request's query parameters into their canonical\n     * string version. If the request does not include a query parameters,\n     * returns an empty string.\n     *\n     * @param param0 {HTTPRequest} The request containing the query parameters.\n     * @returns {string} The canonical query string.\n     */\n    private computeCanonicalQuerystring({ query = {} }: HTTPRequest): string {\n        const keys: Array<string> = []\n        const serialized: Record<string, string> = {}\n\n        for (const key of Object.keys(query).sort()) {\n            if (key.toLowerCase() === constants.AMZ_SIGNATURE_HEADER) {\n                continue\n            }\n\n            keys.push(key)\n            const value = query[key]\n\n            if (typeof value === 'string') {\n                serialized[key] = `${escapeURI(key)}=${escapeURI(value)}`\n            } else if (Array.isArray(value)) {\n                serialized[key] = value\n                    .slice(0)\n                    .sort()\n                    .reduce(\n                        (encoded: Array<string>, value: string) =>\n                            encoded.concat([`${escapeURI(key)}=${escapeURI(value)}`]),\n                        []\n                    )\n                    .join('&')\n            }\n        }\n\n        return keys\n            .map((key) => serialized[key])\n            .filter((serialized) => serialized)\n            .join('&')\n    }\n\n    /**\n     * Create the canonical form of the request's headers.\n     * Canonical headers consist of all the HTTP headers you\n     * are including with the signed request.\n     *\n     * @param param0 {HTTPRequest} The request to compute the canonical headers of.\n     * @param unsignableHeaders {Set<string>} The headers that should not be signed.\n     * @param signableHeaders {Set<string>} The headers that should be signed.\n     * @returns {string} The canonical headers.\n     */\n    private computeCanonicalHeaders(\n        { headers }: HTTPRequest,\n        unsignableHeaders?: Set<string>,\n        signableHeaders?: Set<string>\n    ): HTTPHeaderBag {\n        const canonicalHeaders: HTTPHeaderBag = {}\n\n        for (const headerName of Object.keys(headers).sort()) {\n            if (headers[headerName] == undefined) {\n                continue\n            }\n\n            const canonicalHeaderName = headerName.toLowerCase()\n            if (\n                canonicalHeaderName in constants.ALWAYS_UNSIGNABLE_HEADERS ||\n                unsignableHeaders?.has(canonicalHeaderName)\n            ) {\n                if (\n                    !signableHeaders ||\n                    (signableHeaders && !signableHeaders.has(canonicalHeaderName))\n                ) {\n                    continue\n                }\n            }\n\n            if (typeof headers[headerName] === 'string') {\n                canonicalHeaders[canonicalHeaderName] = headers[headerName] = headers[headerName]\n                    .trim()\n                    .replace(/\\s+/g, ' ')\n            }\n        }\n\n        return canonicalHeaders\n    }\n\n    /**\n     * Computes the SHA256 cryptographic hash of the request's body.\n     *\n     * If the headers contain the 'X-Amz-Content-Sha256' header, then\n     * the value of that header is returned instead. This proves useful\n     * when, for example, presiging a URL for S3, as the payload hash\n     * must always be equal to 'UNSIGNED-PAYLOAD'.\n     *\n     * @param param0 {HTTPRequest} The request to compute the payload hash of.\n     * @returns {string} The hex encoded SHA256 payload hash, or the value of the 'X-Amz-Content-Sha256' header.\n     */\n    private computePayloadHash({ headers, body }: HTTPRequest): string {\n        // for (const headerName of Object.keys(headers)) {\n        //     // If the header is present, return its value.\n        //     // So that we let the 'UNSIGNED-PAYLOAD' value pass through.\n        //     if (headerName.toLowerCase() === constants.AMZ_CONTENT_SHA256_HEADER) {\n        //         return headers[headerName]\n        //     }\n        // }\n\n        if (headers[constants.AMZ_CONTENT_SHA256_HEADER]) {\n            return headers[constants.AMZ_CONTENT_SHA256_HEADER]\n        }\n\n        if (body == undefined) {\n            return constants.EMPTY_SHA256\n        }\n\n        if (typeof body === 'string' || isArrayBuffer(body)) {\n            return crypto.sha256(body, 'hex').toLowerCase()\n        }\n\n        if (ArrayBuffer.isView(body)) {\n            // If the request body is a typed array, we need to convert it to a buffer\n            // so that we can calculate the checksum.\n            return crypto.sha256((body as DataView).buffer, 'hex').toLowerCase()\n        }\n\n        return constants.UNSIGNED_PAYLOAD\n    }\n\n    /**\n     * Moves a request's headers to its query parameters.\n     *\n     * The operation will ignore any amazon standard headers, prefixed\n     * with 'X-Amz-'. It will also ignore any headers specified as unhoistable\n     * by the options.\n     *\n     * The operation will delete the headers from the request.\n     *\n     * @param request {HTTPRequest} The request to move the headers from.\n     * @param options\n     * @returns {HTTPRequest} The request with the headers moved to the query parameters.\n     */\n    private moveHeadersToQuery(\n        request: HTTPRequest,\n        options: { unhoistableHeaders?: Set<string> } = {}\n    ): HTTPRequest & { query: QueryParameterBag } {\n        const requestCopy = JSON.parse(JSON.stringify(request))\n        const { headers, query = {} as QueryParameterBag } = requestCopy\n\n        for (const name of Object.keys(headers)) {\n            const lowerCaseName = name.toLowerCase()\n            if (\n                lowerCaseName.slice(0, 6) === 'x-amz-' &&\n                !options.unhoistableHeaders?.has(lowerCaseName)\n            ) {\n                query[name] = headers[name]\n                delete headers[name]\n            }\n        }\n\n        return {\n            ...requestCopy,\n            headers,\n            query,\n        }\n    }\n\n    /**\n     * Serializes a HTTPRequest's query parameter bag into a string.\n     *\n     * @param query {QueryParameterBag} The query parameters to serialize.\n     * @param ignoreKeys {Set<string>} The keys to ignore.\n     * @returns {string} The serialized, and ready to use in a URL, query parameters.\n     */\n    private serializeQueryParameters(query: QueryParameterBag, ignoreKeys?: string[]): string {\n        const keys: Array<string> = []\n        const serialized: Record<string, string> = {}\n\n        for (const key of Object.keys(query).sort()) {\n            if (ignoreKeys?.includes(key.toLowerCase())) {\n                continue\n            }\n\n            keys.push(key)\n            const value = query[key]\n\n            if (typeof value === 'string') {\n                serialized[key] = `${escapeURI(key)}=${escapeURI(value)}`\n            } else if (Array.isArray(value)) {\n                serialized[key] = value\n                    .slice(0)\n                    .sort()\n                    .reduce(\n                        (encoded: Array<string>, value: string) =>\n                            encoded.concat([`${escapeURI(key)}=${escapeURI(value)}`]),\n                        []\n                    )\n                    .join('&')\n            }\n        }\n\n        return keys\n            .map((key) => serialized[key])\n            .filter((serialized) => serialized)\n            .join('&')\n    }\n}\n\n/**\n * Error indicating an Invalid signature has been sent to AWS services\n *\n * Inspired from AWS official error types, as\n * described in:\n *   * https://aws.amazon.com/blogs/developer/service-error-handling-modular-aws-sdk-js/\n *   * https://github.com/aws/aws-sdk-js/blob/master/lib/error.d.ts\n */\nexport class InvalidSignatureError extends AWSError {\n    /**\n     * Constructs an InvalidSignatureError\n     *\n     * @param  {string} message - human readable error message\n     */\n    constructor(message: string, code?: string) {\n        super(message, code)\n        this.name = 'InvalidSignatureError'\n    }\n}\n\nexport interface SignatureV4Options {\n    /**\n     * The name of the service to sign for.\n     */\n    service: string\n\n    /**\n     * The name of the region to sign for.\n     */\n    region: string\n\n    /**\n     * The credentials with which the request should be signed.\n     */\n    credentials: Credentials\n\n    /**\n     * Whether to uri-escape the request URI path as part of computing the\n     * canonical request string. This is required for every AWS service, except\n     * Amazon S3, as of late 2017.\n     *\n     * @default [true]\n     */\n    uriEscapePath?: boolean\n\n    /**\n     * Whether to calculate a checksum of the request body and include it as\n     * either a request header (when signing) or as a query string parameter\n     * (when presigning). This is required for AWS Glacier and Amazon S3 and optional for\n     * every other AWS service as of late 2017.\n     *\n     * @default [true]\n     */\n    applyChecksum?: boolean\n}\n\nexport interface SignOptions {\n    /**\n     * The date and time to be used as signature metadata. This value should be\n     * a Date object, a unix (epoch) timestamp, or a string that can be\n     * understood by the JavaScript `Date` constructor.If not supplied, the\n     * value returned by `new Date()` will be used.\n     */\n    signingDate?: Date\n\n    /**\n     * The service signing name. It will override the service name of the signer\n     * in current invocation\n     */\n    signingService?: string\n\n    /**\n     * The region name to sign the request. It will override the signing region of the\n     * signer in current invocation\n     */\n    signingRegion?: string\n}\n\nexport interface RequestSigningOptions extends SignOptions {\n    /**\n     * A set of strings whose members represents headers that cannot be signed.\n     * All headers in the provided request will have their names converted to\n     * lower case and then checked for existence in the unsignableHeaders set.\n     */\n    unsignableHeaders?: Set<string>\n\n    /**\n     * A set of strings whose members represents headers that should be signed.\n     * Any values passed here will override those provided via unsignableHeaders,\n     * allowing them to be signed.\n     *\n     * All headers in the provided request will have their names converted to\n     * lower case before signing.\n     */\n    signableHeaders?: Set<string>\n}\n\nexport interface PresignOptions extends RequestSigningOptions {\n    /**\n     * The number of seconds before the presigned URL expires\n     */\n    expiresIn?: number\n\n    /**\n     * A set of strings whose representing headers that should not be hoisted\n     * to presigned request's query string. If not supplied, the presigner\n     * moves all the AWS-specific headers (starting with `x-amz-`) to the request\n     * query string. If supplied, these headers remain in the presigned request's\n     * header.\n     * All headers in the provided request will have their names converted to\n     * lower case and then checked for existence in the unhoistableHeaders set.\n     */\n    unhoistableHeaders?: Set<string>\n}\n\nexport interface Credentials {\n    /**\n     * AWS access key ID\n     */\n    readonly accessKeyId: string\n\n    /**\n     * AWS secret access key\n     */\n    readonly secretAccessKey: string\n\n    /**\n     * A security or session token to use with these credentials. Usually\n     * present for temporary credentials.\n     */\n    readonly sessionToken?: string\n}\n\nexport interface DateInfo {\n    /**\n     * ISO8601 formatted date string\n     */\n    longDate: string\n\n    /**\n     * String in the format YYYYMMDD\n     */\n    shortDate: string\n}\n\n/**\n * Escapes a URI following the AWS signature v4 escaping rules.\n *\n * @param URI {string} The URI to escape.\n * @returns {string} The escaped URI.\n */\nfunction escapeURI(URI: string): string {\n    const hexEncode = (c: string): string => {\n        return `%${c.charCodeAt(0).toString(16).toUpperCase()}`\n    }\n\n    return encodeURIComponent(URI).replace(/[!'()*]/g, hexEncode)\n}\n\n/**\n * formatDate formats a Date object into a ISO8601 formatted date string\n * and a string in the format YYYYMMDD.\n *\n * @param date {Date} The date to format.\n * @returns {DateInfo} The formatted date.\n */\nfunction formatDate(date: Date): DateInfo {\n    const longDate = iso8601(date).replace(/[-:]/g, '')\n    return {\n        longDate,\n        shortDate: longDate.slice(0, 8),\n    }\n}\n\n/**\n * Formats a time into an ISO 8601 string.\n *\n * @see https://en.wikipedia.org/wiki/ISO_8601\n *\n * @param time {number | string | Date} The time to format.\n * @returns {string} The ISO 8601 formatted time.\n */\nfunction iso8601(time: number | string | Date): string {\n    return toDate(time)\n        .toISOString()\n        .replace(/\\.\\d{3}Z$/, 'Z')\n}\n\n/**\n * Converts a time value into a Date object.\n *\n * @param time {number | string | Date} The time to convert.\n * @returns {Date} The resulting Date object.\n */\nfunction toDate(time: number | string | Date): Date {\n    if (typeof time === 'number') {\n        return new Date(time * 1000)\n    }\n\n    if (typeof time === 'string') {\n        if (Number(time)) {\n            return new Date(Number(time) * 1000)\n        }\n\n        return new Date(time)\n    }\n\n    return time\n}\n","import { Endpoint } from './endpoint'\n\n/**\n * Type representing HTTP schemes\n */\nexport type HTTPScheme = 'http' | 'https'\n\n/**\n * Type representing HTTP Methods\n *\n */\nexport type HTTPMethod = 'GET' | 'POST' | 'PUT' | 'DELETE'\n\n/**\n * Type alias representing HTTP Headers\n */\nexport type HTTPHeaders = { [key: string]: string }\n\n/**\n * HTTPHeaderBag is a type alias representing HTTP Headers\n */\nexport type HTTPHeaderBag = Record<string, string>\n\nexport function hasHeader(soughtHeader: string, headers: HTTPHeaderBag): boolean {\n    soughtHeader = soughtHeader.toLowerCase()\n\n    for (const headerName of Object.keys(headers)) {\n        if (soughtHeader === headerName.toLowerCase()) {\n            return true\n        }\n    }\n\n    return false\n}\n\n/**\n * QueryParameterBag is a type alias representing HTTP Query Parameters\n */\nexport type QueryParameterBag = Record<string, string | Array<string>>\n\n/**\n * HTTPRequest represents an HTTP request\n */\nexport interface HTTPRequest {\n    /**\n     * The HTTP method to use\n     */\n    method: HTTPMethod\n\n    /**\n     * Represents an AWS service endpoint, providing utilities for parsing and handling URL details.\n     */\n    endpoint: Endpoint\n\n    /**\n     * The path to the resource\n     */\n    path: string\n\n    /**\n     * The query parameters to include in the request\n     */\n    query?: QueryParameterBag\n\n    /**\n     * The headers to include in the request\n     */\n    headers: HTTPHeaderBag\n\n    /**\n     * The body of the request\n     */\n    body?: string | ArrayBuffer | null\n}\n\n/**\n * SignedHTTPRequest represents an HTTP request that has been signed\n * with an AWS signature. It is a superset of HTTPRequest adding\n * the following fields:\n * - url: the fully qualified URL of the request that can be used in a k6 http.request.\n */\nexport interface SignedHTTPRequest extends HTTPRequest {\n    url: string\n}\n","/**\n *\n * @param value\n * @returns\n */\nexport function isArrayBuffer(value: unknown): value is ArrayBuffer {\n    return (\n        typeof ArrayBuffer === 'function' &&\n        (value instanceof ArrayBuffer ||\n            Object.prototype.toString.call(value) === '[object ArrayBuffer]')\n    )\n}\n\nexport function toFormUrlEncoded(form: Record<string, string | number | boolean>): string {\n    return Object.keys(form)\n        .reduce((params, key) => {\n            const value = form[key]\n            if (value !== undefined && value !== null) {\n                params.push(`${encodeURIComponent(key)}=${encodeURIComponent(value)}`)\n            }\n            return params\n        }, [] as string[])\n        .join('&')\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"k6/http\");","import { JSONArray, JSONObject } from 'k6'\nimport http, { RefinedResponse, ResponseType } from 'k6/http'\n\nimport { v4 as uuidv4 } from 'uuid'\nimport { AWSClient } from './client'\nimport { AWSConfig } from './config'\nimport { AMZ_TARGET_HEADER } from './constants'\nimport { AWSError } from './error'\nimport { HTTPHeaders, HTTPMethod } from './http'\nimport { InvalidSignatureError, SignatureV4 } from './signature'\n\n/**\n * Class allowing to interact with Amazon AWS's SecretsManager service\n */\nexport class SecretsManagerClient extends AWSClient {\n    private readonly signature: SignatureV4\n    private readonly method: HTTPMethod\n    private readonly commonHeaders: HTTPHeaders\n\n    /**\n     * Create a SecretsManagerClient\n     * @param  {AWSConfig} awsConfig - configuration attributes to use when interacting with AWS' APIs\n     */\n    constructor(awsConfig: AWSConfig) {\n        super(awsConfig, 'secretsmanager')\n\n        this.signature = new SignatureV4({\n            service: this.serviceName,\n            region: this.awsConfig.region,\n            credentials: {\n                accessKeyId: this.awsConfig.accessKeyId,\n                secretAccessKey: this.awsConfig.secretAccessKey,\n                sessionToken: this.awsConfig.sessionToken,\n            },\n            uriEscapePath: true,\n            applyChecksum: false,\n        })\n\n        // All interactions with the Secrets Manager service\n        // are made via the GET or POST method.\n        this.method = 'POST'\n        this.commonHeaders = {\n            'Content-Type': 'application/x-amz-json-1.1',\n        }\n    }\n\n    /**\n     * Returns a list of all secrets owned by the authenticated sender of the request.\n     * To use this operation, you must have the secretsmanager:ListSecrets permission.\n     *\n     * @return  {Array.<Secret>} secrets - An array of objects describing Secret Manager's secrets\n     * @throws  {SecretsManagerServiceError}\n     * @throws  {InvalidSignatureError}\n     */\n    async listSecrets(): Promise<Array<Secret>> {\n        const signedRequest = this.signature.sign(\n            {\n                method: this.method,\n                endpoint: this.endpoint,\n                path: '/',\n                headers: {\n                    ...this.commonHeaders,\n                    [AMZ_TARGET_HEADER]: `${this.serviceName}.ListSecrets`,\n                },\n                body: JSON.stringify({}),\n            },\n            {}\n        )\n\n        const res = await http.asyncRequest(this.method, signedRequest.url, signedRequest.body, {\n            headers: signedRequest.headers,\n        })\n        this._handle_error(SecretsManagerOperation.ListSecrets, res)\n        const json: JSONArray = res.json('SecretList') as JSONArray\n\n        return json.map((s) => Secret.fromJSON(s as JSONObject))\n    }\n\n    /**\n     * Retrieves a secret from Amazon Sercets Manager\n     *\n     * @param {string} id - The ARN or name of the secret to retrieve.\n     * @returns {Secret} - returns the content of the fetched Secret object.\n     * @throws {SecretsManagerServiceError}\n     * @throws {InvalidSignatureError}\n     */\n    async getSecret(id: string): Promise<Secret | undefined> {\n        const signedRequest = this.signature.sign(\n            {\n                method: this.method,\n                endpoint: this.endpoint,\n                path: '/',\n                headers: {\n                    ...this.commonHeaders,\n                    [AMZ_TARGET_HEADER]: `${this.serviceName}.GetSecretValue`,\n                },\n                body: JSON.stringify({ SecretId: id }),\n            },\n            {}\n        )\n\n        const res = await http.asyncRequest(this.method, signedRequest.url, signedRequest.body, {\n            headers: signedRequest.headers,\n        })\n\n        this._handle_error(SecretsManagerOperation.GetSecretValue, res)\n\n        return Secret.fromJSON(res.json() as JSONObject)\n    }\n\n    /**\n     * Creates a new secret\n     *\n     * Note that this method only supports string-based values at the moment.\n     *\n     * @param  {string} name - The name of the new secret.\n     *     The secret name can contain ASCII letters, numbers, and the following characters: /_+=.@\n     * @param  {string} secret - The text data to encrypt and store in this new version of the secret.\n     * @param  {string} description - The description of the secret.\n     * @param  {string} versionID=null - Version of the secret. This value helps ensure idempotency.\n     *     As a default, if no versionID is provided, one will be created for you using the UUID v4\n     *     algorithm.\n     * @param  {Array.<Object>} tags=[] - A list of tags to attach to the secret. Each tag is a key and\n     *     value pair of strings in a JSON text string. Note that tag key names are case sensitive.\n     * @returns {Secret} - returns the created secret\n     * @throws {SecretsManagerServiceError}\n     * @throws {InvalidSignatureError}\n     */\n    async createSecret(\n        name: string,\n        secret: string,\n        description: string,\n        versionID?: string,\n        tags?: Array<object>\n    ): Promise<Secret> {\n        versionID = versionID || uuidv4()\n\n        const signedRequest = this.signature.sign(\n            {\n                method: this.method,\n                endpoint: this.endpoint,\n                path: '/',\n                headers: {\n                    ...this.commonHeaders,\n                    [AMZ_TARGET_HEADER]: `${this.serviceName}.CreateSecret`,\n                },\n                body: JSON.stringify({\n                    Name: name,\n                    Description: description,\n                    SecretString: secret,\n                    ClientRequestToken: versionID,\n                    Tags: tags,\n                }),\n            },\n            {}\n        )\n\n        // Ensure to include the desired 'Action' in the X-Amz-Target\n        // header field, as documented by the AWS API docs.\n        // headers['X-Amz-Target'] = `${this.serviceName}.CreateSecret`\n\n        const res = await http.asyncRequest(this.method, signedRequest.url, signedRequest.body, {\n            headers: signedRequest.headers,\n        })\n        this._handle_error(SecretsManagerOperation.CreateSecret, res)\n\n        return Secret.fromJSON(res.json() as JSONObject)\n    }\n    /**\n     * Update a secret's value.\n     *\n     * Note that this method only support string-based values at the moment.\n     *\n     * @param  {string} id - The ARN or name of the secret to update.\n     * @param  {string} secret - The text data to encrypt and store in this new version of the secret.\n     * @param  {} versionID=null  - A unique identifier for the new version of the secret. This value helps ensure idempotency.\n     *     As a default, if no versionID is provided, one will be created for you using the UUID v4\n     * @throws {SecretsManagerServiceError}\n     * @throws {InvalidSignatureError}\n     */\n    async putSecretValue(id: string, secret: string, versionID?: string): Promise<Secret> {\n        versionID = versionID || uuidv4()\n\n        const signedRequest = this.signature.sign(\n            {\n                method: this.method,\n                endpoint: this.endpoint,\n                path: '/',\n                headers: {\n                    ...this.commonHeaders,\n                    [AMZ_TARGET_HEADER]: `${this.serviceName}.PutSecretValue`,\n                },\n                body: JSON.stringify({\n                    SecretId: id,\n                    SecretString: secret,\n                    ClientRequestToken: versionID,\n                }),\n            },\n            {}\n        )\n\n        const res = await http.asyncRequest(this.method, signedRequest.url, signedRequest.body, {\n            headers: signedRequest.headers,\n        })\n        this._handle_error(SecretsManagerOperation.PutSecretValue, res)\n\n        return Secret.fromJSON(res.json() as JSONObject)\n    }\n\n    /**\n     * Deletes a secret and all of its versions.\n     *\n     * You can specify a recovery window during which you can restore the secret.\n     * The minimum recovery window is 7 days. The default recovery window is 30 days.\n     *\n     * @param {string} secretID - The ARN or name of the secret to delete.\n     * @param {number} recoveryWindow - The number of days from 7 to 30 that Secrets Manager\n     *     waits before permanently deleting the secret.\n     * @throws {SecretsManagerServiceError}\n     * @throws {InvalidSignatureError}\n     */\n    async deleteSecret(\n        id: string,\n        { recoveryWindow = 30, noRecovery = false }: { recoveryWindow: number; noRecovery: boolean }\n    ): Promise<void> {\n        const payload: { [key: string]: string | boolean | number } = {\n            SecretId: id,\n        }\n\n        // noRecovery and recoveryWindow are exclusive parameters\n        if (noRecovery === true) {\n            payload['ForceDeleteWithoutRecovery'] = true\n        } else {\n            payload['RecoveryWindowInDays'] = recoveryWindow\n        }\n\n        const signedRequest = this.signature.sign(\n            {\n                method: this.method,\n                endpoint: this.endpoint,\n                path: '/',\n                headers: {\n                    ...this.commonHeaders,\n                    [AMZ_TARGET_HEADER]: `${this.serviceName}.DeleteSecret`,\n                },\n                body: JSON.stringify(payload),\n            },\n            {}\n        )\n\n        const res = await http.asyncRequest(this.method, signedRequest.url, signedRequest.body, {\n            headers: signedRequest.headers,\n        })\n        this._handle_error(SecretsManagerOperation.DeleteSecret, res)\n    }\n\n    _handle_error(\n        operation: SecretsManagerOperation,\n        response: RefinedResponse<ResponseType | undefined>\n    ) {\n        const errorCode = response.error_code\n        if (errorCode === 0) {\n            return\n        }\n\n        const error = response.json() as JSONObject\n        if (errorCode >= 1400 && errorCode <= 1499) {\n            // In the event of certain errors, the message is not set.\n            // Also, note the inconsistency in casing...\n            const errorMessage: string =\n                (error.Message as string) || (error.message as string) || (error.__type as string)\n\n            // Handle specifically the case of an invalid signature\n            if (error.__type === 'InvalidSignatureException') {\n                throw new InvalidSignatureError(errorMessage, error.__type)\n            }\n\n            // Otherwise throw a standard service error\n            throw new SecretsManagerServiceError(errorMessage, error.__type as string, operation)\n        }\n\n        if (errorCode === 1500) {\n            throw new SecretsManagerServiceError(\n                'An error occured on the server side',\n                'InternalServiceError',\n                operation\n            )\n        }\n    }\n}\n\n// TODO: create a Tags type\n\n/**\n * Class representing a Secret Manager's secret\n */\nexport class Secret {\n    name: string\n    arn: string\n    secret: string\n    createdDate: number\n    lastAccessedDate: number\n    lastChangedDate: number\n    tags: Array<{ [key: string]: string }>\n\n    /**\n     * Constructs a Secret Manager's Secret\n     *\n     * @param  {string} name - The friendly name of the secret.\n     * @param  {string} arn - The ARN of the secret.\n     * @param  {number} createdDate - The date and time that this version of the secret was created.\n     * @param  {number} lastAccessedDate - The last date that this secret was accessed. This value is\n     *     truncated to midnight of the date and therefore shows only the date, not the time.\n     * @param  {number} lastChangedDate - The last date and time that this secret was modified in any way.\n     * @param  {Array.<Object>} tags - The list of user-defined tags associated with the secret.\n     */\n    constructor(\n        name: string,\n        arn: string,\n        secretString: string,\n        createdDate: number,\n        lastAccessedDate: number,\n        lastChangedDate: number,\n        tags: Array<{ [key: string]: string }> = []\n    ) {\n        this.name = name\n        this.arn = arn\n        this.secret = secretString\n        this.createdDate = createdDate\n        this.lastAccessedDate = lastAccessedDate\n        this.lastChangedDate = lastChangedDate\n        this.tags = tags\n    }\n\n    /**\n     * Parses and constructs a Secret Manager's Secret from the content\n     * of a JSON response returned by the AWS service\n     *\n     * @param  {Object} json - JSON object as returned and parsed from\n     *     the AWS service's API call.\n     * @returns {Secret}\n     */\n    static fromJSON(json: JSONObject) {\n        return new Secret(\n            json.Name as string,\n            json.ARN as string,\n            json.SecretString as string,\n            json.CreatedDate as number,\n            json.LastAccessedDate as number,\n            json.LastChangedDate as number,\n            json.Tags as Array<{ [key: string]: string }>\n        )\n    }\n}\n\nexport class SecretsManagerServiceError extends AWSError {\n    operation: SecretsManagerOperation\n\n    /**\n     * Constructs a SecretsManagerServiceError\n     *\n     * @param  {string} message - human readable error message\n     * @param  {string} code - A unique short code representing the error that was emitted\n     * @param  {string} operation - Name of the failed Operation\n     */\n    constructor(message: string, code: string, operation: SecretsManagerOperation) {\n        super(message, code)\n        this.name = 'SecretsManagerServiceError'\n        this.operation = operation\n    }\n}\n\n/**\n *  SecretsManagerOperation defines all currently implemented Secrets Manager Service operations.\n */\nenum SecretsManagerOperation {\n    ListSecrets = 'ListSecrets',\n    GetSecretValue = 'GetSecretValue',\n    CreateSecret = 'CreateSecret',\n    PutSecretValue = 'PutSecretValue',\n    DeleteSecret = 'DeleteSecret',\n}\n","import { AWSConfig } from './config'\nimport { Endpoint } from './endpoint'\nimport { HTTPHeaders } from './http'\n\n/**\n * Class allowing to build requests targeting AWS APIs\n *\n * This class is meant to be used as a base class for specific\n * services clients. See S3Client or SecretsManagerClient for\n * usage examples.\n */\nexport class AWSClient {\n    readonly awsConfig: AWSConfig\n    readonly serviceName: string\n\n    private _endpoint?: Endpoint\n\n    /**\n     * @param {AWSConfig} awsConfig - configuration attributes to use when interacting with AWS' APIs\n     * @param  {string} serviceName - name of the service to target.\n     * @param  {URIEncodingConfig} URIencodingConfig - configures how requests URIs should be encoded.\n     */\n    constructor(awsConfig: AWSConfig, serviceName: string) {\n        this.awsConfig = awsConfig\n        this.serviceName = serviceName\n\n        // If an endpoint is provided in the config, set it\n        // to ensure the default endpoint is not used.\n        if (awsConfig.endpoint != undefined) {\n            this._endpoint = awsConfig.endpoint\n        }\n    }\n\n    /**\n     * Represents the endpoint URL of the AWS service.\n     *\n     * If no custom endpoint is set, a default endpoint will be constructed\n     * using the service name and region provided in the AWS config.\n     *\n     * @type {Endpoint}\n     * @public\n     */\n    public get endpoint() {\n        if (this._endpoint == undefined) {\n            this._endpoint = new Endpoint(\n                `https://${this.serviceName}.${this.awsConfig.region}.amazonaws.com`\n            )\n        }\n        return this._endpoint\n    }\n\n    /**\n     * Updates the endpoint URL of the AWS service.\n     *\n     * This can be used to override the default AWS service endpoint or set a custom endpoint.\n     *\n     * @param {Endpoint} endpoint - The new endpoint to set for the AWS service.\n     * @public\n     */\n    public set endpoint(endpoint: Endpoint) {\n        this._endpoint = endpoint\n    }\n}\n\n/**\n * Type alias representing the result of an AWSClient.buildRequest call\n */\nexport interface AWSRequest {\n    readonly url: string\n    readonly headers: HTTPHeaders\n}\n"],"names":["v1","v4","uuid","module","exports","byteToHex","i","toString","substr","buf","offset","bth","join","getRandomValues","crypto","bind","window","msCrypto","rnds8","Uint8Array","rnds","Array","r","Math","random","_nodeId","_clockseq","rng","bytesToUuid","_lastMSecs","_lastNSecs","options","b","node","clockseq","undefined","seedBytes","msecs","Date","getTime","nsecs","dt","Error","tl","tmh","n","ii","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","getter","__esModule","d","a","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","Endpoint","endpoint","_classCallCheck","_defineProperty","completeUrl","startsWith","concat","DEFAULT_PROTOCOL","protocolMatch","match","hostnameWithPort","_slicedToArray","replace","split","this","_protocol","slice","_hostname","_port","parseInt","href","set","_value$split2","hostname","port","protocol","host","AWSConfig","region","InvalidAWSConfigError","accessKeyId","length","secretAccessKey","sessionToken","_createClass","__ENV","AWS_REGION","AWS_ACCESS_KEY_ID","AWS_SECRET_ACCESS_KEY","AWS_SESSION_TOKEN","_Error","_inherits","_super","_createSuper","message","_wrapNativeSuper","require","AMZ_DATE_QUERY_PARAM","AMZ_SIGNATURE_QUERY_PARAM","AMZ_TOKEN_QUERY_PARAM","AMZ_CONTENT_SHA256_HEADER","AMZ_DATE_HEADER","toLowerCase","AMZ_SIGNATURE_HEADER","AMZ_TARGET_HEADER","AMZ_TOKEN_HEADER","AUTHORIZATION_HEADER","GENERATED_HEADERS","HOST_HEADER","ALWAYS_UNSIGNABLE_HEADERS","authorization","connection","expect","from","pragma","referer","te","trailer","upgrade","KEY_TYPE_IDENTIFIER","SIGNING_ALGORITHM_IDENTIFIER","AWSError","code","_this","_assertThisInitialized","name","xmlDocument","doc","parseHTML","find","text","response","headers","error","json","Message","__type","parseXML","body","SignatureV4","_ref","service","credentials","uriEscapePath","applyChecksum","request","arguments","finalOptions","_objectSpread","signingDate","unsignableHeaders","Set","signableHeaders","_formatDate","formatDate","longDate","shortDate","signingService","signingRegion","scope","constants","_i","_Object$keys","keys","headerName","indexOf","ArrayBuffer","isView","buffer","payloadHash","computePayloadHash","soughtHeader","hasHeader","canonicalHeaders","computeCanonicalHeaders","signature","calculateSignature","deriveSigningKey","createCanonicalRequest","sort","url","path","query","serializeQueryParameters","originalRequest","_options$signingDate","_options$expiresIn","expiresIn","unhoistableHeaders","_formatDate2","InvalidSignatureError","moveHeadersToQuery","signingKey","canonicalRequest","sortedHeaders","sortedCanonicalHeaders","map","signedHeaders","method","computeCanonicalURI","computeCanonicalQuerystring","credentialScope","hashedCanonicalRequest","stringToSign","createStringToSign","kSecret","kDate","kRegion","kService","_ref2","_step","normalizedURISegments","_iterator","_createForOfIteratorHelper","s","done","URISegment","pop","push","err","e","f","leading","URI","trailing","endsWith","normalizedURI","encodeURIComponent","_ref3","_step2","_ref3$query","serialized","_loop","escapeURI","isArray","reduce","encoded","_iterator2","filter","_ref4","_step3","_iterator3","canonicalHeaderName","has","trim","_ref5","requestCopy","JSON","parse","stringify","_requestCopy$query","_i2","_Object$keys2","_options$unhoistableH","lowerCaseName","ignoreKeys","_step4","_loop2","includes","_iterator4","_AWSError","c","charCodeAt","toUpperCase","date","time","Number","toDate","toISOString","_regeneratorRuntime","t","iterator","asyncIterator","u","define","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","h","l","y","GeneratorFunction","GeneratorFunctionPrototype","p","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","_typeof","resolve","__await","then","callInvokeWithMethodAndArg","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","resetTryEntry","completion","reset","isNaN","displayName","isGeneratorFunction","constructor","mark","setPrototypeOf","__proto__","awrap","async","Promise","reverse","prev","charAt","stop","rval","handle","complete","finish","delegateYield","ownKeys","getOwnPropertySymbols","getOwnPropertyDescriptor","apply","getOwnPropertyDescriptors","defineProperties","asyncGeneratorStep","gen","reject","_next","_throw","info","_asyncToGenerator","fn","self","args","instance","Constructor","_defineProperties","target","props","descriptor","_toPropertyKey","protoProps","staticProps","subClass","superClass","_setPrototypeOf","Derived","hasNativeReflectConstruct","Reflect","construct","sham","Proxy","Boolean","valueOf","_isNativeReflectConstruct","result","Super","_getPrototypeOf","NewTarget","_possibleConstructorReturn","ReferenceError","input","hint","prim","toPrimitive","res","String","_toPrimitive","SecretsManagerClient","_AWSClient","_deleteSecret","_putSecretValue","_createSecret","_getSecret","_listSecrets","awsConfig","serviceName","commonHeaders","_callee","signedRequest","_context","sign","http","_handle_error","SecretsManagerOperation","ListSecrets","Secret","fromJSON","_callee2","id","_context2","SecretId","GetSecretValue","_x","_callee3","secret","description","versionID","tags","_context3","uuidv4","Name","Description","SecretString","ClientRequestToken","Tags","CreateSecret","_x2","_x3","_x4","_x5","_x6","_callee4","_context4","PutSecretValue","_x7","_x8","_x9","_callee5","_ref$recoveryWindow","recoveryWindow","_ref$noRecovery","payload","_context5","noRecovery","DeleteSecret","_x10","_x11","operation","errorCode","error_code","errorMessage","SecretsManagerServiceError","AWSClient","_endpoint","arn","secretString","createdDate","lastAccessedDate","lastChangedDate","ARN","CreatedDate","LastAccessedDate","LastChangedDate","_super2","_this2"],"sourceRoot":""}