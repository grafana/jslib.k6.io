{"version":3,"file":"signature.js","mappings":"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","sources":["webpack://k6-jslib-aws/webpack/bootstrap","webpack://k6-jslib-aws/webpack/runtime/compat get default export","webpack://k6-jslib-aws/webpack/runtime/define property getters","webpack://k6-jslib-aws/webpack/runtime/hasOwnProperty shorthand","webpack://k6-jslib-aws/webpack/runtime/make namespace object","webpack://k6-jslib-aws/./src/internal/constants.ts","webpack://k6-jslib-aws/external commonjs \"k6/crypto\"","webpack://k6-jslib-aws/external commonjs \"k6/html\"","webpack://k6-jslib-aws/./src/internal/error.ts","webpack://k6-jslib-aws/./src/internal/signature.ts","webpack://k6-jslib-aws/./src/internal/http.ts","webpack://k6-jslib-aws/./src/internal/utils.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/**\n * Standard Amazon AWS query parameter names\n */\nexport const AMZ_ALGORITHM_QUERY_PARAM = 'X-Amz-Algorithm'\nexport const AMZ_CREDENTIAL_QUERY_PARAM = 'X-Amz-Credential'\nexport const AMZ_DATE_QUERY_PARAM = 'X-Amz-Date'\nexport const AMZ_EXPIRES_QUERY_PARAM = 'X-Amz-Expires'\nexport const AMZ_SIGNATURE_QUERY_PARAM = 'X-Amz-Signature'\nexport const AMZ_SIGNED_HEADERS_QUERY_PARAM = 'X-Amz-SignedHeaders'\nexport const AMZ_TARGET_QUERY_PARAM = 'X-Amz-Target'\nexport const AMZ_TOKEN_QUERY_PARAM = 'X-Amz-Security-Token'\n\n/**\n * Standard Amazon AWS header names\n */\nexport const AMZ_CONTENT_SHA256_HEADER = 'x-amz-content-sha256'\nexport const AMZ_DATE_HEADER = AMZ_DATE_QUERY_PARAM.toLowerCase()\nexport const AMZ_SIGNATURE_HEADER = AMZ_SIGNATURE_QUERY_PARAM.toLowerCase()\nexport const AMZ_TARGET_HEADER = AMZ_TARGET_QUERY_PARAM.toLowerCase()\nexport const AMZ_TOKEN_HEADER = AMZ_TOKEN_QUERY_PARAM.toLowerCase()\n\n/**\n * Common HTTP headers we rely on in the signing process\n */\nexport const AUTHORIZATION_HEADER = 'authorization'\nexport const DATE_HEADER = 'date'\n\n/**\n * Lists the headers that are generated as part of the signature process.\n */\nexport const GENERATED_HEADERS = [AUTHORIZATION_HEADER, AMZ_DATE_HEADER, DATE_HEADER]\nexport const HOST_HEADER = 'host'\n\n/**\n * Lists the headers that should never be included in the\n * request signature signature process.\n */\nexport const ALWAYS_UNSIGNABLE_HEADERS = {\n    authorization: true,\n    'cache-control': true,\n    connection: true,\n    expect: true,\n    from: true,\n    'keep-alive': true,\n    'max-forwards': true,\n    pragma: true,\n    referer: true,\n    te: true,\n    trailer: true,\n    'transfer-encoding': true,\n    upgrade: true,\n    'user-agent': true,\n    'x-amzn-trace-id': true,\n}\n\n/**\n * Signature specific constants included in the signing process\n */\nexport const KEY_TYPE_IDENTIFIER = 'aws4_request'\nexport const SIGNING_ALGORITHM_IDENTIFIER = 'AWS4-HMAC-SHA256'\n\n/**\n * Maximum time to live of a signed request in seconds: 7 days.\n */\nexport const MAX_PRESIGNED_TTL = 60 * 60 * 24 * 7\n\n/**\n * SHA256 hash of an empty string (so we don't waste cycles recomputing it)\n */\nexport const EMPTY_SHA256 = 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\n\n/**\n * SHA256 hash of the unsigned payload constant (so we don't waste cycles recomputing it)\n */\nexport const UNSIGNED_PAYLOAD_SHA256 =\n    '5a41b0751e4537c6ff868564ab44a4d4ecceec2ec5b1c5f74d97422968e04237'\n\nexport const UNSIGNED_PAYLOAD = 'UNSIGNED-PAYLOAD'\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"k6/crypto\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"k6/html\");","import { parseHTML } from 'k6/html'\n\n/**\n * Base class to derive errors from\n *\n * Inspired from AWS official error types, as\n * described in:\n *   * https://aws.amazon.com/blogs/developer/service-error-handling-modular-aws-sdk-js/\n *   * https://github.com/aws/aws-sdk-js/blob/master/lib/error.d.ts\n */\nexport class AWSError extends Error {\n    /**\n     * Error code issued by the service (if any)\n     */\n    code?: string\n\n    /**\n     * Create an AWSError\n     *\n     * @param {string} message - A longer human readable error message.\n     * @param {string?} code - A unique short code representing the error that was emitted\n     */\n    constructor(message: string, code?: string) {\n        super(message)\n        this.name = 'AWSError'\n        this.code = code\n    }\n\n    /**\n     * Parse an AWSError from an XML document\n     *\n     * @param  {string} xmlDocument - Serialized XML document to parse the error from\n     */\n    static parseXML(xmlDocument: string): AWSError {\n        const doc = parseHTML(xmlDocument)\n        return new AWSError(doc.find('Message').text(), doc.find('Code').text())\n    }\n}\n","import crypto from 'k6/crypto'\n\nimport * as constants from './constants'\nimport { AWSError } from './error'\nimport { hasHeader, HTTPHeaderBag, HTTPRequest, QueryParameterBag, SignedHTTPRequest } from './http'\nimport { isArrayBuffer } from './utils'\n\n/**\n * SignatureV4 can be used to sign HTTP requests and presign URLs using the AWS Signature\n * Version 4 signing process.\n *\n * It offers two signing methods:\n * - sign: signs the request headers and payload\n * - presign: returns a presigned (authorization information contained in the query string) URL\n *\n * @see https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html\n */\nexport class SignatureV4 {\n    /**\n     * The name of the service to sign for.\n     */\n    private readonly service: string\n\n    /**\n     * The name of the region to sign for.\n     */\n    private readonly region: string\n\n    /**\n     * The credentials with which the request should be signed.\n     */\n    private readonly credentials: Credentials\n\n    /**\n     * Whether to uri-escape the request URI path as part of computing the\n     * canonical request string. This is required for every AWS service, except\n     * Amazon S3, as of late 2017.\n     *\n     * @default [true]\n     */\n    private readonly uriEscapePath: boolean\n\n    /**\n     * Whether to calculate a checksum of the request body and include it as\n     * either a request header (when signing) or as a query string parameter\n     * (when presigning). This is required for AWS Glacier and Amazon S3 and optional for\n     * every other AWS service as of late 2017.\n     *\n     * @default [true]\n     */\n    private readonly applyChecksum: boolean\n\n    // TODO: uriEscapePath and applyChecksum should not be present in the constructor\n    constructor({\n        service,\n        region,\n        credentials,\n        uriEscapePath,\n        applyChecksum,\n    }: SignatureV4Options) {\n        this.service = service\n        this.region = region\n        this.credentials = credentials\n        this.uriEscapePath = typeof uriEscapePath === 'boolean' ? uriEscapePath : true\n        this.applyChecksum = typeof applyChecksum === 'boolean' ? applyChecksum : true\n    }\n\n    /**\n     * Includes AWS v4 signing information to the provided HTTP request.\n     *\n     * This method adds an Authorization header to the request, containing\n     * the signature and other signing information. It also returns a preformatted\n     * URL that can be used to make the k6 http request.\n     *\n     * This method mutates the request object.\n     *\n     * @param request {HTTPRequest} The request to sign.\n     * @param options {Partial<RequestSigningOptions>} Options for signing the request.\n     * @returns {SignedHTTPRequest} The signed request.\n     */\n    sign(request: HTTPRequest, options: Partial<RequestSigningOptions> = {}): SignedHTTPRequest {\n        // Set default values for options which are not provided by the user.\n        const defaultOptions = {\n            signingDate: new Date(),\n            unsignableHeaders: new Set<string>(),\n            signableHeaders: new Set<string>(),\n        }\n\n        // Merge default options with the ones maybe provided by the user.\n        const finalOptions = { ...defaultOptions, ...options }\n\n        const { longDate, shortDate }: DateInfo = formatDate(finalOptions.signingDate)\n        const service = finalOptions.signingService || this.service\n        const region = finalOptions.signingRegion || this.region\n        const scope = `${shortDate}/${region}/${service}/${constants.KEY_TYPE_IDENTIFIER}`\n\n        // Required by the specification:\n        //   \"For HTTP/1.1 requests, you must include the host header at a minimum.\n        //   Standard headers like content-type are optional.\n        //   For HTTP/2 requests, you must include the :authority header instead of\n        //   the host header. Different services might require other headers.\"\n        request.headers[constants.HOST_HEADER] = request.hostname\n\n        // Filter out headers that will be generated and managed by the signing process.\n        // If the user provide any of those as part of the HTTPRequest's headers, they\n        // will be ignored.\n        for (const headerName of Object.keys(request.headers)) {\n            if (constants.GENERATED_HEADERS.indexOf(headerName.toLowerCase()) > -1) {\n                delete request.headers[headerName]\n            }\n        }\n\n        request.headers[constants.AMZ_DATE_HEADER] = longDate\n        if (this.credentials.sessionToken) {\n            request.headers[constants.AMZ_TOKEN_HEADER] = this.credentials.sessionToken\n        }\n\n        // If the request body is a typed array, we need to convert it to a buffer\n        // so that we can calculate the checksum.\n        if (ArrayBuffer.isView(request.body)) {\n            request.body = request.body.buffer\n        }\n\n        // Ensure we avoid passing undefined to the crypto hash function.\n        if (!request.body) {\n            request.body = ''\n        }\n\n        let payloadHash = this.computePayloadHash(request)\n        if (\n            !hasHeader(constants.AMZ_CONTENT_SHA256_HEADER, request.headers) &&\n            this.applyChecksum\n        ) {\n            request.headers[constants.AMZ_CONTENT_SHA256_HEADER] = payloadHash\n        }\n\n        const canonicalHeaders = this.computeCanonicalHeaders(\n            request,\n            finalOptions.unsignableHeaders,\n            finalOptions.signableHeaders\n        )\n        const signature = this.calculateSignature(\n            longDate,\n            scope,\n            this.deriveSigningKey(this.credentials, service, region, shortDate),\n            this.createCanonicalRequest(request, canonicalHeaders, payloadHash)\n        )\n\n        /**\n         * Step 4 of the signing process: add the signature to the HTTP request's headers.\n         *\n         * @see https://docs.aws.amazon.com/general/latest/gr/sigv4-add-signature-to-request.html\n         */\n        request.headers[constants.AUTHORIZATION_HEADER] =\n            `${constants.SIGNING_ALGORITHM_IDENTIFIER} ` +\n            `Credential=${this.credentials.accessKeyId}/${scope}, ` +\n            `SignedHeaders=${Object.keys(canonicalHeaders).sort().join(';')}, ` +\n            `Signature=${signature}`\n\n        // If a request path was provided, add it to the URL\n        let url = `${request.protocol}://${request.hostname}`\n        if (request.path) {\n            url += request.path\n        }\n\n        // If a request query string was provided, add it to the URL\n        if (request.query) {\n            // We exclude the signature from the query string\n            url += `?${this.serializeQueryParameters(request.query)}`\n        }\n\n        return {\n            url: url,\n            ...request,\n        }\n    }\n\n    /**\n     * Produces a presigned URL with AWS v4 signature information for the provided HTTP request.\n     *\n     * A presigned URL is a URL that contains the authorization information\n     * (signature and other signing information) in the query string. This method\n     * returns a preformatted URL that can be used to make the k6 http request.\n     *\n     * @param originalRequest - The original request to presign.\n     * @param options - Options controlling the signing of the request.\n     * @returns A signed request, including the presigned URL.\n     */\n    presign(originalRequest: HTTPRequest, options: PresignOptions = {}): SignedHTTPRequest {\n        const {\n            signingDate = new Date(),\n            expiresIn = 3600,\n            unsignableHeaders,\n            unhoistableHeaders,\n            signableHeaders,\n            signingRegion,\n            signingService,\n        } = options\n        const { longDate, shortDate }: DateInfo = formatDate(signingDate)\n        const region = signingRegion || this.region\n        const service = signingService || this.service\n\n        if (expiresIn > constants.MAX_PRESIGNED_TTL) {\n            throw new InvalidSignatureError(\n                \"Signature version 4 presigned URLs can't be valid for more than 7 days\"\n            )\n        }\n\n        const scope = `${shortDate}/${region}/${service}/${constants.KEY_TYPE_IDENTIFIER}`\n        const request = this.moveHeadersToQuery(originalRequest, { unhoistableHeaders })\n\n        // Required by the specification:\n        //   \"For HTTP/1.1 requests, you must include the host header at a minimum.\n        //   Standard headers like content-type are optional.\n        //   For HTTP/2 requests, you must include the :authority header instead of\n        //   the host header. Different services might require other headers.\"\n        request.headers[constants.HOST_HEADER] = originalRequest.hostname\n\n        // If the user provided a session token, include it in the signed url query string.\n        if (this.credentials.sessionToken) {\n            request.query[constants.AMZ_TOKEN_QUERY_PARAM] = this.credentials.sessionToken\n        }\n\n        // Add base signing query parameters to the request, as described in the documentation\n        // @see https://docs.aws.amazon.com/general/latest/gr/sigv4-add-signature-to-request.html\n        request.query[constants.AMZ_ALGORITHM_QUERY_PARAM] = constants.SIGNING_ALGORITHM_IDENTIFIER\n        request.query[\n            constants.AMZ_CREDENTIAL_QUERY_PARAM\n        ] = `${this.credentials.accessKeyId}/${scope}`\n        request.query[constants.AMZ_DATE_QUERY_PARAM] = longDate\n        request.query[constants.AMZ_EXPIRES_QUERY_PARAM] = expiresIn.toString(10)\n\n        const canonicalHeaders = this.computeCanonicalHeaders(\n            request,\n            unsignableHeaders,\n            signableHeaders\n        )\n        request.query[constants.AMZ_SIGNED_HEADERS_QUERY_PARAM] = Object.keys(canonicalHeaders)\n            .sort()\n            .join(';')\n\n        const signingKey = this.deriveSigningKey(this.credentials, service, region, shortDate)\n\n        // Computing the payload from the original request. This is required\n        // in the event the user attempts to produce a presigned URL for s3,\n        // which requires the payload hash to be 'UNSIGNED-PAYLOAD'.\n        //\n        // To that effect, users need to set the 'x-amz-content-sha256' header,\n        // and mark it as unhoistable and unsignable. When setup this way,\n        // the computePayloadHash method will then return the string 'UNSIGNED-PAYLOAD'.\n        const payloadHash = this.computePayloadHash(originalRequest)\n        const canonicalRequest = this.createCanonicalRequest(request, canonicalHeaders, payloadHash)\n\n        request.query[constants.AMZ_SIGNATURE_QUERY_PARAM] = this.calculateSignature(\n            longDate,\n            scope,\n            signingKey,\n            canonicalRequest\n        )\n\n        // If a request path was provided, add it to the URL\n        let url = `${request.protocol}://${request.hostname}`\n        if (request.path) {\n            url += request.path\n        }\n\n        // If a request query string was provided, add it to the URL\n        if (request.query) {\n            url += `?${this.serializeQueryParameters(request.query)}`\n        }\n\n        return { url: url, ...request }\n    }\n\n    /**\n     * Create a string including information from your request\n     * in a AWS signature v4 standardized (canonical) format.\n     *\n     * Step 1 of the signing process: create the canonical request string.\n     * @see https://docs.aws.amazon.com/general/latest/gr/sigv4-create-canonical-request.html\n     *\n     * @param request {HTTPRequest} The request to sign.\n     * @param canonicalHeaders {HTTPHeaderBag} The request's canonical headers.\n     * @param payloadHash {string} The hexadecimally encoded request's payload hash .\n     * @returns {string} The canonical request string.\n     */\n    private createCanonicalRequest(\n        request: HTTPRequest,\n        canonicalHeaders: HTTPHeaderBag,\n        payloadHash: string\n    ): string {\n        const sortedHeaders = Object.keys(canonicalHeaders).sort()\n        const sortedCanonicalHeaders = sortedHeaders\n            .map((name) => `${name}:${canonicalHeaders[name]}`)\n            .join('\\n')\n        const signedHeaders = sortedHeaders.join(';')\n\n        return (\n            `${request.method}\\n` +\n            `${this.computeCanonicalURI(request)}\\n` +\n            `${this.computeCanonicalQuerystring(request)}\\n` +\n            `${sortedCanonicalHeaders}\\n\\n` +\n            `${signedHeaders}\\n` +\n            `${payloadHash}`\n        )\n    }\n\n    /**\n     * Create the \"string to sign\" part of the signature Version 4 protocol.\n     *\n     * The \"string to sign\" includes meta information about your request and\n     * about the canonical request that you created with `createCanonicalRequest`.\n     * It is used hand in hand with the signing key to create the request signature.\n     * Step 2 of the signing process: create the string to sign.\n     * @see https://docs.aws.amazon.com/general/latest/gr/sigv4-create-string-to-sign.html\n     *\n     * @param longDate {string} The request's date in iso 8601 format.\n     * @param credentialScope {string} The request's credential scope.\n     * @param canonicalRequest {string} The request's canonical request.\n     * @returns {string} The \"string to sign\".\n     */\n    private createStringToSign(\n        longDate: string,\n        credentialScope: string,\n        canonicalRequest: string\n    ): string {\n        const hashedCanonicalRequest = crypto.sha256(canonicalRequest, 'hex')\n\n        return (\n            `${constants.SIGNING_ALGORITHM_IDENTIFIER}\\n` +\n            `${longDate}\\n` +\n            `${credentialScope}\\n` +\n            `${hashedCanonicalRequest}`\n        )\n    }\n\n    /**\n     * Calculte the signature for AWS signature version 4.\n     *\n     * Step 3 of the signing process: create the signature.\n     * @see https://docs.aws.amazon.com/general/latest/gr/sigv4-calculate-signature.html\n     *\n     * @param longDate {string} The request's date in iso 8601 format.\n     * @param credentialScope {string} The request's credential scope.\n     * @param signingKey {string} the signing key as computed by the deriveSigningKey method.\n     * @param canonicalRequest {string} The request's canonical request.\n     * @returns {string} The signature.\n     */\n    private calculateSignature(\n        longDate: string,\n        credentialScope: string,\n        signingKey: Uint8Array,\n        canonicalRequest: string\n    ): string {\n        const stringToSign = this.createStringToSign(longDate, credentialScope, canonicalRequest)\n        return crypto.hmac('sha256', signingKey, stringToSign, 'hex')\n    }\n\n    /**\n     * Derives the signing key for authenticating requests signed with\n     * the Signature version 4 authentication protocol.\n     *\n     * deriveSigningKey produces a signing key by creating a series of\n     * hash-based message authentication codes (HMACs) represented in\n     * a binary format.\n     *\n     * The derived signing key is specific to the date it's made at, as well as\n     * the service and region it targets.\n     *\n     * @param credentials {AWSCredentials} The credentials to use for signing.\n     * @param service {string} The service the request is targeted at.\n     * @param region {string} The region the request is targeted at.\n     * @param shortDate {string} The request's date in YYYYMMDD format.\n     * @returns {Uint8Array} The derived signing key.\n     */\n    private deriveSigningKey(\n        credentials: Credentials,\n        service: string,\n        region: string,\n        shortDate: string\n    ): Uint8Array {\n        const kSecret: string = credentials.secretAccessKey\n        const kDate: any = crypto.hmac('sha256', 'AWS4' + kSecret, shortDate, 'binary')\n        const kRegion: any = crypto.hmac('sha256', kDate, region, 'binary')\n        const kService: any = crypto.hmac('sha256', kRegion, service, 'binary')\n        const kSigning: any = crypto.hmac('sha256', kService, 'aws4_request', 'binary')\n\n        return kSigning\n    }\n\n    /**\n     * Create a string that includes information from your request\n     * in a AWS signature v4 standardized (canonical) format.\n     *\n     * @param param0 {HTTPRequest} The request to sign.\n     * @returns {string} The canonical URI.\n     */\n    private computeCanonicalURI({ path }: HTTPRequest): string {\n        if (this.uriEscapePath) {\n            // Non-S3 services, we normalize the path and then double URI encode it.\n            // Ref: \"Remove Dot Segments\" https://datatracker.ietf.org/doc/html/rfc3986#section-5.2.4\n            const normalizedURISegments = []\n\n            for (const URISegment of path.split('/')) {\n                if (URISegment?.length === 0) {\n                    continue\n                }\n\n                if (URISegment === '.') {\n                    continue\n                }\n\n                if (URISegment === '..') {\n                    normalizedURISegments.pop()\n                } else {\n                    normalizedURISegments.push(URISegment)\n                }\n            }\n\n            // Normalize the URI\n            const leading = path?.startsWith('/') ? '/' : ''\n            const URI = normalizedURISegments.join('/')\n            const trailing = normalizedURISegments.length > 0 && path?.endsWith('/') ? '/' : ''\n            const normalizedURI = `${leading}${URI}${trailing}`\n\n            const doubleEncoded = encodeURIComponent(normalizedURI)\n\n            return doubleEncoded.replace(/%2F/g, '/')\n        }\n\n        // For S3, we shouldn't normalize the path. For example, object name\n        // my-object//example//photo.user should not be normalized to\n        // my-object/example/photo.user\n        return path\n    }\n\n    /**\n     * Serializes the request's query parameters into their canonical\n     * string version. If the request does not include a query parameters,\n     * returns an empty string.\n     *\n     * @param param0 {HTTPRequest} The request containing the query parameters.\n     * @returns {string} The canonical query string.\n     */\n    private computeCanonicalQuerystring({ query = {} }: HTTPRequest): string {\n        const keys: Array<string> = []\n        const serialized: Record<string, string> = {}\n\n        for (const key of Object.keys(query).sort()) {\n            if (key.toLowerCase() === constants.AMZ_SIGNATURE_HEADER) {\n                continue\n            }\n\n            keys.push(key)\n            const value = query[key]\n\n            if (typeof value === 'string') {\n                serialized[key] = `${escapeURI(key)}=${escapeURI(value)}`\n            } else if (Array.isArray(value)) {\n                serialized[key] = value\n                    .slice(0)\n                    .sort()\n                    .reduce(\n                        (encoded: Array<string>, value: string) =>\n                            encoded.concat([`${escapeURI(key)}=${escapeURI(value)}`]),\n                        []\n                    )\n                    .join('&')\n            }\n        }\n\n        return keys\n            .map((key) => serialized[key])\n            .filter((serialized) => serialized)\n            .join('&')\n    }\n\n    /**\n     * Create the canonical form of the request's headers.\n     * Canonical headers consist of all the HTTP headers you\n     * are including with the signed request.\n     *\n     * @param param0 {HTTPRequest} The request to compute the canonical headers of.\n     * @param unsignableHeaders {Set<string>} The headers that should not be signed.\n     * @param signableHeaders {Set<string>} The headers that should be signed.\n     * @returns {string} The canonical headers.\n     */\n    private computeCanonicalHeaders(\n        { headers }: HTTPRequest,\n        unsignableHeaders?: Set<string>,\n        signableHeaders?: Set<string>\n    ): HTTPHeaderBag {\n        const canonicalHeaders: HTTPHeaderBag = {}\n\n        for (const headerName of Object.keys(headers).sort()) {\n            if (headers[headerName] == undefined) {\n                continue\n            }\n\n            const canonicalHeaderName = headerName.toLowerCase()\n            if (\n                canonicalHeaderName in constants.ALWAYS_UNSIGNABLE_HEADERS ||\n                unsignableHeaders?.has(canonicalHeaderName)\n            ) {\n                if (\n                    !signableHeaders ||\n                    (signableHeaders && !signableHeaders.has(canonicalHeaderName))\n                ) {\n                    continue\n                }\n            }\n\n            canonicalHeaders[canonicalHeaderName] = headers[headerName].trim().replace(/\\s+/g, ' ')\n        }\n\n        return canonicalHeaders\n    }\n\n    /**\n     * Computes the SHA256 cryptographic hash of the request's body.\n     *\n     * If the headers contain the 'X-Amz-Content-Sha256' header, then\n     * the value of that header is returned instead. This proves useful\n     * when, for example, presiging a URL for S3, as the payload hash\n     * must always be equal to 'UNSIGNED-PAYLOAD'.\n     *\n     * @param param0 {HTTPRequest} The request to compute the payload hash of.\n     * @returns {string} The hex encoded SHA256 payload hash, or the value of the 'X-Amz-Content-Sha256' header.\n     */\n    private computePayloadHash({ headers, body }: HTTPRequest): string {\n        // for (const headerName of Object.keys(headers)) {\n        //     // If the header is present, return its value.\n        //     // So that we let the 'UNSIGNED-PAYLOAD' value pass through.\n        //     if (headerName.toLowerCase() === constants.AMZ_CONTENT_SHA256_HEADER) {\n        //         return headers[headerName]\n        //     }\n        // }\n\n        if (headers[constants.AMZ_CONTENT_SHA256_HEADER]) {\n            return headers[constants.AMZ_CONTENT_SHA256_HEADER]\n        }\n\n        if (body == undefined) {\n            return constants.EMPTY_SHA256\n        }\n\n        if (typeof body === 'string' || isArrayBuffer(body)) {\n            return crypto.sha256(body, 'hex').toLowerCase()\n        }\n\n        if (ArrayBuffer.isView(body)) {\n            // If the request body is a typed array, we need to convert it to a buffer\n            // so that we can calculate the checksum.\n            return crypto.sha256((body as DataView).buffer, 'hex').toLowerCase()\n        }\n\n        return constants.UNSIGNED_PAYLOAD\n    }\n\n    /**\n     * Moves a request's headers to its query parameters.\n     *\n     * The operation will ignore any amazon standard headers, prefixed\n     * with 'X-Amz-'. It will also ignore any headers specified as unhoistable\n     * by the options.\n     *\n     * The operation will delete the headers from the request.\n     *\n     * @param request {HTTPRequest} The request to move the headers from.\n     * @param options\n     * @returns {HTTPRequest} The request with the headers moved to the query parameters.\n     */\n    private moveHeadersToQuery(\n        request: HTTPRequest,\n        options: { unhoistableHeaders?: Set<string> } = {}\n    ): HTTPRequest & { query: QueryParameterBag } {\n        const requestCopy = JSON.parse(JSON.stringify(request))\n        const { headers, query = {} as QueryParameterBag } = requestCopy\n\n        for (const name of Object.keys(headers)) {\n            const lowerCaseName = name.toLowerCase()\n            if (\n                lowerCaseName.slice(0, 6) === 'x-amz-' &&\n                !options.unhoistableHeaders?.has(lowerCaseName)\n            ) {\n                query[name] = headers[name]\n                delete headers[name]\n            }\n        }\n\n        return {\n            ...requestCopy,\n            headers,\n            query,\n        }\n    }\n\n    /**\n     * Serializes a HTTPRequest's query parameter bag into a string.\n     *\n     * @param query {QueryParameterBag} The query parameters to serialize.\n     * @param ignoreKeys {Set<string>} The keys to ignore.\n     * @returns {string} The serialized, and ready to use in a URL, query parameters.\n     */\n    private serializeQueryParameters(query: QueryParameterBag, ignoreKeys?: string[]): string {\n        const keys: Array<string> = []\n        const serialized: Record<string, string> = {}\n\n        for (const key of Object.keys(query).sort()) {\n            if (ignoreKeys?.includes(key.toLowerCase())) {\n                continue\n            }\n\n            keys.push(key)\n            const value = query[key]\n\n            if (typeof value === 'string') {\n                serialized[key] = `${escapeURI(key)}=${escapeURI(value)}`\n            } else if (Array.isArray(value)) {\n                serialized[key] = value\n                    .slice(0)\n                    .sort()\n                    .reduce(\n                        (encoded: Array<string>, value: string) =>\n                            encoded.concat([`${escapeURI(key)}=${escapeURI(value)}`]),\n                        []\n                    )\n                    .join('&')\n            }\n        }\n\n        return keys\n            .map((key) => serialized[key])\n            .filter((serialized) => serialized)\n            .join('&')\n    }\n}\n\n/**\n * Error indicating an Invalid signature has been sent to AWS services\n *\n * Inspired from AWS official error types, as\n * described in:\n *   * https://aws.amazon.com/blogs/developer/service-error-handling-modular-aws-sdk-js/\n *   * https://github.com/aws/aws-sdk-js/blob/master/lib/error.d.ts\n */\nexport class InvalidSignatureError extends AWSError {\n    /**\n     * Constructs an InvalidSignatureError\n     *\n     * @param  {string} message - human readable error message\n     */\n    constructor(message: string, code?: string) {\n        super(message, code)\n        this.name = 'InvalidSignatureError'\n    }\n}\n\nexport interface SignatureV4Options {\n    /**\n     * The name of the service to sign for.\n     */\n    service: string\n\n    /**\n     * The name of the region to sign for.\n     */\n    region: string\n\n    /**\n     * The credentials with which the request should be signed.\n     */\n    credentials: Credentials\n\n    /**\n     * Whether to uri-escape the request URI path as part of computing the\n     * canonical request string. This is required for every AWS service, except\n     * Amazon S3, as of late 2017.\n     *\n     * @default [true]\n     */\n    uriEscapePath?: boolean\n\n    /**\n     * Whether to calculate a checksum of the request body and include it as\n     * either a request header (when signing) or as a query string parameter\n     * (when presigning). This is required for AWS Glacier and Amazon S3 and optional for\n     * every other AWS service as of late 2017.\n     *\n     * @default [true]\n     */\n    applyChecksum?: boolean\n}\n\nexport interface SignOptions {\n    /**\n     * The date and time to be used as signature metadata. This value should be\n     * a Date object, a unix (epoch) timestamp, or a string that can be\n     * understood by the JavaScript `Date` constructor.If not supplied, the\n     * value returned by `new Date()` will be used.\n     */\n    signingDate?: Date\n\n    /**\n     * The service signing name. It will override the service name of the signer\n     * in current invocation\n     */\n    signingService?: string\n\n    /**\n     * The region name to sign the request. It will override the signing region of the\n     * signer in current invocation\n     */\n    signingRegion?: string\n}\n\nexport interface RequestSigningOptions extends SignOptions {\n    /**\n     * A set of strings whose members represents headers that cannot be signed.\n     * All headers in the provided request will have their names converted to\n     * lower case and then checked for existence in the unsignableHeaders set.\n     */\n    unsignableHeaders?: Set<string>\n\n    /**\n     * A set of strings whose members represents headers that should be signed.\n     * Any values passed here will override those provided via unsignableHeaders,\n     * allowing them to be signed.\n     *\n     * All headers in the provided request will have their names converted to\n     * lower case before signing.\n     */\n    signableHeaders?: Set<string>\n}\n\nexport interface PresignOptions extends RequestSigningOptions {\n    /**\n     * The number of seconds before the presigned URL expires\n     */\n    expiresIn?: number\n\n    /**\n     * A set of strings whose representing headers that should not be hoisted\n     * to presigned request's query string. If not supplied, the presigner\n     * moves all the AWS-specific headers (starting with `x-amz-`) to the request\n     * query string. If supplied, these headers remain in the presigned request's\n     * header.\n     * All headers in the provided request will have their names converted to\n     * lower case and then checked for existence in the unhoistableHeaders set.\n     */\n    unhoistableHeaders?: Set<string>\n}\n\nexport interface Credentials {\n    /**\n     * AWS access key ID\n     */\n    readonly accessKeyId: string\n\n    /**\n     * AWS secret access key\n     */\n    readonly secretAccessKey: string\n\n    /**\n     * A security or session token to use with these credentials. Usually\n     * present for temporary credentials.\n     */\n    readonly sessionToken?: string\n}\n\nexport interface DateInfo {\n    /**\n     * ISO8601 formatted date string\n     */\n    longDate: string\n\n    /**\n     * String in the format YYYYMMDD\n     */\n    shortDate: string\n}\n\n/**\n * Escapes a URI following the AWS signature v4 escaping rules.\n *\n * @param URI {string} The URI to escape.\n * @returns {string} The escaped URI.\n */\nfunction escapeURI(URI: string): string {\n    const hexEncode = (c: string): string => {\n        return `%${c.charCodeAt(0).toString(16).toUpperCase()}`\n    }\n\n    return encodeURIComponent(URI).replace(/[!'()*]/g, hexEncode)\n}\n\n/**\n * formatDate formats a Date object into a ISO8601 formatted date string\n * and a string in the format YYYYMMDD.\n *\n * @param date {Date} The date to format.\n * @returns {DateInfo} The formatted date.\n */\nfunction formatDate(date: Date): DateInfo {\n    const longDate = iso8601(date).replace(/[\\-:]/g, '')\n    return {\n        longDate,\n        shortDate: longDate.slice(0, 8),\n    }\n}\n\n/**\n * Formats a time into an ISO 8601 string.\n *\n * @see https://en.wikipedia.org/wiki/ISO_8601\n *\n * @param time {number | string | Date} The time to format.\n * @returns {string} The ISO 8601 formatted time.\n */\nfunction iso8601(time: number | string | Date): string {\n    return toDate(time)\n        .toISOString()\n        .replace(/\\.\\d{3}Z$/, 'Z')\n}\n\n/**\n * Converts a time value into a Date object.\n *\n * @param time {number | string | Date} The time to convert.\n * @returns {Date} The resulting Date object.\n */\nfunction toDate(time: number | string | Date): Date {\n    if (typeof time === 'number') {\n        return new Date(time * 1000)\n    }\n\n    if (typeof time === 'string') {\n        if (Number(time)) {\n            return new Date(Number(time) * 1000)\n        }\n\n        return new Date(time)\n    }\n\n    return time\n}\n","/**\n * Type representing HTTP schemes\n */\nexport type HTTPScheme = 'http' | 'https'\n\n/**\n * Type representing HTTP Methods\n *\n */\nexport type HTTPMethod = 'GET' | 'POST' | 'PUT' | 'DELETE'\n\n/**\n * Type alias representing HTTP Headers\n */\nexport type HTTPHeaders = { [key: string]: string }\n\n/**\n * HTTPHeaderBag is a type alias representing HTTP Headers\n */\nexport type HTTPHeaderBag = Record<string, string>\n\nexport function hasHeader(soughtHeader: string, headers: HTTPHeaderBag): boolean {\n    soughtHeader = soughtHeader.toLowerCase()\n\n    for (const headerName of Object.keys(headers)) {\n        if (soughtHeader === headerName.toLowerCase()) {\n            return true\n        }\n    }\n\n    return false\n}\n\n/**\n * QueryParameterBag is a type alias representing HTTP Query Parameters\n */\nexport type QueryParameterBag = Record<string, string | Array<string>>\n\n/**\n * HTTPRequest represents an HTTP request\n */\nexport interface HTTPRequest {\n    /**\n     * The HTTP method to use\n     */\n    method: HTTPMethod\n\n    /**\n     * The protocol to use (http or https)\n     */\n    protocol: HTTPScheme\n\n    /**\n     * The hostname (domain name or IP address) the request targets\n     */\n    hostname: string\n\n    /**\n     * The port to the request targets\n     */\n    port?: number\n\n    /**\n     * The path to the resource\n     */\n    path: string\n\n    /**\n     * The query parameters to include in the request\n     */\n    query?: QueryParameterBag\n\n    /**\n     * The headers to include in the request\n     */\n    headers: HTTPHeaderBag\n\n    /**\n     * The body of the request\n     */\n    body?: string | ArrayBuffer | null\n}\n\n/**\n * SignedHTTPRequest represents an HTTP request that has been signed\n * with an AWS signature. It is a superset of HTTPRequest adding\n * the following fields:\n * - url: the fully qualified URL of the request that can be used in a k6 http.request.\n */\nexport interface SignedHTTPRequest extends HTTPRequest {\n    url: string\n}\n","/**\n *\n * @param value\n * @returns\n */\nexport function isArrayBuffer(value: any): value is ArrayBuffer {\n    return (\n        typeof ArrayBuffer === 'function' &&\n        (value instanceof ArrayBuffer ||\n            Object.prototype.toString.call(value) === '[object ArrayBuffer]')\n    )\n}\n\nexport function toFormUrlEncoded(form: any): string {\n    return Object.keys(form).reduce((params, key) => {\n        let value = form[key]\n        if (value !== undefined && value !== null) {\n            params.push(`${encodeURIComponent(key)}=${encodeURIComponent(value)}`)\n        }\n        return params;\n    }, [] as string[]).join('&')\n}"],"names":["__webpack_require__","module","getter","__esModule","d","a","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","AMZ_ALGORITHM_QUERY_PARAM","AMZ_CREDENTIAL_QUERY_PARAM","AMZ_DATE_QUERY_PARAM","AMZ_EXPIRES_QUERY_PARAM","AMZ_SIGNATURE_QUERY_PARAM","AMZ_SIGNED_HEADERS_QUERY_PARAM","AMZ_TOKEN_QUERY_PARAM","AMZ_CONTENT_SHA256_HEADER","AMZ_DATE_HEADER","toLowerCase","AMZ_SIGNATURE_HEADER","AMZ_TOKEN_HEADER","AUTHORIZATION_HEADER","GENERATED_HEADERS","HOST_HEADER","ALWAYS_UNSIGNABLE_HEADERS","authorization","connection","expect","from","pragma","referer","te","trailer","upgrade","KEY_TYPE_IDENTIFIER","SIGNING_ALGORITHM_IDENTIFIER","UNSIGNED_PAYLOAD","require","AWSError","_Error","_inherits","_super","_createSuper","message","code","_this","_classCallCheck","_assertThisInitialized","name","xmlDocument","doc","parseHTML","find","text","_wrapNativeSuper","Error","SignatureV4","_ref","service","region","credentials","uriEscapePath","applyChecksum","_defineProperty","this","_createClass","request","options","arguments","length","undefined","finalOptions","_objectSpread","signingDate","Date","unsignableHeaders","Set","signableHeaders","_formatDate","formatDate","longDate","shortDate","signingService","signingRegion","scope","concat","constants","headers","hostname","_i","_Object$keys","keys","headerName","indexOf","sessionToken","ArrayBuffer","isView","body","buffer","payloadHash","computePayloadHash","soughtHeader","hasHeader","canonicalHeaders","computeCanonicalHeaders","signature","calculateSignature","deriveSigningKey","createCanonicalRequest","accessKeyId","sort","join","url","protocol","path","query","serializeQueryParameters","originalRequest","_options$signingDate","_options$expiresIn","expiresIn","unhoistableHeaders","_formatDate2","InvalidSignatureError","moveHeadersToQuery","toString","signingKey","canonicalRequest","sortedHeaders","sortedCanonicalHeaders","map","signedHeaders","method","computeCanonicalURI","computeCanonicalQuerystring","credentialScope","hashedCanonicalRequest","crypto","stringToSign","createStringToSign","kSecret","secretAccessKey","kDate","kRegion","kService","_ref2","_step","normalizedURISegments","_iterator","_createForOfIteratorHelper","split","s","n","done","URISegment","pop","push","err","e","f","leading","startsWith","URI","trailing","endsWith","normalizedURI","encodeURIComponent","replace","_ref3","_step2","_ref3$query","serialized","_loop","escapeURI","Array","isArray","slice","reduce","encoded","_iterator2","filter","_ref4","_step3","_iterator3","canonicalHeaderName","has","trim","_ref5","requestCopy","JSON","parse","stringify","_requestCopy$query","_i2","_Object$keys2","_options$unhoistableH","lowerCaseName","ignoreKeys","_step4","_loop2","includes","_iterator4","_AWSError","c","charCodeAt","toUpperCase","date","time","Number","toDate","toISOString"],"sourceRoot":""}