{"version":3,"file":"kms.js","mappings":"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","sources":["webpack://k6-jslib-aws/webpack/bootstrap","webpack://k6-jslib-aws/webpack/runtime/compat get default export","webpack://k6-jslib-aws/webpack/runtime/define property getters","webpack://k6-jslib-aws/webpack/runtime/hasOwnProperty shorthand","webpack://k6-jslib-aws/webpack/runtime/make namespace object","webpack://k6-jslib-aws/./src/internal/config.ts","webpack://k6-jslib-aws/external commonjs \"k6/http\"","webpack://k6-jslib-aws/./src/internal/client.ts","webpack://k6-jslib-aws/./src/internal/constants.ts","webpack://k6-jslib-aws/external commonjs \"k6/html\"","webpack://k6-jslib-aws/./src/internal/error.ts","webpack://k6-jslib-aws/external commonjs \"k6/crypto\"","webpack://k6-jslib-aws/./src/internal/signature.ts","webpack://k6-jslib-aws/./src/internal/http.ts","webpack://k6-jslib-aws/./src/internal/utils.ts","webpack://k6-jslib-aws/./src/internal/kms.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { HTTPScheme } from './http'\n\n/** Class holding an AWS connection information */\nexport class AWSConfig {\n    /**\n     * The AWS region to connect to, as listed: https://docs.aws.amazon.com/general/latest/gr/rande.html\n     *\n     * @type {string}\n     */\n    region: string\n\n    /**\n     * Your user's AWS access key id credential.\n     *\n     * @type {string}\n     */\n    accessKeyId: string\n\n    /**\n     * Your user's AWS secret access key credential.\n     *\n     * @type {string}\n     */\n    secretAccessKey: string\n\n    /**\n     * Your user's AWS session token credential.\n     *\n     * @type {string}\n     */\n    sessionToken?: string\n\n    /**\n     * The HTTP scheme to use when connecting to AWS.\n     *\n     * @type {HTTPScheme} ['https']\n     */\n    scheme: HTTPScheme = 'https'\n\n    // FIXME: Should really be called \"host\" instead. When used\n    // with localstack we pass a complete host (hostname:port) here.\n    /**\n     * The AWS hostname to connect to.\n     *\n     * @type {string} ['amazonaws.com']\n     */\n    endpoint: string = 'amazonaws.com'\n\n    /**\n     * fromEnvironment creates an AWSConfig from the environment variables.\n     *\n     * It expects to find the following compulsory environment variables:\n     *  * AWS_REGION\n     *  * AWS_ACCESS_KEY_ID\n     *  * AWS_SECRET_ACCESS_KEY\n     *\n     * If set, the following optional environment variables are also used:\n     *  * AWS_SESSION_TOKEN\n     *\n     * Finally, the options parameter allows to explicitly set the scheme and endpoint\n     * to use when connecting to AWS.\n     *\n     * @param options {AWSConnectionOptions}\n     * @returns\n     */\n    static fromEnvironment(options?: AWSConnectionOptions): AWSConfig {\n        const region = __ENV.AWS_REGION;\n        const accessKeyId = __ENV.AWS_ACCESS_KEY_ID;\n        const secretAccessKey = __ENV.AWS_SECRET_ACCESS_KEY;\n        const sessionToken: string | undefined = __ENV.AWS_SESSION_TOKEN;\n        const scheme: HTTPScheme | undefined = options?.scheme;\n        const endpoint: string | undefined = options?.endpoint;\n\n        return new AWSConfig({\n            region,\n            accessKeyId,\n            secretAccessKey,\n            sessionToken,\n            scheme: scheme,\n            endpoint: endpoint,\n        })\n    }\n\n    /**\n     * Create an AWSConfig.\n     *\n     * @param {AWSConfigOptions} options - configuration attributes to use when interacting with AWS' APIs\n     * @throws {InvalidArgumentException}\n     */\n    constructor(options: AWSConfigOptions) {\n        if (!options.region || options.region === '') {\n            throw new InvalidAWSConfigError(\n                `invalid AWS region; reason: expected a valid AWS region name (e.g. \"us-east-1\"), got \\`${options.region}\\``\n            )\n        }\n\n        if (!options.accessKeyId || options.accessKeyId === '') {\n            throw new InvalidAWSConfigError(\n                `invalid AWS access key ID; reason: expected a non empty string, got \\`${options.accessKeyId}\\``\n            )\n        }\n\n        if (options.accessKeyId.length < 16 || options.accessKeyId.length > 128) {\n            throw new InvalidAWSConfigError(\n                `invalid AWS access key ID; reason: size should be between 16 and 128 characters, got ${options.accessKeyId.length}`\n            )\n        }\n\n        if (!options.secretAccessKey || options.secretAccessKey === '') {\n            throw new InvalidAWSConfigError(\n                `invalid AWS secret access key; reason: expected a non empty string, got \\`${options.secretAccessKey}\\``\n            )\n        }\n\n        if (options.secretAccessKey.length < 16 || options.secretAccessKey.length > 128) {\n            throw new InvalidAWSConfigError(\n                `invalid AWS secret access key; reason: size should be between 16 and 128 characters, got ${options.secretAccessKey.length}`\n            )\n        }\n\n        this.region = options.region\n        this.accessKeyId = options.accessKeyId\n        this.secretAccessKey = options.secretAccessKey\n\n        if (options.sessionToken !== undefined) {\n            this.sessionToken = options.sessionToken\n        }\n\n        if (options.scheme !== undefined) {\n            this.scheme = options.scheme\n        }\n\n        if (options.endpoint !== undefined) {\n            this.endpoint = options.endpoint\n        }\n    }\n}\n\n/**\n * Interface representing AWSConfig options\n */\nexport interface AWSConfigOptions extends AWSConnectionOptions {\n    /**\n     * The AWS region to connect to, as listed: https://docs.aws.amazon.com/general/latest/gr/rande.html\n     *\n     * @type {string}\n     */\n    region: string\n\n    /**\n     * Your user's AWS access key id credential.\n     *\n     * @type {string}\n     */\n    accessKeyId: string\n\n    /**\n     * Your user's AWS secret access key credential.\n     *\n     * @type {string}\n     */\n    secretAccessKey: string\n\n    /**\n     * Your user's AWS session token credential.\n     *\n     * @type {string}\n     */\n    sessionToken?: string\n}\n\n/**\n * Interface representing AWS connection options\n */\nexport interface AWSConnectionOptions {\n    /**\n     * The HTTP scheme to use when connecting to AWS.\n     *\n     * @type {HTTPScheme}\n     */\n    scheme?: HTTPScheme\n\n    /**\n     * The AWS hostname to connect to.\n     *\n     * @type {string}\n     */\n    endpoint?: string\n}\n\n/** Class representing an invalid AWS configuration */\nexport class InvalidAWSConfigError extends Error {\n    constructor(message: string) {\n        super(message)\n    }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"k6/http\");","import { AWSConfig } from './config'\nimport { HTTPHeaders } from './http'\nimport { HTTPScheme } from './http'\n/**\n * Class allowing to build requests targeting AWS APIs\n *\n * This class is meant to be used as a base class for specific\n * services clients. See S3Client or SecretsManagerClient for\n * usage examples.\n */\nexport class AWSClient {\n    awsConfig: AWSConfig\n    serviceName: string\n\n    private _host?: string\n    private _scheme?: HTTPScheme\n    /**\n     * @param {AWSConfig} awsConfig - configuration attributes to use when interacting with AWS' APIs\n     * @param  {string} serviceName - name of the service to target.\n     * @param  {URIEncodingConfig} URIencodingConfig - configures how requests URIs should be encoded.\n     */\n    constructor(awsConfig: AWSConfig, serviceName: string) {\n        this.awsConfig = awsConfig\n        this.serviceName = serviceName\n    }\n\n    /**\n     * Property computing the URL to send the requests to when interacting with\n     * the specific AWS service the child class implements the functionalities of.\n     */\n    public get host() {\n        if (this._host == undefined) {\n          this._host = `${this.serviceName}.${this.awsConfig.region}.${this.awsConfig.endpoint}`\n        }\n        return this._host\n    }\n\n    public set host(host: string) {\n        this._host = host\n    }\n\n      /**\n     * Property computing the scheme to use http or https. Defaults to https as per AWSConfig Defaults\n     * the specific AWS service the child class implements the functionalities of.\n     */\n  \n    public get scheme() {\n\n      if (this._scheme == undefined) {\n        this._scheme = this.awsConfig.scheme;\n      }\n      return this._scheme\n    }\n  \n    // Validatiuon should be done by the type declaration \n    public set scheme(scheme: HTTPScheme) {\n      this._scheme = scheme\n  }\n\n}\n\n/**\n * Type alias representing the result of an AWSClient.buildRequest call\n */\nexport interface AWSRequest {\n    url: string\n    headers: HTTPHeaders\n}\n","/**\n * Standard Amazon AWS query parameter names\n */\nexport const AMZ_ALGORITHM_QUERY_PARAM = 'X-Amz-Algorithm'\nexport const AMZ_CREDENTIAL_QUERY_PARAM = 'X-Amz-Credential'\nexport const AMZ_DATE_QUERY_PARAM = 'X-Amz-Date'\nexport const AMZ_EXPIRES_QUERY_PARAM = 'X-Amz-Expires'\nexport const AMZ_SIGNATURE_QUERY_PARAM = 'X-Amz-Signature'\nexport const AMZ_SIGNED_HEADERS_QUERY_PARAM = 'X-Amz-SignedHeaders'\nexport const AMZ_TARGET_QUERY_PARAM = 'X-Amz-Target'\nexport const AMZ_TOKEN_QUERY_PARAM = 'X-Amz-Security-Token'\n\n/**\n * Standard Amazon AWS header names\n */\nexport const AMZ_CONTENT_SHA256_HEADER = 'x-amz-content-sha256'\nexport const AMZ_DATE_HEADER = AMZ_DATE_QUERY_PARAM.toLowerCase()\nexport const AMZ_SIGNATURE_HEADER = AMZ_SIGNATURE_QUERY_PARAM.toLowerCase()\nexport const AMZ_TARGET_HEADER = AMZ_TARGET_QUERY_PARAM.toLowerCase()\nexport const AMZ_TOKEN_HEADER = AMZ_TOKEN_QUERY_PARAM.toLowerCase()\n\n/**\n * Common HTTP headers we rely on in the signing process\n */\nexport const AUTHORIZATION_HEADER = 'authorization'\nexport const DATE_HEADER = 'date'\n\n/**\n * Lists the headers that are generated as part of the signature process.\n */\nexport const GENERATED_HEADERS = [AUTHORIZATION_HEADER, AMZ_DATE_HEADER, DATE_HEADER]\nexport const HOST_HEADER = 'host'\n\n/**\n * Lists the headers that should never be included in the\n * request signature signature process.\n */\nexport const ALWAYS_UNSIGNABLE_HEADERS = {\n    authorization: true,\n    'cache-control': true,\n    connection: true,\n    expect: true,\n    from: true,\n    'keep-alive': true,\n    'max-forwards': true,\n    pragma: true,\n    referer: true,\n    te: true,\n    trailer: true,\n    'transfer-encoding': true,\n    upgrade: true,\n    'user-agent': true,\n    'x-amzn-trace-id': true,\n}\n\n/**\n * Signature specific constants included in the signing process\n */\nexport const KEY_TYPE_IDENTIFIER = 'aws4_request'\nexport const SIGNING_ALGORITHM_IDENTIFIER = 'AWS4-HMAC-SHA256'\n\n/**\n * Maximum time to live of a signed request in seconds: 7 days.\n */\nexport const MAX_PRESIGNED_TTL = 60 * 60 * 24 * 7\n\n/**\n * SHA256 hash of an empty string (so we don't waste cycles recomputing it)\n */\nexport const EMPTY_SHA256 = 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\n\n/**\n * SHA256 hash of the unsigned payload constant (so we don't waste cycles recomputing it)\n */\nexport const UNSIGNED_PAYLOAD_SHA256 =\n    '5a41b0751e4537c6ff868564ab44a4d4ecceec2ec5b1c5f74d97422968e04237'\n\nexport const UNSIGNED_PAYLOAD = 'UNSIGNED-PAYLOAD'\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"k6/html\");","import { parseHTML } from 'k6/html'\n\n/**\n * Base class to derive errors from\n *\n * Inspired from AWS official error types, as\n * described in:\n *   * https://aws.amazon.com/blogs/developer/service-error-handling-modular-aws-sdk-js/\n *   * https://github.com/aws/aws-sdk-js/blob/master/lib/error.d.ts\n */\nexport class AWSError extends Error {\n    /**\n     * Error code issued by the service (if any)\n     */\n    code?: string\n\n    /**\n     * Create an AWSError\n     *\n     * @param {string} message - A longer human readable error message.\n     * @param {string?} code - A unique short code representing the error that was emitted\n     */\n    constructor(message: string, code?: string) {\n        super(message)\n        this.name = 'AWSError'\n        this.code = code\n    }\n\n    /**\n     * Parse an AWSError from an XML document\n     *\n     * @param  {string} xmlDocument - Serialized XML document to parse the error from\n     */\n    static parseXML(xmlDocument: string): AWSError {\n        const doc = parseHTML(xmlDocument)\n        return new AWSError(doc.find('Message').text(), doc.find('Code').text())\n    }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"k6/crypto\");","import crypto from 'k6/crypto'\n\nimport * as constants from './constants'\nimport { AWSError } from './error'\nimport { hasHeader, HTTPHeaderBag, HTTPRequest, QueryParameterBag, SignedHTTPRequest } from './http'\nimport { isArrayBuffer } from './utils'\n\n/**\n * SignatureV4 can be used to sign HTTP requests and presign URLs using the AWS Signature\n * Version 4 signing process.\n *\n * It offers two signing methods:\n * - sign: signs the request headers and payload\n * - presign: returns a presigned (authorization information contained in the query string) URL\n *\n * @see https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html\n */\nexport class SignatureV4 {\n    /**\n     * The name of the service to sign for.\n     */\n    private readonly service: string\n\n    /**\n     * The name of the region to sign for.\n     */\n    private readonly region: string\n\n    /**\n     * The credentials with which the request should be signed.\n     */\n    private readonly credentials: Credentials\n\n    /**\n     * Whether to uri-escape the request URI path as part of computing the\n     * canonical request string. This is required for every AWS service, except\n     * Amazon S3, as of late 2017.\n     *\n     * @default [true]\n     */\n    private readonly uriEscapePath: boolean\n\n    /**\n     * Whether to calculate a checksum of the request body and include it as\n     * either a request header (when signing) or as a query string parameter\n     * (when presigning). This is required for AWS Glacier and Amazon S3 and optional for\n     * every other AWS service as of late 2017.\n     *\n     * @default [true]\n     */\n    private readonly applyChecksum: boolean\n\n    // TODO: uriEscapePath and applyChecksum should not be present in the constructor\n    constructor({\n        service,\n        region,\n        credentials,\n        uriEscapePath,\n        applyChecksum,\n    }: SignatureV4Options) {\n        this.service = service\n        this.region = region\n        this.credentials = credentials\n        this.uriEscapePath = typeof uriEscapePath === 'boolean' ? uriEscapePath : true\n        this.applyChecksum = typeof applyChecksum === 'boolean' ? applyChecksum : true\n    }\n\n    /**\n     * Includes AWS v4 signing information to the provided HTTP request.\n     *\n     * This method adds an Authorization header to the request, containing\n     * the signature and other signing information. It also returns a preformatted\n     * URL that can be used to make the k6 http request.\n     *\n     * This method mutates the request object.\n     *\n     * @param request {HTTPRequest} The request to sign.\n     * @param options {Partial<RequestSigningOptions>} Options for signing the request.\n     * @returns {SignedHTTPRequest} The signed request.\n     */\n    sign(request: HTTPRequest, options: Partial<RequestSigningOptions> = {}): SignedHTTPRequest {\n        // Set default values for options which are not provided by the user.\n        const defaultOptions = {\n            signingDate: new Date(),\n            unsignableHeaders: new Set<string>(),\n            signableHeaders: new Set<string>(),\n        }\n\n        // Merge default options with the ones maybe provided by the user.\n        const finalOptions = { ...defaultOptions, ...options }\n\n        const { longDate, shortDate }: DateInfo = formatDate(finalOptions.signingDate)\n        const service = finalOptions.signingService || this.service\n        const region = finalOptions.signingRegion || this.region\n        const scope = `${shortDate}/${region}/${service}/${constants.KEY_TYPE_IDENTIFIER}`\n\n        // Required by the specification:\n        //   \"For HTTP/1.1 requests, you must include the host header at a minimum.\n        //   Standard headers like content-type are optional.\n        //   For HTTP/2 requests, you must include the :authority header instead of\n        //   the host header. Different services might require other headers.\"\n        request.headers[constants.HOST_HEADER] = request.hostname\n\n        // Filter out headers that will be generated and managed by the signing process.\n        // If the user provide any of those as part of the HTTPRequest's headers, they\n        // will be ignored.\n        for (const headerName of Object.keys(request.headers)) {\n            if (constants.GENERATED_HEADERS.indexOf(headerName.toLowerCase()) > -1) {\n                delete request.headers[headerName]\n            }\n        }\n\n        request.headers[constants.AMZ_DATE_HEADER] = longDate\n        if (this.credentials.sessionToken) {\n            request.headers[constants.AMZ_TOKEN_HEADER] = this.credentials.sessionToken\n        }\n\n        // If the request body is a typed array, we need to convert it to a buffer\n        // so that we can calculate the checksum.\n        if (ArrayBuffer.isView(request.body)) {\n            request.body = request.body.buffer\n        }\n\n        // Ensure we avoid passing undefined to the crypto hash function.\n        if (!request.body) {\n            request.body = ''\n        }\n\n        let payloadHash = this.computePayloadHash(request)\n        if (\n            !hasHeader(constants.AMZ_CONTENT_SHA256_HEADER, request.headers) &&\n            this.applyChecksum\n        ) {\n            request.headers[constants.AMZ_CONTENT_SHA256_HEADER] = payloadHash\n        }\n\n        const canonicalHeaders = this.computeCanonicalHeaders(\n            request,\n            finalOptions.unsignableHeaders,\n            finalOptions.signableHeaders\n        )\n        const signature = this.calculateSignature(\n            longDate,\n            scope,\n            this.deriveSigningKey(this.credentials, service, region, shortDate),\n            this.createCanonicalRequest(request, canonicalHeaders, payloadHash)\n        )\n\n        /**\n         * Step 4 of the signing process: add the signature to the HTTP request's headers.\n         *\n         * @see https://docs.aws.amazon.com/general/latest/gr/sigv4-add-signature-to-request.html\n         */\n        request.headers[constants.AUTHORIZATION_HEADER] =\n            `${constants.SIGNING_ALGORITHM_IDENTIFIER} ` +\n            `Credential=${this.credentials.accessKeyId}/${scope}, ` +\n            `SignedHeaders=${Object.keys(canonicalHeaders).sort().join(';')}, ` +\n            `Signature=${signature}`\n\n        // If a request path was provided, add it to the URL\n        let url = `${request.protocol}://${request.hostname}`\n        if (request.path) {\n            url += request.path\n        }\n\n        // If a request query string was provided, add it to the URL\n        if (request.query) {\n            // We exclude the signature from the query string\n            url += `?${this.serializeQueryParameters(request.query)}`\n        }\n\n        return {\n            url: url,\n            ...request,\n        }\n    }\n\n    /**\n     * Produces a presigned URL with AWS v4 signature information for the provided HTTP request.\n     *\n     * A presigned URL is a URL that contains the authorization information\n     * (signature and other signing information) in the query string. This method\n     * returns a preformatted URL that can be used to make the k6 http request.\n     *\n     * @param originalRequest - The original request to presign.\n     * @param options - Options controlling the signing of the request.\n     * @returns A signed request, including the presigned URL.\n     */\n    presign(originalRequest: HTTPRequest, options: PresignOptions = {}): SignedHTTPRequest {\n        const {\n            signingDate = new Date(),\n            expiresIn = 3600,\n            unsignableHeaders,\n            unhoistableHeaders,\n            signableHeaders,\n            signingRegion,\n            signingService,\n        } = options\n        const { longDate, shortDate }: DateInfo = formatDate(signingDate)\n        const region = signingRegion || this.region\n        const service = signingService || this.service\n\n        if (expiresIn > constants.MAX_PRESIGNED_TTL) {\n            throw new InvalidSignatureError(\n                \"Signature version 4 presigned URLs can't be valid for more than 7 days\"\n            )\n        }\n\n        const scope = `${shortDate}/${region}/${service}/${constants.KEY_TYPE_IDENTIFIER}`\n        const request = this.moveHeadersToQuery(originalRequest, { unhoistableHeaders })\n\n        // Required by the specification:\n        //   \"For HTTP/1.1 requests, you must include the host header at a minimum.\n        //   Standard headers like content-type are optional.\n        //   For HTTP/2 requests, you must include the :authority header instead of\n        //   the host header. Different services might require other headers.\"\n        request.headers[constants.HOST_HEADER] = originalRequest.hostname\n\n        // If the user provided a session token, include it in the signed url query string.\n        if (this.credentials.sessionToken) {\n            request.query[constants.AMZ_TOKEN_QUERY_PARAM] = this.credentials.sessionToken\n        }\n\n        // Add base signing query parameters to the request, as described in the documentation\n        // @see https://docs.aws.amazon.com/general/latest/gr/sigv4-add-signature-to-request.html\n        request.query[constants.AMZ_ALGORITHM_QUERY_PARAM] = constants.SIGNING_ALGORITHM_IDENTIFIER\n        request.query[\n            constants.AMZ_CREDENTIAL_QUERY_PARAM\n        ] = `${this.credentials.accessKeyId}/${scope}`\n        request.query[constants.AMZ_DATE_QUERY_PARAM] = longDate\n        request.query[constants.AMZ_EXPIRES_QUERY_PARAM] = expiresIn.toString(10)\n\n        const canonicalHeaders = this.computeCanonicalHeaders(\n            request,\n            unsignableHeaders,\n            signableHeaders\n        )\n        request.query[constants.AMZ_SIGNED_HEADERS_QUERY_PARAM] = Object.keys(canonicalHeaders)\n            .sort()\n            .join(';')\n\n        const signingKey = this.deriveSigningKey(this.credentials, service, region, shortDate)\n\n        // Computing the payload from the original request. This is required\n        // in the event the user attempts to produce a presigned URL for s3,\n        // which requires the payload hash to be 'UNSIGNED-PAYLOAD'.\n        //\n        // To that effect, users need to set the 'x-amz-content-sha256' header,\n        // and mark it as unhoistable and unsignable. When setup this way,\n        // the computePayloadHash method will then return the string 'UNSIGNED-PAYLOAD'.\n        const payloadHash = this.computePayloadHash(originalRequest)\n        const canonicalRequest = this.createCanonicalRequest(request, canonicalHeaders, payloadHash)\n\n        request.query[constants.AMZ_SIGNATURE_QUERY_PARAM] = this.calculateSignature(\n            longDate,\n            scope,\n            signingKey,\n            canonicalRequest\n        )\n\n        // If a request path was provided, add it to the URL\n        let url = `${request.protocol}://${request.hostname}`\n        if (request.path) {\n            url += request.path\n        }\n\n        // If a request query string was provided, add it to the URL\n        if (request.query) {\n            url += `?${this.serializeQueryParameters(request.query)}`\n        }\n\n        return { url: url, ...request }\n    }\n\n    /**\n     * Create a string including information from your request\n     * in a AWS signature v4 standardized (canonical) format.\n     *\n     * Step 1 of the signing process: create the canonical request string.\n     * @see https://docs.aws.amazon.com/general/latest/gr/sigv4-create-canonical-request.html\n     *\n     * @param request {HTTPRequest} The request to sign.\n     * @param canonicalHeaders {HTTPHeaderBag} The request's canonical headers.\n     * @param payloadHash {string} The hexadecimally encoded request's payload hash .\n     * @returns {string} The canonical request string.\n     */\n    private createCanonicalRequest(\n        request: HTTPRequest,\n        canonicalHeaders: HTTPHeaderBag,\n        payloadHash: string\n    ): string {\n        const sortedHeaders = Object.keys(canonicalHeaders).sort()\n        const sortedCanonicalHeaders = sortedHeaders\n            .map((name) => `${name}:${canonicalHeaders[name]}`)\n            .join('\\n')\n        const signedHeaders = sortedHeaders.join(';')\n\n        return (\n            `${request.method}\\n` +\n            `${this.computeCanonicalURI(request)}\\n` +\n            `${this.computeCanonicalQuerystring(request)}\\n` +\n            `${sortedCanonicalHeaders}\\n\\n` +\n            `${signedHeaders}\\n` +\n            `${payloadHash}`\n        )\n    }\n\n    /**\n     * Create the \"string to sign\" part of the signature Version 4 protocol.\n     *\n     * The \"string to sign\" includes meta information about your request and\n     * about the canonical request that you created with `createCanonicalRequest`.\n     * It is used hand in hand with the signing key to create the request signature.\n     * Step 2 of the signing process: create the string to sign.\n     * @see https://docs.aws.amazon.com/general/latest/gr/sigv4-create-string-to-sign.html\n     *\n     * @param longDate {string} The request's date in iso 8601 format.\n     * @param credentialScope {string} The request's credential scope.\n     * @param canonicalRequest {string} The request's canonical request.\n     * @returns {string} The \"string to sign\".\n     */\n    private createStringToSign(\n        longDate: string,\n        credentialScope: string,\n        canonicalRequest: string\n    ): string {\n        const hashedCanonicalRequest = crypto.sha256(canonicalRequest, 'hex')\n\n        return (\n            `${constants.SIGNING_ALGORITHM_IDENTIFIER}\\n` +\n            `${longDate}\\n` +\n            `${credentialScope}\\n` +\n            `${hashedCanonicalRequest}`\n        )\n    }\n\n    /**\n     * Calculte the signature for AWS signature version 4.\n     *\n     * Step 3 of the signing process: create the signature.\n     * @see https://docs.aws.amazon.com/general/latest/gr/sigv4-calculate-signature.html\n     *\n     * @param longDate {string} The request's date in iso 8601 format.\n     * @param credentialScope {string} The request's credential scope.\n     * @param signingKey {string} the signing key as computed by the deriveSigningKey method.\n     * @param canonicalRequest {string} The request's canonical request.\n     * @returns {string} The signature.\n     */\n    private calculateSignature(\n        longDate: string,\n        credentialScope: string,\n        signingKey: Uint8Array,\n        canonicalRequest: string\n    ): string {\n        const stringToSign = this.createStringToSign(longDate, credentialScope, canonicalRequest)\n        return crypto.hmac('sha256', signingKey, stringToSign, 'hex')\n    }\n\n    /**\n     * Derives the signing key for authenticating requests signed with\n     * the Signature version 4 authentication protocol.\n     *\n     * deriveSigningKey produces a signing key by creating a series of\n     * hash-based message authentication codes (HMACs) represented in\n     * a binary format.\n     *\n     * The derived signing key is specific to the date it's made at, as well as\n     * the service and region it targets.\n     *\n     * @param credentials {AWSCredentials} The credentials to use for signing.\n     * @param service {string} The service the request is targeted at.\n     * @param region {string} The region the request is targeted at.\n     * @param shortDate {string} The request's date in YYYYMMDD format.\n     * @returns {Uint8Array} The derived signing key.\n     */\n    private deriveSigningKey(\n        credentials: Credentials,\n        service: string,\n        region: string,\n        shortDate: string\n    ): Uint8Array {\n        const kSecret: string = credentials.secretAccessKey\n        const kDate: any = crypto.hmac('sha256', 'AWS4' + kSecret, shortDate, 'binary')\n        const kRegion: any = crypto.hmac('sha256', kDate, region, 'binary')\n        const kService: any = crypto.hmac('sha256', kRegion, service, 'binary')\n        const kSigning: any = crypto.hmac('sha256', kService, 'aws4_request', 'binary')\n\n        return kSigning\n    }\n\n    /**\n     * Create a string that includes information from your request\n     * in a AWS signature v4 standardized (canonical) format.\n     *\n     * @param param0 {HTTPRequest} The request to sign.\n     * @returns {string} The canonical URI.\n     */\n    private computeCanonicalURI({ path }: HTTPRequest): string {\n        if (this.uriEscapePath) {\n            // Non-S3 services, we normalize the path and then double URI encode it.\n            // Ref: \"Remove Dot Segments\" https://datatracker.ietf.org/doc/html/rfc3986#section-5.2.4\n            const normalizedURISegments = []\n\n            for (const URISegment of path.split('/')) {\n                if (URISegment?.length === 0) {\n                    continue\n                }\n\n                if (URISegment === '.') {\n                    continue\n                }\n\n                if (URISegment === '..') {\n                    normalizedURISegments.pop()\n                } else {\n                    normalizedURISegments.push(URISegment)\n                }\n            }\n\n            // Normalize the URI\n            const leading = path?.startsWith('/') ? '/' : ''\n            const URI = normalizedURISegments.join('/')\n            const trailing = normalizedURISegments.length > 0 && path?.endsWith('/') ? '/' : ''\n            const normalizedURI = `${leading}${URI}${trailing}`\n\n            const doubleEncoded = encodeURIComponent(normalizedURI)\n\n            return doubleEncoded.replace(/%2F/g, '/')\n        }\n\n        // For S3, we shouldn't normalize the path. For example, object name\n        // my-object//example//photo.user should not be normalized to\n        // my-object/example/photo.user\n        return path\n    }\n\n    /**\n     * Serializes the request's query parameters into their canonical\n     * string version. If the request does not include a query parameters,\n     * returns an empty string.\n     *\n     * @param param0 {HTTPRequest} The request containing the query parameters.\n     * @returns {string} The canonical query string.\n     */\n    private computeCanonicalQuerystring({ query = {} }: HTTPRequest): string {\n        const keys: Array<string> = []\n        const serialized: Record<string, string> = {}\n\n        for (const key of Object.keys(query).sort()) {\n            if (key.toLowerCase() === constants.AMZ_SIGNATURE_HEADER) {\n                continue\n            }\n\n            keys.push(key)\n            const value = query[key]\n\n            if (typeof value === 'string') {\n                serialized[key] = `${escapeURI(key)}=${escapeURI(value)}`\n            } else if (Array.isArray(value)) {\n                serialized[key] = value\n                    .slice(0)\n                    .sort()\n                    .reduce(\n                        (encoded: Array<string>, value: string) =>\n                            encoded.concat([`${escapeURI(key)}=${escapeURI(value)}`]),\n                        []\n                    )\n                    .join('&')\n            }\n        }\n\n        return keys\n            .map((key) => serialized[key])\n            .filter((serialized) => serialized)\n            .join('&')\n    }\n\n    /**\n     * Create the canonical form of the request's headers.\n     * Canonical headers consist of all the HTTP headers you\n     * are including with the signed request.\n     *\n     * @param param0 {HTTPRequest} The request to compute the canonical headers of.\n     * @param unsignableHeaders {Set<string>} The headers that should not be signed.\n     * @param signableHeaders {Set<string>} The headers that should be signed.\n     * @returns {string} The canonical headers.\n     */\n    private computeCanonicalHeaders(\n        { headers }: HTTPRequest,\n        unsignableHeaders?: Set<string>,\n        signableHeaders?: Set<string>\n    ): HTTPHeaderBag {\n        const canonicalHeaders: HTTPHeaderBag = {}\n\n        for (const headerName of Object.keys(headers).sort()) {\n            if (headers[headerName] == undefined) {\n                continue\n            }\n\n            const canonicalHeaderName = headerName.toLowerCase()\n            if (\n                canonicalHeaderName in constants.ALWAYS_UNSIGNABLE_HEADERS ||\n                unsignableHeaders?.has(canonicalHeaderName)\n            ) {\n                if (\n                    !signableHeaders ||\n                    (signableHeaders && !signableHeaders.has(canonicalHeaderName))\n                ) {\n                    continue\n                }\n            }\n\n            canonicalHeaders[canonicalHeaderName] = headers[headerName].trim().replace(/\\s+/g, ' ')\n        }\n\n        return canonicalHeaders\n    }\n\n    /**\n     * Computes the SHA256 cryptographic hash of the request's body.\n     *\n     * If the headers contain the 'X-Amz-Content-Sha256' header, then\n     * the value of that header is returned instead. This proves useful\n     * when, for example, presiging a URL for S3, as the payload hash\n     * must always be equal to 'UNSIGNED-PAYLOAD'.\n     *\n     * @param param0 {HTTPRequest} The request to compute the payload hash of.\n     * @returns {string} The hex encoded SHA256 payload hash, or the value of the 'X-Amz-Content-Sha256' header.\n     */\n    private computePayloadHash({ headers, body }: HTTPRequest): string {\n        // for (const headerName of Object.keys(headers)) {\n        //     // If the header is present, return its value.\n        //     // So that we let the 'UNSIGNED-PAYLOAD' value pass through.\n        //     if (headerName.toLowerCase() === constants.AMZ_CONTENT_SHA256_HEADER) {\n        //         return headers[headerName]\n        //     }\n        // }\n\n        if (headers[constants.AMZ_CONTENT_SHA256_HEADER]) {\n            return headers[constants.AMZ_CONTENT_SHA256_HEADER]\n        }\n\n        if (body == undefined) {\n            return constants.EMPTY_SHA256\n        }\n\n        if (typeof body === 'string' || isArrayBuffer(body)) {\n            return crypto.sha256(body, 'hex').toLowerCase()\n        }\n\n        if (ArrayBuffer.isView(body)) {\n            // If the request body is a typed array, we need to convert it to a buffer\n            // so that we can calculate the checksum.\n            return crypto.sha256((body as DataView).buffer, 'hex').toLowerCase()\n        }\n\n        return constants.UNSIGNED_PAYLOAD\n    }\n\n    /**\n     * Moves a request's headers to its query parameters.\n     *\n     * The operation will ignore any amazon standard headers, prefixed\n     * with 'X-Amz-'. It will also ignore any headers specified as unhoistable\n     * by the options.\n     *\n     * The operation will delete the headers from the request.\n     *\n     * @param request {HTTPRequest} The request to move the headers from.\n     * @param options\n     * @returns {HTTPRequest} The request with the headers moved to the query parameters.\n     */\n    private moveHeadersToQuery(\n        request: HTTPRequest,\n        options: { unhoistableHeaders?: Set<string> } = {}\n    ): HTTPRequest & { query: QueryParameterBag } {\n        const requestCopy = JSON.parse(JSON.stringify(request))\n        const { headers, query = {} as QueryParameterBag } = requestCopy\n\n        for (const name of Object.keys(headers)) {\n            const lowerCaseName = name.toLowerCase()\n            if (\n                lowerCaseName.slice(0, 6) === 'x-amz-' &&\n                !options.unhoistableHeaders?.has(lowerCaseName)\n            ) {\n                query[name] = headers[name]\n                delete headers[name]\n            }\n        }\n\n        return {\n            ...requestCopy,\n            headers,\n            query,\n        }\n    }\n\n    /**\n     * Serializes a HTTPRequest's query parameter bag into a string.\n     *\n     * @param query {QueryParameterBag} The query parameters to serialize.\n     * @param ignoreKeys {Set<string>} The keys to ignore.\n     * @returns {string} The serialized, and ready to use in a URL, query parameters.\n     */\n    private serializeQueryParameters(query: QueryParameterBag, ignoreKeys?: string[]): string {\n        const keys: Array<string> = []\n        const serialized: Record<string, string> = {}\n\n        for (const key of Object.keys(query).sort()) {\n            if (ignoreKeys?.includes(key.toLowerCase())) {\n                continue\n            }\n\n            keys.push(key)\n            const value = query[key]\n\n            if (typeof value === 'string') {\n                serialized[key] = `${escapeURI(key)}=${escapeURI(value)}`\n            } else if (Array.isArray(value)) {\n                serialized[key] = value\n                    .slice(0)\n                    .sort()\n                    .reduce(\n                        (encoded: Array<string>, value: string) =>\n                            encoded.concat([`${escapeURI(key)}=${escapeURI(value)}`]),\n                        []\n                    )\n                    .join('&')\n            }\n        }\n\n        return keys\n            .map((key) => serialized[key])\n            .filter((serialized) => serialized)\n            .join('&')\n    }\n}\n\n/**\n * Error indicating an Invalid signature has been sent to AWS services\n *\n * Inspired from AWS official error types, as\n * described in:\n *   * https://aws.amazon.com/blogs/developer/service-error-handling-modular-aws-sdk-js/\n *   * https://github.com/aws/aws-sdk-js/blob/master/lib/error.d.ts\n */\nexport class InvalidSignatureError extends AWSError {\n    /**\n     * Constructs an InvalidSignatureError\n     *\n     * @param  {string} message - human readable error message\n     */\n    constructor(message: string, code?: string) {\n        super(message, code)\n        this.name = 'InvalidSignatureError'\n    }\n}\n\nexport interface SignatureV4Options {\n    /**\n     * The name of the service to sign for.\n     */\n    service: string\n\n    /**\n     * The name of the region to sign for.\n     */\n    region: string\n\n    /**\n     * The credentials with which the request should be signed.\n     */\n    credentials: Credentials\n\n    /**\n     * Whether to uri-escape the request URI path as part of computing the\n     * canonical request string. This is required for every AWS service, except\n     * Amazon S3, as of late 2017.\n     *\n     * @default [true]\n     */\n    uriEscapePath?: boolean\n\n    /**\n     * Whether to calculate a checksum of the request body and include it as\n     * either a request header (when signing) or as a query string parameter\n     * (when presigning). This is required for AWS Glacier and Amazon S3 and optional for\n     * every other AWS service as of late 2017.\n     *\n     * @default [true]\n     */\n    applyChecksum?: boolean\n}\n\nexport interface SignOptions {\n    /**\n     * The date and time to be used as signature metadata. This value should be\n     * a Date object, a unix (epoch) timestamp, or a string that can be\n     * understood by the JavaScript `Date` constructor.If not supplied, the\n     * value returned by `new Date()` will be used.\n     */\n    signingDate?: Date\n\n    /**\n     * The service signing name. It will override the service name of the signer\n     * in current invocation\n     */\n    signingService?: string\n\n    /**\n     * The region name to sign the request. It will override the signing region of the\n     * signer in current invocation\n     */\n    signingRegion?: string\n}\n\nexport interface RequestSigningOptions extends SignOptions {\n    /**\n     * A set of strings whose members represents headers that cannot be signed.\n     * All headers in the provided request will have their names converted to\n     * lower case and then checked for existence in the unsignableHeaders set.\n     */\n    unsignableHeaders?: Set<string>\n\n    /**\n     * A set of strings whose members represents headers that should be signed.\n     * Any values passed here will override those provided via unsignableHeaders,\n     * allowing them to be signed.\n     *\n     * All headers in the provided request will have their names converted to\n     * lower case before signing.\n     */\n    signableHeaders?: Set<string>\n}\n\nexport interface PresignOptions extends RequestSigningOptions {\n    /**\n     * The number of seconds before the presigned URL expires\n     */\n    expiresIn?: number\n\n    /**\n     * A set of strings whose representing headers that should not be hoisted\n     * to presigned request's query string. If not supplied, the presigner\n     * moves all the AWS-specific headers (starting with `x-amz-`) to the request\n     * query string. If supplied, these headers remain in the presigned request's\n     * header.\n     * All headers in the provided request will have their names converted to\n     * lower case and then checked for existence in the unhoistableHeaders set.\n     */\n    unhoistableHeaders?: Set<string>\n}\n\nexport interface Credentials {\n    /**\n     * AWS access key ID\n     */\n    readonly accessKeyId: string\n\n    /**\n     * AWS secret access key\n     */\n    readonly secretAccessKey: string\n\n    /**\n     * A security or session token to use with these credentials. Usually\n     * present for temporary credentials.\n     */\n    readonly sessionToken?: string\n}\n\nexport interface DateInfo {\n    /**\n     * ISO8601 formatted date string\n     */\n    longDate: string\n\n    /**\n     * String in the format YYYYMMDD\n     */\n    shortDate: string\n}\n\n/**\n * Escapes a URI following the AWS signature v4 escaping rules.\n *\n * @param URI {string} The URI to escape.\n * @returns {string} The escaped URI.\n */\nfunction escapeURI(URI: string): string {\n    const hexEncode = (c: string): string => {\n        return `%${c.charCodeAt(0).toString(16).toUpperCase()}`\n    }\n\n    return encodeURIComponent(URI).replace(/[!'()*]/g, hexEncode)\n}\n\n/**\n * formatDate formats a Date object into a ISO8601 formatted date string\n * and a string in the format YYYYMMDD.\n *\n * @param date {Date} The date to format.\n * @returns {DateInfo} The formatted date.\n */\nfunction formatDate(date: Date): DateInfo {\n    const longDate = iso8601(date).replace(/[\\-:]/g, '')\n    return {\n        longDate,\n        shortDate: longDate.slice(0, 8),\n    }\n}\n\n/**\n * Formats a time into an ISO 8601 string.\n *\n * @see https://en.wikipedia.org/wiki/ISO_8601\n *\n * @param time {number | string | Date} The time to format.\n * @returns {string} The ISO 8601 formatted time.\n */\nfunction iso8601(time: number | string | Date): string {\n    return toDate(time)\n        .toISOString()\n        .replace(/\\.\\d{3}Z$/, 'Z')\n}\n\n/**\n * Converts a time value into a Date object.\n *\n * @param time {number | string | Date} The time to convert.\n * @returns {Date} The resulting Date object.\n */\nfunction toDate(time: number | string | Date): Date {\n    if (typeof time === 'number') {\n        return new Date(time * 1000)\n    }\n\n    if (typeof time === 'string') {\n        if (Number(time)) {\n            return new Date(Number(time) * 1000)\n        }\n\n        return new Date(time)\n    }\n\n    return time\n}\n","/**\n * Type representing HTTP schemes\n */\nexport type HTTPScheme = 'http' | 'https'\n\n/**\n * Type representing HTTP Methods\n *\n */\nexport type HTTPMethod = 'GET' | 'POST' | 'PUT' | 'DELETE'\n\n/**\n * Type alias representing HTTP Headers\n */\nexport type HTTPHeaders = { [key: string]: string }\n\n/**\n * HTTPHeaderBag is a type alias representing HTTP Headers\n */\nexport type HTTPHeaderBag = Record<string, string>\n\nexport function hasHeader(soughtHeader: string, headers: HTTPHeaderBag): boolean {\n    soughtHeader = soughtHeader.toLowerCase()\n\n    for (const headerName of Object.keys(headers)) {\n        if (soughtHeader === headerName.toLowerCase()) {\n            return true\n        }\n    }\n\n    return false\n}\n\n/**\n * QueryParameterBag is a type alias representing HTTP Query Parameters\n */\nexport type QueryParameterBag = Record<string, string | Array<string>>\n\n/**\n * HTTPRequest represents an HTTP request\n */\nexport interface HTTPRequest {\n    /**\n     * The HTTP method to use\n     */\n    method: HTTPMethod\n\n    /**\n     * The protocol to use (http or https)\n     */\n    protocol: HTTPScheme\n\n    /**\n     * The hostname (domain name or IP address) the request targets\n     */\n    hostname: string\n\n    /**\n     * The port to the request targets\n     */\n    port?: number\n\n    /**\n     * The path to the resource\n     */\n    path: string\n\n    /**\n     * The query parameters to include in the request\n     */\n    query?: QueryParameterBag\n\n    /**\n     * The headers to include in the request\n     */\n    headers: HTTPHeaderBag\n\n    /**\n     * The body of the request\n     */\n    body?: string | ArrayBuffer | null\n}\n\n/**\n * SignedHTTPRequest represents an HTTP request that has been signed\n * with an AWS signature. It is a superset of HTTPRequest adding\n * the following fields:\n * - url: the fully qualified URL of the request that can be used in a k6 http.request.\n */\nexport interface SignedHTTPRequest extends HTTPRequest {\n    url: string\n}\n","/**\n *\n * @param value\n * @returns\n */\nexport function isArrayBuffer(value: any): value is ArrayBuffer {\n    return (\n        typeof ArrayBuffer === 'function' &&\n        (value instanceof ArrayBuffer ||\n            Object.prototype.toString.call(value) === '[object ArrayBuffer]')\n    )\n}\n\nexport function toFormUrlEncoded(form: any): string {\n    return Object.keys(form).reduce((params, key) => {\n        let value = form[key]\n        if (value !== undefined && value !== null) {\n            params.push(`${encodeURIComponent(key)}=${encodeURIComponent(value)}`)\n        }\n        return params;\n    }, [] as string[]).join('&')\n}","import { JSONArray, JSONObject } from 'k6'\nimport http, { RefinedResponse, ResponseType } from 'k6/http'\n\nimport { AWSClient } from './client'\nimport { AWSConfig } from './config'\nimport { AMZ_TARGET_HEADER } from './constants'\nimport { AWSError } from './error'\nimport { HTTPHeaders, HTTPMethod } from './http'\nimport { InvalidSignatureError, SignatureV4 } from './signature'\n\n/**\n * Class allowing to interact with Amazon AWS's KMS service\n */\nexport class KMSClient extends AWSClient {\n    method: HTTPMethod\n    commonHeaders: HTTPHeaders\n\n    signature: SignatureV4\n\n    /**\n     * Create a KMSClient\n     * @param  {AWSConfig} awsConfig - configuration attributes to use when interacting with AWS' APIs\n     */\n    constructor(awsConfig: AWSConfig) {\n        super(awsConfig, 'kms')\n\n        this.signature = new SignatureV4({\n            service: this.serviceName,\n            region: awsConfig.region,\n            credentials: {\n                accessKeyId: awsConfig.accessKeyId,\n                secretAccessKey: awsConfig.secretAccessKey,\n            },\n            uriEscapePath: true,\n            applyChecksum: false,\n        })\n\n        // All interactions with the KMS service\n        // are made via the GET or POST method.\n        this.method = 'POST'\n\n        this.commonHeaders = {\n            'Content-Type': 'application/x-amz-json-1.1',\n        }\n    }\n\n    /**\n     * Gets a list of all the KMS keys in the caller's AWS\n     * account and region.\n     *\n     * @returns an array of all the available keys\n     */\n    async listKeys(): Promise<Array<KMSKey>> {\n        const signedRequest = this.signature.sign(\n            {\n                method: this.method,\n                protocol: this.awsConfig.scheme,\n                hostname: this.host,\n                path: '/',\n                headers: {\n                    ...this.commonHeaders,\n                    // For some reason, the base target is not kms...\n                    [AMZ_TARGET_HEADER]: `TrentService.ListKeys`,\n                },\n                body: JSON.stringify({}),\n            },\n            {}\n        )\n\n        const res = await http.asyncRequest(this.method, signedRequest.url, signedRequest.body, {\n            headers: signedRequest.headers,\n        })\n        this._handle_error(KMSOperation.ListKeys, res)\n\n        const json: JSONArray = res.json('Keys') as JSONArray\n        return json.map((k) => KMSKey.fromJSON(k as JSONObject))\n    }\n\n    /**\n     * GenerateDataKey returns a unique symmetric data key for use outside of AWS KMS.\n     *\n     * This operation returns a plaintext copy of the data key and a copy that is encrypted under a symmetric encryption KMS key that you specify.\n     * The bytes in the plaintext key are random; they are not related to the caller or the KMS key.\n     * You can use the plaintext key to encrypt your data outside of AWS KMS and store the encrypted data key with the encrypted data.\n     *\n     * To generate a data key, specify the symmetric encryption KMS key that will be used to encrypt the data key.\n     * You cannot use an asymmetric KMS key to encrypt data keys.\n     *\n     * Used to generate data key with the KMS key defined\n     * @param {string} id - Specifies the symmetric encryption KMS key that encrypts the data key. Use its key ID, key ARN, alias name, or alias ARN.\n     * @param {KMKeySize} size - Specifies the length of the data key in bytes. For example, use the value 64 to generate a 512-bit data key (64 bytes is 512 bits). Default is 32, and generates a 256-bit data key.\n     * @throws {KMSServiceError}\n     * @throws {InvalidSignatureError}\n     * @returns {KMSDataKey} - The generated data key.\n     */\n    async generateDataKey(\n        id: string,\n        size: KMSKeySize = KMSKeySize.Size256\n    ): Promise<KMSDataKey | undefined> {\n        const signedRequest = this.signature.sign(\n            {\n                method: this.method,\n                protocol: this.awsConfig.scheme,\n                hostname: this.host,\n                path: '/',\n                headers: {\n                    ...this.commonHeaders,\n                    // For some reason, the base target is not kms...\n                    [AMZ_TARGET_HEADER]: `TrentService.GenerateDataKey`,\n                },\n                body: JSON.stringify({ KeyId: id, NumberOfBytes: size }),\n            },\n            {}\n        )\n\n        const res = await http.asyncRequest(this.method, signedRequest.url, signedRequest.body, {\n            headers: signedRequest.headers,\n        })\n        this._handle_error(KMSOperation.GenerateDataKey, res)\n\n        return KMSDataKey.fromJSON(res.json() as JSONObject)\n    }\n\n    _handle_error(operation: KMSOperation, response: RefinedResponse<ResponseType | undefined>) {\n        const errorCode = response.error_code\n        if (errorCode === 0) {\n            return\n        }\n\n        const error = response.json() as JSONObject\n        if (errorCode >= 1400 && errorCode <= 1499) {\n            // In the event of certain errors, the message is not set.\n            // Also, note the inconsistency in casing...\n            const errorMessage: string =\n                (error.Message as string) || (error.message as string) || (error.__type as string)\n\n            // Handle specifically the case of an invalid signature\n            if (error.__type === 'InvalidSignatureException') {\n                throw new InvalidSignatureError(errorMessage, error.__type)\n            }\n\n            // Otherwise throw a standard service error\n            throw new KMSServiceError(errorMessage, error.__type as string, operation)\n        }\n\n        if (errorCode === 1500) {\n            throw new KMSServiceError(\n                'An error occured on the server side',\n                'InternalServiceError',\n                operation\n            )\n        }\n    }\n}\n\n/**\n * Class representing a KMS key\n */\nexport class KMSKey {\n    /**\n     * ARN of the key\n     */\n    keyArn: string\n\n    /**\n     * Unique identifier of the key\n     */\n    keyId: string\n\n    constructor(keyArn: string, KeyId: string) {\n        this.keyArn = keyArn\n        this.keyId = KeyId\n    }\n\n    static fromJSON(json: JSONObject) {\n        return new KMSKey(json.KeyArn as string, json.KeyId as string)\n    }\n}\n\n/**\n * Class representing a data key\n */\nexport class KMSDataKey {\n    /**\n     * The Amazon Resource Name (key ARN) of the KMS key that encrypted the data key.\n     */\n    id: string\n\n    /**\n     * The (base64-encoded) encrypted copy of the data key.\n     */\n    ciphertextBlob: string\n\n    /**\n     * The plaintext data key.\n     * Use this data key to encrypt your data outside of KMS. Then, remove it from memory as soon as possible.\n     */\n    plaintext: string\n\n    constructor(CiphertextBlob: string, KeyId: string, Plaintext: string) {\n        this.ciphertextBlob = CiphertextBlob\n        this.id = KeyId\n        this.plaintext = Plaintext\n    }\n\n    static fromJSON(json: JSONObject) {\n        return new KMSDataKey(\n            json.CiphertextBlob as string,\n            json.KeyId as string,\n            json.Plaintext as string\n        )\n    }\n}\n\nexport class KMSServiceError extends AWSError {\n    operation: KMSOperation\n\n    /**\n     * Constructs a KMSServiceError\n     *\n     * @param  {string} message - human readable error message\n     * @param  {string} code - A unique short code representing the error that was emitted\n     * @param  {string} operation - Name of the failed Operation\n     */\n    constructor(message: string, code: string, operation: KMSOperation) {\n        super(message, code)\n        this.name = 'KMSServiceError'\n        this.operation = operation\n    }\n}\n\n/**\n *  KMSOperation defines all currently implemented KMS Service operations.\n */\nenum KMSOperation {\n    GenerateDataKey = 'GenerateDataKey',\n    ListKeys = 'ListKeys',\n}\n\n/**\n *  KMSKeyLength describes possible key lenght values for KMS API data key operations.\n */\nenum KMSKeySize {\n    Size256 = 32,\n    Size512 = 64,\n}\n"],"names":["__webpack_require__","module","getter","__esModule","d","a","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","AWSConfig","options","_classCallCheck","_defineProperty","region","InvalidAWSConfigError","concat","accessKeyId","length","secretAccessKey","this","undefined","sessionToken","scheme","endpoint","_createClass","__ENV","AWS_REGION","AWS_ACCESS_KEY_ID","AWS_SECRET_ACCESS_KEY","AWS_SESSION_TOKEN","_Error","_inherits","_super","_createSuper","message","_wrapNativeSuper","Error","require","AWSClient","awsConfig","serviceName","_host","set","host","_scheme","AMZ_DATE_QUERY_PARAM","AMZ_SIGNATURE_QUERY_PARAM","AMZ_TOKEN_QUERY_PARAM","AMZ_CONTENT_SHA256_HEADER","AMZ_DATE_HEADER","toLowerCase","AMZ_SIGNATURE_HEADER","AMZ_TARGET_HEADER","AMZ_TOKEN_HEADER","AUTHORIZATION_HEADER","GENERATED_HEADERS","HOST_HEADER","ALWAYS_UNSIGNABLE_HEADERS","authorization","connection","expect","from","pragma","referer","te","trailer","upgrade","KEY_TYPE_IDENTIFIER","SIGNING_ALGORITHM_IDENTIFIER","AWSError","code","_this","_assertThisInitialized","name","xmlDocument","doc","parseHTML","find","text","SignatureV4","_ref","service","credentials","uriEscapePath","applyChecksum","request","arguments","finalOptions","_objectSpread","signingDate","Date","unsignableHeaders","Set","signableHeaders","_formatDate","formatDate","longDate","shortDate","signingService","signingRegion","scope","constants","headers","hostname","_i","_Object$keys","keys","headerName","indexOf","ArrayBuffer","isView","body","buffer","payloadHash","computePayloadHash","soughtHeader","hasHeader","canonicalHeaders","computeCanonicalHeaders","signature","calculateSignature","deriveSigningKey","createCanonicalRequest","sort","join","url","protocol","path","query","serializeQueryParameters","originalRequest","_options$signingDate","_options$expiresIn","expiresIn","unhoistableHeaders","_formatDate2","InvalidSignatureError","moveHeadersToQuery","toString","signingKey","canonicalRequest","sortedHeaders","sortedCanonicalHeaders","map","signedHeaders","method","computeCanonicalURI","computeCanonicalQuerystring","credentialScope","hashedCanonicalRequest","crypto","stringToSign","createStringToSign","kSecret","kDate","kRegion","kService","_ref2","_step","normalizedURISegments","_iterator","_createForOfIteratorHelper","split","s","n","done","URISegment","pop","push","err","e","f","leading","startsWith","URI","trailing","endsWith","normalizedURI","encodeURIComponent","replace","_ref3","_step2","_ref3$query","serialized","_loop","escapeURI","Array","isArray","slice","reduce","encoded","_iterator2","filter","_ref4","_step3","_iterator3","canonicalHeaderName","has","trim","_ref5","requestCopy","JSON","parse","stringify","_requestCopy$query","_i2","_Object$keys2","_options$unhoistableH","lowerCaseName","ignoreKeys","_step4","_loop2","includes","_iterator4","_AWSError","c","charCodeAt","toUpperCase","date","time","Number","toDate","toISOString","_regeneratorRuntime","Op","hasOwn","desc","$Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","define","configurable","writable","wrap","innerFn","outerFn","self","tryLocsList","protoGenerator","Generator","generator","create","context","Context","makeInvokeMethod","tryCatch","fn","arg","type","ContinueSentinel","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","defineIteratorMethods","forEach","_invoke","AsyncIterator","PromiseImpl","invoke","resolve","reject","record","result","_typeof","__await","then","unwrapped","error","previousPromise","callInvokeWithMethodAndArg","state","doneResult","delegate","delegateResult","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","methodName","TypeError","info","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","i","displayName","isGeneratorFunction","genFun","ctor","constructor","mark","setPrototypeOf","__proto__","awrap","async","Promise","iter","val","object","reverse","skipTempReset","prev","charAt","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","thrown","delegateYield","ownKeys","enumerableOnly","getOwnPropertySymbols","symbols","sym","getOwnPropertyDescriptor","apply","target","source","getOwnPropertyDescriptors","defineProperties","asyncGeneratorStep","gen","_next","_throw","_asyncToGenerator","args","instance","Constructor","_defineProperties","props","descriptor","_toPropertyKey","protoProps","staticProps","subClass","superClass","_setPrototypeOf","p","bind","Derived","hasNativeReflectConstruct","Reflect","construct","sham","Proxy","Boolean","valueOf","_isNativeReflectConstruct","Super","_getPrototypeOf","NewTarget","_possibleConstructorReturn","ReferenceError","input","hint","prim","toPrimitive","res","String","_toPrimitive","KMSClient","_AWSClient","_generateDataKey","_listKeys","commonHeaders","_callee","signedRequest","json","_context","sign","http","_handle_error","KMSOperation","ListKeys","k","KMSKey","fromJSON","_callee2","id","size","_args2","_context2","KMSKeySize","Size256","KeyId","NumberOfBytes","GenerateDataKey","KMSDataKey","_x","operation","response","errorCode","error_code","errorMessage","Message","__type","KMSServiceError","keyArn","keyId","KeyArn","CiphertextBlob","Plaintext","ciphertextBlob","plaintext","_super2","_this2"],"sourceRoot":""}