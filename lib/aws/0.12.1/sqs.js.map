{"version":3,"file":"sqs.js","mappings":"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","sources":["webpack://k6-jslib-aws/./src/internal/client.ts","webpack://k6-jslib-aws/./src/internal/config.ts","webpack://k6-jslib-aws/./src/internal/constants.ts","webpack://k6-jslib-aws/./src/internal/endpoint.ts","webpack://k6-jslib-aws/./src/internal/error.ts","webpack://k6-jslib-aws/./src/internal/http.ts","webpack://k6-jslib-aws/./src/internal/signature.ts","webpack://k6-jslib-aws/./src/internal/utils.ts","webpack://k6-jslib-aws/external commonjs \"k6/crypto\"","webpack://k6-jslib-aws/external commonjs \"k6/html\"","webpack://k6-jslib-aws/external commonjs \"k6/http\"","webpack://k6-jslib-aws/webpack/bootstrap","webpack://k6-jslib-aws/webpack/runtime/compat get default export","webpack://k6-jslib-aws/webpack/runtime/define property getters","webpack://k6-jslib-aws/webpack/runtime/hasOwnProperty shorthand","webpack://k6-jslib-aws/webpack/runtime/make namespace object","webpack://k6-jslib-aws/./src/internal/sqs.ts"],"sourcesContent":["import { AWSConfig } from './config'\nimport { Endpoint } from './endpoint'\nimport { HTTPHeaders } from './http'\n\n/**\n * Class allowing to build requests targeting AWS APIs\n *\n * This class is meant to be used as a base class for specific\n * services clients. See S3Client or SecretsManagerClient for\n * usage examples.\n */\nexport class AWSClient {\n    readonly awsConfig: AWSConfig\n    readonly serviceName: string\n\n    private _endpoint?: Endpoint\n\n    /**\n     * @param {AWSConfig} awsConfig - configuration attributes to use when interacting with AWS' APIs\n     * @param  {string} serviceName - name of the service to target.\n     * @param  {URIEncodingConfig} URIencodingConfig - configures how requests URIs should be encoded.\n     */\n    constructor(awsConfig: AWSConfig, serviceName: string) {\n        this.awsConfig = awsConfig\n        this.serviceName = serviceName\n\n        // If an endpoint is provided in the config, set it\n        // to ensure the default endpoint is not used.\n        if (awsConfig.endpoint != undefined) {\n            this._endpoint = awsConfig.endpoint\n        }\n    }\n\n    /**\n     * Represents the endpoint URL of the AWS service.\n     *\n     * If no custom endpoint is set, a default endpoint will be constructed\n     * using the service name and region provided in the AWS config.\n     *\n     * @type {Endpoint}\n     * @public\n     */\n    public get endpoint() {\n        if (this._endpoint == undefined) {\n            this._endpoint = new Endpoint(\n                `https://${this.serviceName}.${this.awsConfig.region}.amazonaws.com`\n            )\n        }\n        return this._endpoint\n    }\n\n    /**\n     * Updates the endpoint URL of the AWS service.\n     *\n     * This can be used to override the default AWS service endpoint or set a custom endpoint.\n     *\n     * @param {Endpoint} endpoint - The new endpoint to set for the AWS service.\n     * @public\n     */\n    public set endpoint(endpoint: Endpoint) {\n        this._endpoint = endpoint\n    }\n}\n\n/**\n * Type alias representing the result of an AWSClient.buildRequest call\n */\nexport interface AWSRequest {\n    readonly url: string\n    readonly headers: HTTPHeaders\n}\n","import { HTTPScheme } from './http'\nimport { Endpoint } from './endpoint'\n\n/** Class holding an AWS connection information */\nexport class AWSConfig {\n    /**\n     * The AWS region to connect to, as listed: https://docs.aws.amazon.com/general/latest/gr/rande.html\n     *\n     * @type {string}\n     */\n    region: string\n\n    /**\n     * Your user's AWS access key id credential.\n     *\n     * @type {string}\n     */\n    accessKeyId: string\n\n    /**\n     * Your user's AWS secret access key credential.\n     *\n     * @type {string}\n     */\n    secretAccessKey: string\n\n    /**\n     * Your user's AWS session token credential.\n     *\n     * @type {string}\n     */\n    sessionToken?: string\n\n    /**\n     * The AWS hostname to connect to.\n     *\n     * @type {string} ['amazonaws.com']\n     */\n    endpoint?: Endpoint\n\n    /**\n     * fromEnvironment creates an AWSConfig from the environment variables.\n     *\n     * It expects to find the following compulsory environment variables:\n     *  * AWS_REGION\n     *  * AWS_ACCESS_KEY_ID\n     *  * AWS_SECRET_ACCESS_KEY\n     *\n     * If set, the following optional environment variables are also used:\n     *  * AWS_SESSION_TOKEN\n     *\n     * Finally, the options parameter allows to explicitly set the scheme and endpoint\n     * to use when connecting to AWS.\n     *\n     * @param options {AWSConnectionOptions}\n     * @returns\n     */\n    static fromEnvironment(options?: AWSConnectionOptions): AWSConfig {\n        const region = __ENV.AWS_REGION\n        const accessKeyId = __ENV.AWS_ACCESS_KEY_ID\n        const secretAccessKey = __ENV.AWS_SECRET_ACCESS_KEY\n        const sessionToken: string | undefined = __ENV.AWS_SESSION_TOKEN\n        const endpoint: Endpoint | string | undefined = options?.endpoint\n\n        return new AWSConfig({\n            region,\n            accessKeyId,\n            secretAccessKey,\n            sessionToken,\n            endpoint: endpoint,\n        })\n    }\n\n    /**\n     * Create an AWSConfig.\n     *\n     * @param {AWSConfigOptions} options - configuration attributes to use when interacting with AWS' APIs\n     * @throws {InvalidArgumentException}\n     */\n    constructor(options: AWSConfigOptions) {\n        if (!options.region || options.region === '') {\n            throw new InvalidAWSConfigError(\n                `invalid AWS region; reason: expected a valid AWS region name (e.g. \"us-east-1\"), got \\`${options.region}\\``\n            )\n        }\n\n        if (!options.accessKeyId || options.accessKeyId === '') {\n            throw new InvalidAWSConfigError(\n                `invalid AWS access key ID; reason: expected a non empty string, got \\`${options.accessKeyId}\\``\n            )\n        }\n\n        if (options.accessKeyId.length < 16 || options.accessKeyId.length > 128) {\n            throw new InvalidAWSConfigError(\n                `invalid AWS access key ID; reason: size should be between 16 and 128 characters, got ${options.accessKeyId.length}`\n            )\n        }\n\n        if (!options.secretAccessKey || options.secretAccessKey === '') {\n            throw new InvalidAWSConfigError(\n                `invalid AWS secret access key; reason: expected a non empty string, got \\`${options.secretAccessKey}\\``\n            )\n        }\n\n        this.region = options.region\n        this.accessKeyId = options.accessKeyId\n        this.secretAccessKey = options.secretAccessKey\n\n        if (options.sessionToken !== undefined) {\n            this.sessionToken = options.sessionToken\n        }\n\n        if (options.endpoint !== undefined) {\n            if (typeof options.endpoint === 'string') {\n                this.endpoint = new Endpoint(options.endpoint)\n            } else {\n                this.endpoint = options.endpoint\n            }\n        }\n    }\n}\n\n/**\n * Interface representing AWSConfig options\n */\nexport interface AWSConfigOptions extends AWSConnectionOptions {\n    /**\n     * The AWS region to connect to, as listed: https://docs.aws.amazon.com/general/latest/gr/rande.html\n     *\n     * @type {string}\n     */\n    region: string\n\n    /**\n     * Your user's AWS access key id credential.\n     *\n     * @type {string}\n     */\n    accessKeyId: string\n\n    /**\n     * Your user's AWS secret access key credential.\n     *\n     * @type {string}\n     */\n    secretAccessKey: string\n\n    /**\n     * Your user's AWS session token credential.\n     *\n     * @type {string}\n     */\n    sessionToken?: string\n}\n\n/**\n * Interface representing AWS connection options\n */\nexport interface AWSConnectionOptions {\n    /**\n     * The HTTP scheme to use when connecting to AWS.\n     *\n     * @type {HTTPScheme}\n     */\n    scheme?: HTTPScheme\n\n    /**\n     * The AWS hostname to connect to.\n     *\n     * @type {string}\n     */\n    endpoint?: Endpoint | string\n}\n\n/** Class representing an invalid AWS configuration */\nexport class InvalidAWSConfigError extends Error {\n    constructor(message: string) {\n        super(message)\n    }\n}\n","/**\n * Standard Amazon AWS query parameter names\n */\nexport const AMZ_ALGORITHM_QUERY_PARAM = 'X-Amz-Algorithm'\nexport const AMZ_CREDENTIAL_QUERY_PARAM = 'X-Amz-Credential'\nexport const AMZ_DATE_QUERY_PARAM = 'X-Amz-Date'\nexport const AMZ_EXPIRES_QUERY_PARAM = 'X-Amz-Expires'\nexport const AMZ_SIGNATURE_QUERY_PARAM = 'X-Amz-Signature'\nexport const AMZ_SIGNED_HEADERS_QUERY_PARAM = 'X-Amz-SignedHeaders'\nexport const AMZ_TARGET_QUERY_PARAM = 'X-Amz-Target'\nexport const AMZ_TOKEN_QUERY_PARAM = 'X-Amz-Security-Token'\n\n/**\n * Standard Amazon AWS header names\n */\nexport const AMZ_CONTENT_SHA256_HEADER = 'x-amz-content-sha256'\nexport const AMZ_DATE_HEADER = AMZ_DATE_QUERY_PARAM.toLowerCase()\nexport const AMZ_SIGNATURE_HEADER = AMZ_SIGNATURE_QUERY_PARAM.toLowerCase()\nexport const AMZ_TARGET_HEADER = AMZ_TARGET_QUERY_PARAM.toLowerCase()\nexport const AMZ_TOKEN_HEADER = AMZ_TOKEN_QUERY_PARAM.toLowerCase()\n\n/**\n * Common HTTP headers we rely on in the signing process\n */\nexport const AUTHORIZATION_HEADER = 'authorization'\nexport const DATE_HEADER = 'date'\n\n/**\n * Lists the headers that are generated as part of the signature process.\n */\nexport const GENERATED_HEADERS = [AUTHORIZATION_HEADER, AMZ_DATE_HEADER, DATE_HEADER]\nexport const HOST_HEADER = 'host'\n\n/**\n * Lists the headers that should never be included in the\n * request signature signature process.\n */\nexport const ALWAYS_UNSIGNABLE_HEADERS = {\n    authorization: true,\n    'cache-control': true,\n    connection: true,\n    expect: true,\n    from: true,\n    'keep-alive': true,\n    'max-forwards': true,\n    pragma: true,\n    referer: true,\n    te: true,\n    trailer: true,\n    'transfer-encoding': true,\n    upgrade: true,\n    'user-agent': true,\n    'x-amzn-trace-id': true,\n}\n\n/**\n * Signature specific constants included in the signing process\n */\nexport const KEY_TYPE_IDENTIFIER = 'aws4_request'\nexport const SIGNING_ALGORITHM_IDENTIFIER = 'AWS4-HMAC-SHA256'\n\n/**\n * Maximum time to live of a signed request in seconds: 7 days.\n */\nexport const MAX_PRESIGNED_TTL = 60 * 60 * 24 * 7\n\n/**\n * SHA256 hash of an empty string (so we don't waste cycles recomputing it)\n */\nexport const EMPTY_SHA256 = 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\n\n/**\n * SHA256 hash of the unsigned payload constant (so we don't waste cycles recomputing it)\n */\nexport const UNSIGNED_PAYLOAD_SHA256 =\n    '5a41b0751e4537c6ff868564ab44a4d4ecceec2ec5b1c5f74d97422968e04237'\n\nexport const UNSIGNED_PAYLOAD = 'UNSIGNED-PAYLOAD'\n","/**\n * Represents an AWS service endpoint, providing utilities for parsing and handling URL details.\n */\nexport class Endpoint {\n    private _protocol: string\n    private _hostname: string\n    private _port?: number\n\n    // Default protocol, this can be globally changed as per application requirements\n    private static readonly DEFAULT_PROTOCOL = 'https' // Set this as per AWS.config\n\n    /**\n    //  * Constructs a new Endpoint instance.\n     *\n     * @param {string} endpoint - The URL to construct an endpoint from. If the URL omits a protocol, the default protocol will be used.\n     */\n    constructor(endpoint: string) {\n        const isDefaultProtocol =\n            !endpoint.startsWith('http://') && !endpoint.startsWith('https://')\n        const completeUrl = isDefaultProtocol\n            ? `${Endpoint.DEFAULT_PROTOCOL}://${endpoint}`\n            : endpoint\n\n        const protocolMatch = completeUrl.match(/^https?:/)\n        const hostAndPath = completeUrl.replace(/^https?:\\/\\//, '')\n        const [hostnameWithPort] = hostAndPath.split('/')\n\n        this._protocol = protocolMatch ? protocolMatch[0].slice(0, -1) : Endpoint.DEFAULT_PROTOCOL\n        this._hostname = hostnameWithPort.split(':')[0]\n        this._port = hostnameWithPort.split(':')[1]\n            ? parseInt(hostnameWithPort.split(':')[1])\n            : undefined\n    }\n\n    /**\n     * Creates a new Endpoint instance that is a copy of the current one.\n     *\n     * @returns {Endpoint} The copied Endpoint.\n     */\n    public copy(): Endpoint {\n        return new Endpoint(this.href)\n    }\n\n    /**\n     * Gets the host portion of the endpoint including the port.\n     *\n     * @returns {string} The host portion of the endpoint including the port.\n     */\n    public get host(): string {\n        return this._port ? `${this._hostname}:${this._port}` : this._hostname\n    }\n\n    /**\n     * Sets the host portion of the endpoint including the port.\n     *\n     * @param {string} value - The value to set for the host.\n     */\n    public set host(value: string) {\n        const [hostname, port] = value.split(':')\n        this._hostname = hostname\n        this._port = port ? parseInt(port) : undefined\n    }\n\n    /**\n     * Gets the host portion of the endpoint without the port.\n     *\n     * @returns {string} The host portion of the endpoint.\n     */\n    public get hostname(): string {\n        return this._hostname\n    }\n\n    /**\n     * Sets the host portion of the endpoint without the port.\n     *\n     * @param {string} value - The value to set for the hostname.\n     */\n    public set hostname(value: string) {\n        this._hostname = value\n    }\n\n    /**\n     * Gets the full URL of the endpoint.\n     *\n     * @returns {string} The full URL of the endpoint.\n     */\n    public get href(): string {\n        return `${this.protocol}://${this.host}`\n    }\n\n    /**\n     * Sets the full URL of the endpoint.\n     *\n     * @param {string} value - The value to set for the full URL.\n     */\n    public set href(value: string) {\n        const protocolMatch = value.match(/^https?:/)\n        const withoutProtocol = value.replace(/^https?:\\/\\//, '')\n        const [hostnameWithPort] = withoutProtocol.split('/')\n\n        this._protocol = protocolMatch ? protocolMatch[0].slice(0, -1) : Endpoint.DEFAULT_PROTOCOL // remove the trailing colon\n        this._hostname = hostnameWithPort.split(':')[0]\n        this._port = hostnameWithPort.split(':')[1]\n            ? parseInt(hostnameWithPort.split(':')[1])\n            : undefined\n    }\n\n    /**\n     * Gets the port of the endpoint.\n     *\n     * @returns {number|undefined} The port of the endpoint.\n     */\n    public get port(): number | undefined {\n        return this._port\n    }\n\n    /**\n     * Sets the port of the endpoint.\n     *\n     * @param {number|undefined} value - The value to set for the port.\n     */\n    public set port(value: number | undefined) {\n        this._port = value\n    }\n\n    /**\n     * Gets the protocol (http or https) of the endpoint URL.\n     *\n     * @returns {string} The protocol of the endpoint URL.\n     */\n    public get protocol(): string {\n        return this._protocol\n    }\n\n    /**\n     * Sets the protocol (http or https) of the endpoint URL.\n     *\n     * @param {string} value - The value to set for the protocol.\n     */\n    public set protocol(value: string) {\n        this._protocol = value\n    }\n}\n","import { JSONObject } from './json'\nimport { parseHTML } from 'k6/html'\nimport { Response } from 'k6/http'\n\n/**\n * Base class to derive errors from\n *\n * Inspired from AWS official error types, as\n * described in:\n *   * https://aws.amazon.com/blogs/developer/service-error-handling-modular-aws-sdk-js/\n *   * https://github.com/aws/aws-sdk-js/blob/master/lib/error.d.ts\n */\nexport class AWSError extends Error {\n    /**\n     * Error code issued by the service (if any)\n     */\n    code?: string\n\n    /**\n     * Create an AWSError\n     *\n     * @param {string} message - A longer human readable error message.\n     * @param {string?} code - A unique short code representing the error that was emitted\n     */\n    constructor(message: string, code?: string) {\n        super(message)\n        this.name = 'AWSError'\n        this.code = code\n    }\n\n    /**\n     * Parse an AWSError from an XML document\n     *\n     * @param  {string} xmlDocument - Serialized XML document to parse the error from\n     */\n    static parseXML(xmlDocument: string): AWSError {\n        const doc = parseHTML(xmlDocument)\n        return new AWSError(doc.find('Message').text(), doc.find('Code').text())\n    }\n\n    static parse(response: Response): AWSError {\n        if (response.headers['Content-Type'] === 'application/json') {\n            const error = (response.json() as JSONObject) || {}\n            const message =\n                error.Message ||\n                error.message ||\n                error.__type ||\n                'An error occurred on the server side'\n            const code = response.headers['X-Amzn-Errortype'] || error.__type\n            return new AWSError(message as string, code as string)\n        } else {\n            return AWSError.parseXML(response.body as string)\n        }\n    }\n}\n","import { Endpoint } from './endpoint'\n\n/**\n * Type representing HTTP schemes\n */\nexport type HTTPScheme = 'http' | 'https'\n\n/**\n * Type representing HTTP Methods\n *\n */\nexport type HTTPMethod = 'GET' | 'POST' | 'PUT' | 'DELETE'\n\n/**\n * Type alias representing HTTP Headers\n */\nexport type HTTPHeaders = { [key: string]: string }\n\n/**\n * HTTPHeaderBag is a type alias representing HTTP Headers\n */\nexport type HTTPHeaderBag = Record<string, string>\n\nexport function hasHeader(soughtHeader: string, headers: HTTPHeaderBag): boolean {\n    soughtHeader = soughtHeader.toLowerCase()\n\n    for (const headerName of Object.keys(headers)) {\n        if (soughtHeader === headerName.toLowerCase()) {\n            return true\n        }\n    }\n\n    return false\n}\n\n/**\n * QueryParameterBag is a type alias representing HTTP Query Parameters\n */\nexport type QueryParameterBag = Record<string, string | Array<string>>\n\n/**\n * HTTPRequest represents an HTTP request\n */\nexport interface HTTPRequest {\n    /**\n     * The HTTP method to use\n     */\n    method: HTTPMethod\n\n    /**\n     * Represents an AWS service endpoint, providing utilities for parsing and handling URL details.\n     */\n    endpoint: Endpoint\n\n    /**\n     * The path to the resource\n     */\n    path: string\n\n    /**\n     * The query parameters to include in the request\n     */\n    query?: QueryParameterBag\n\n    /**\n     * The headers to include in the request\n     */\n    headers: HTTPHeaderBag\n\n    /**\n     * The body of the request\n     */\n    body?: string | ArrayBuffer | null\n}\n\n/**\n * SignedHTTPRequest represents an HTTP request that has been signed\n * with an AWS signature. It is a superset of HTTPRequest adding\n * the following fields:\n * - url: the fully qualified URL of the request that can be used in a k6 http.request.\n */\nexport interface SignedHTTPRequest extends HTTPRequest {\n    url: string\n}\n","import crypto from 'k6/crypto'\n\nimport * as constants from './constants'\nimport { AWSError } from './error'\nimport { hasHeader, HTTPHeaderBag, HTTPRequest, QueryParameterBag, SignedHTTPRequest } from './http'\nimport { isArrayBuffer } from './utils'\n\n/**\n * SignatureV4 can be used to sign HTTP requests and presign URLs using the AWS Signature\n * Version 4 signing process.\n *\n * It offers two signing methods:\n * - sign: signs the request headers and payload\n * - presign: returns a presigned (authorization information contained in the query string) URL\n *\n * @see https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html\n */\nexport class SignatureV4 {\n    /**\n     * The name of the service to sign for.\n     */\n    private readonly service: string\n\n    /**\n     * The name of the region to sign for.\n     */\n    private readonly region: string\n\n    /**\n     * The credentials with which the request should be signed.\n     */\n    private readonly credentials: Credentials\n\n    /**\n     * Whether to uri-escape the request URI path as part of computing the\n     * canonical request string. This is required for every AWS service, except\n     * Amazon S3, as of late 2017.\n     *\n     * @default [true]\n     */\n    private readonly uriEscapePath: boolean\n\n    /**\n     * Whether to calculate a checksum of the request body and include it as\n     * either a request header (when signing) or as a query string parameter\n     * (when presigning). This is required for AWS Glacier and Amazon S3 and optional for\n     * every other AWS service as of late 2017.\n     *\n     * @default [true]\n     */\n    private readonly applyChecksum: boolean\n\n    // TODO: uriEscapePath and applyChecksum should not be present in the constructor\n    constructor({\n        service,\n        region,\n        credentials,\n        uriEscapePath,\n        applyChecksum,\n    }: SignatureV4Options) {\n        this.service = service\n        this.region = region\n        this.credentials = credentials\n        this.uriEscapePath = typeof uriEscapePath === 'boolean' ? uriEscapePath : true\n        this.applyChecksum = typeof applyChecksum === 'boolean' ? applyChecksum : true\n    }\n\n    /**\n     * Includes AWS v4 signing information to the provided HTTP request.\n     *\n     * This method adds an Authorization header to the request, containing\n     * the signature and other signing information. It also returns a preformatted\n     * URL that can be used to make the k6 http request.\n     *\n     * This method mutates the request object.\n     *\n     * @param request {HTTPRequest} The request to sign.\n     * @param options {Partial<RequestSigningOptions>} Options for signing the request.\n     * @returns {SignedHTTPRequest} The signed request.\n     */\n    sign(request: HTTPRequest, options: Partial<RequestSigningOptions> = {}): SignedHTTPRequest {\n        // Set default values for options which are not provided by the user.\n        const defaultOptions = {\n            signingDate: new Date(),\n            unsignableHeaders: new Set<string>(),\n            signableHeaders: new Set<string>(),\n        }\n\n        // Merge default options with the ones maybe provided by the user.\n        const finalOptions = { ...defaultOptions, ...options }\n\n        const { longDate, shortDate }: DateInfo = formatDate(finalOptions.signingDate)\n        const service = finalOptions.signingService || this.service\n        const region = finalOptions.signingRegion || this.region\n        const scope = `${shortDate}/${region}/${service}/${constants.KEY_TYPE_IDENTIFIER}`\n\n        // Required by the specification:\n        //   \"For HTTP/1.1 requests, you must include the host header at a minimum.\n        //   Standard headers like content-type are optional.\n        //   For HTTP/2 requests, you must include the :authority header instead of\n        //   the host header. Different services might require other headers.\"\n        if (!request.headers[constants.HOST_HEADER]) {\n          request.headers[constants.HOST_HEADER] = request.endpoint.hostname\n      }\n        \n\n        // Filter out headers that will be generated and managed by the signing process.\n        // If the user provide any of those as part of the HTTPRequest's headers, they\n        // will be ignored.\n        for (const headerName of Object.keys(request.headers)) {\n            if (constants.GENERATED_HEADERS.indexOf(headerName.toLowerCase()) > -1) {\n                delete request.headers[headerName]\n            }\n        }\n\n        request.headers[constants.AMZ_DATE_HEADER] = longDate\n        if (this.credentials.sessionToken) {\n            request.headers[constants.AMZ_TOKEN_HEADER] = this.credentials.sessionToken\n        }\n\n        // If the request body is a typed array, we need to convert it to a buffer\n        // so that we can calculate the checksum.\n        if (ArrayBuffer.isView(request.body)) {\n            request.body = request.body.buffer\n        }\n\n        // Ensure we avoid passing undefined to the crypto hash function.\n        if (!request.body) {\n            request.body = ''\n        }\n\n        const payloadHash = this.computePayloadHash(request)\n        if (\n            !hasHeader(constants.AMZ_CONTENT_SHA256_HEADER, request.headers) &&\n            this.applyChecksum\n        ) {\n            request.headers[constants.AMZ_CONTENT_SHA256_HEADER] = payloadHash\n        }\n\n        const canonicalHeaders = this.computeCanonicalHeaders(\n            request,\n            finalOptions.unsignableHeaders,\n            finalOptions.signableHeaders\n        )\n        const signature = this.calculateSignature(\n            longDate,\n            scope,\n            this.deriveSigningKey(this.credentials, service, region, shortDate),\n            this.createCanonicalRequest(request, canonicalHeaders, payloadHash)\n        )\n\n        /**\n         * Step 4 of the signing process: add the signature to the HTTP request's headers.\n         *\n         * @see https://docs.aws.amazon.com/general/latest/gr/sigv4-add-signature-to-request.html\n         */\n        request.headers[constants.AUTHORIZATION_HEADER] =\n            `${constants.SIGNING_ALGORITHM_IDENTIFIER} ` +\n            `Credential=${this.credentials.accessKeyId}/${scope}, ` +\n            `SignedHeaders=${Object.keys(canonicalHeaders).sort().join(';')}, ` +\n            `Signature=${signature}`\n\n        // If a request path was provided, add it to the URL\n        let url = request.endpoint.href\n        if (request.path) {\n            url += request.path\n        }\n\n        // If a request query string was provided, add it to the URL\n        if (request.query) {\n            // We exclude the signature from the query string\n            url += `?${this.serializeQueryParameters(request.query)}`\n        }\n\n        return {\n            url: url,\n            ...request,\n        }\n    }\n\n    /**\n     * Produces a presigned URL with AWS v4 signature information for the provided HTTP request.\n     *\n     * A presigned URL is a URL that contains the authorization information\n     * (signature and other signing information) in the query string. This method\n     * returns a preformatted URL that can be used to make the k6 http request.\n     *\n     * @param originalRequest - The original request to presign.\n     * @param options - Options controlling the signing of the request.\n     * @returns A signed request, including the presigned URL.\n     */\n    presign(originalRequest: HTTPRequest, options: PresignOptions = {}): SignedHTTPRequest {\n        const {\n            signingDate = new Date(),\n            expiresIn = 3600,\n            unsignableHeaders,\n            unhoistableHeaders,\n            signableHeaders,\n            signingRegion,\n            signingService,\n        } = options\n        const { longDate, shortDate }: DateInfo = formatDate(signingDate)\n        const region = signingRegion || this.region\n        const service = signingService || this.service\n\n        if (expiresIn > constants.MAX_PRESIGNED_TTL) {\n            throw new InvalidSignatureError(\n                \"Signature version 4 presigned URLs can't be valid for more than 7 days\"\n            )\n        }\n\n        const scope = `${shortDate}/${region}/${service}/${constants.KEY_TYPE_IDENTIFIER}`\n        const request = this.moveHeadersToQuery(originalRequest, { unhoistableHeaders })\n\n        // Required by the specification:\n        //   \"For HTTP/1.1 requests, you must include the host header at a minimum.\n        //   Standard headers like content-type are optional.\n        //   For HTTP/2 requests, you must include the :authority header instead of\n        //   the host header. Different services might require other headers.\"\n        if (!request.headers[constants.HOST_HEADER]) {\n          request.headers[constants.HOST_HEADER] = originalRequest.endpoint.hostname\n      }\n\n        // If the user provided a session token, include it in the signed url query string.\n        if (this.credentials.sessionToken) {\n            request.query[constants.AMZ_TOKEN_QUERY_PARAM] = this.credentials.sessionToken\n        }\n\n        // Add base signing query parameters to the request, as described in the documentation\n        // @see https://docs.aws.amazon.com/general/latest/gr/sigv4-add-signature-to-request.html\n        request.query[constants.AMZ_ALGORITHM_QUERY_PARAM] = constants.SIGNING_ALGORITHM_IDENTIFIER\n        request.query[\n            constants.AMZ_CREDENTIAL_QUERY_PARAM\n        ] = `${this.credentials.accessKeyId}/${scope}`\n        request.query[constants.AMZ_DATE_QUERY_PARAM] = longDate\n        request.query[constants.AMZ_EXPIRES_QUERY_PARAM] = expiresIn.toString(10)\n\n        const canonicalHeaders = this.computeCanonicalHeaders(\n            request,\n            unsignableHeaders,\n            signableHeaders\n        )\n        request.query[constants.AMZ_SIGNED_HEADERS_QUERY_PARAM] = Object.keys(canonicalHeaders)\n            .sort()\n            .join(';')\n\n        const signingKey = this.deriveSigningKey(this.credentials, service, region, shortDate)\n\n        // Computing the payload from the original request. This is required\n        // in the event the user attempts to produce a presigned URL for s3,\n        // which requires the payload hash to be 'UNSIGNED-PAYLOAD'.\n        //\n        // To that effect, users need to set the 'x-amz-content-sha256' header,\n        // and mark it as unhoistable and unsignable. When setup this way,\n        // the computePayloadHash method will then return the string 'UNSIGNED-PAYLOAD'.\n        const payloadHash = this.computePayloadHash(originalRequest)\n        const canonicalRequest = this.createCanonicalRequest(request, canonicalHeaders, payloadHash)\n\n        request.query[constants.AMZ_SIGNATURE_QUERY_PARAM] = this.calculateSignature(\n            longDate,\n            scope,\n            signingKey,\n            canonicalRequest\n        )\n\n        // If a request path was provided, add it to the URL\n        let url = request.endpoint.href\n        if (request.path) {\n            url += request.path\n        }\n\n        // If a request query string was provided, add it to the URL\n        if (request.query) {\n            url += `?${this.serializeQueryParameters(request.query)}`\n        }\n\n        return { url: url, ...request }\n    }\n\n    /**\n     * Create a string including information from your request\n     * in a AWS signature v4 standardized (canonical) format.\n     *\n     * Step 1 of the signing process: create the canonical request string.\n     * @see https://docs.aws.amazon.com/general/latest/gr/sigv4-create-canonical-request.html\n     *\n     * @param request {HTTPRequest} The request to sign.\n     * @param canonicalHeaders {HTTPHeaderBag} The request's canonical headers.\n     * @param payloadHash {string} The hexadecimally encoded request's payload hash .\n     * @returns {string} The canonical request string.\n     */\n    private createCanonicalRequest(\n        request: HTTPRequest,\n        canonicalHeaders: HTTPHeaderBag,\n        payloadHash: string\n    ): string {\n        const sortedHeaders = Object.keys(canonicalHeaders).sort()\n        const sortedCanonicalHeaders = sortedHeaders\n            .map((name) => `${name}:${canonicalHeaders[name]}`)\n            .join('\\n')\n        const signedHeaders = sortedHeaders.join(';')\n\n        return (\n            `${request.method}\\n` +\n            `${this.computeCanonicalURI(request)}\\n` +\n            `${this.computeCanonicalQuerystring(request)}\\n` +\n            `${sortedCanonicalHeaders}\\n\\n` +\n            `${signedHeaders}\\n` +\n            `${payloadHash}`\n        )\n    }\n\n    /**\n     * Create the \"string to sign\" part of the signature Version 4 protocol.\n     *\n     * The \"string to sign\" includes meta information about your request and\n     * about the canonical request that you created with `createCanonicalRequest`.\n     * It is used hand in hand with the signing key to create the request signature.\n     * Step 2 of the signing process: create the string to sign.\n     * @see https://docs.aws.amazon.com/general/latest/gr/sigv4-create-string-to-sign.html\n     *\n     * @param longDate {string} The request's date in iso 8601 format.\n     * @param credentialScope {string} The request's credential scope.\n     * @param canonicalRequest {string} The request's canonical request.\n     * @returns {string} The \"string to sign\".\n     */\n    private createStringToSign(\n        longDate: string,\n        credentialScope: string,\n        canonicalRequest: string\n    ): string {\n        const hashedCanonicalRequest = crypto.sha256(canonicalRequest, 'hex')\n\n        return (\n            `${constants.SIGNING_ALGORITHM_IDENTIFIER}\\n` +\n            `${longDate}\\n` +\n            `${credentialScope}\\n` +\n            `${hashedCanonicalRequest}`\n        )\n    }\n\n    /**\n     * Calculte the signature for AWS signature version 4.\n     *\n     * Step 3 of the signing process: create the signature.\n     * @see https://docs.aws.amazon.com/general/latest/gr/sigv4-calculate-signature.html\n     *\n     * @param longDate {string} The request's date in iso 8601 format.\n     * @param credentialScope {string} The request's credential scope.\n     * @param signingKey {string} the signing key as computed by the deriveSigningKey method.\n     * @param canonicalRequest {string} The request's canonical request.\n     * @returns {string} The signature.\n     */\n    private calculateSignature(\n        longDate: string,\n        credentialScope: string,\n        signingKey: Uint8Array,\n        canonicalRequest: string\n    ): string {\n        const stringToSign = this.createStringToSign(longDate, credentialScope, canonicalRequest)\n        return crypto.hmac('sha256', signingKey, stringToSign, 'hex')\n    }\n\n    /**\n     * Derives the signing key for authenticating requests signed with\n     * the Signature version 4 authentication protocol.\n     *\n     * deriveSigningKey produces a signing key by creating a series of\n     * hash-based message authentication codes (HMACs) represented in\n     * a binary format.\n     *\n     * The derived signing key is specific to the date it's made at, as well as\n     * the service and region it targets.\n     *\n     * @param credentials {AWSCredentials} The credentials to use for signing.\n     * @param service {string} The service the request is targeted at.\n     * @param region {string} The region the request is targeted at.\n     * @param shortDate {string} The request's date in YYYYMMDD format.\n     * @returns {Uint8Array} The derived signing key.\n     */\n    private deriveSigningKey(\n        credentials: Credentials,\n        service: string,\n        region: string,\n        shortDate: string\n    ): Uint8Array {\n        const kSecret: string = credentials.secretAccessKey\n        /**\n         * crypto.hmac returns a value of type `bytes`, which is an alias for\n         * number[]. However, the secret argument to hmac needs to either be\n         * a `string` or ArrayBuffer. The only way to get around this is to\n         * cast the return value of hmac to any, thus, we disable the no-explicit-any\n         * ESLint rule for this function.\n         */\n        /* eslint-disable @typescript-eslint/no-explicit-any */\n        const kDate: any = crypto.hmac('sha256', 'AWS4' + kSecret, shortDate, 'binary')\n        const kRegion: any = crypto.hmac('sha256', kDate, region, 'binary')\n        const kService: any = crypto.hmac('sha256', kRegion, service, 'binary')\n        const kSigning: any = crypto.hmac('sha256', kService, 'aws4_request', 'binary')\n        /* eslint-enable @typescript-eslint/no-explicit-any */\n\n        return kSigning\n    }\n\n    /**\n     * Create a string that includes information from your request\n     * in a AWS signature v4 standardized (canonical) format.\n     *\n     * @param param0 {HTTPRequest} The request to sign.\n     * @returns {string} The canonical URI.\n     */\n    private computeCanonicalURI({ path }: HTTPRequest): string {\n        if (this.uriEscapePath) {\n            // Non-S3 services, we normalize the path and then double URI encode it.\n            // Ref: \"Remove Dot Segments\" https://datatracker.ietf.org/doc/html/rfc3986#section-5.2.4\n            const normalizedURISegments = []\n\n            for (const URISegment of path.split('/')) {\n                if (URISegment?.length === 0) {\n                    continue\n                }\n\n                if (URISegment === '.') {\n                    continue\n                }\n\n                if (URISegment === '..') {\n                    normalizedURISegments.pop()\n                } else {\n                    normalizedURISegments.push(URISegment)\n                }\n            }\n\n            // Normalize the URI\n            const leading = path?.startsWith('/') ? '/' : ''\n            const URI = normalizedURISegments.join('/')\n            const trailing = normalizedURISegments.length > 0 && path?.endsWith('/') ? '/' : ''\n            const normalizedURI = `${leading}${URI}${trailing}`\n\n            const doubleEncoded = encodeURIComponent(normalizedURI)\n\n            return doubleEncoded.replace(/%2F/g, '/')\n        }\n\n        // For S3, we shouldn't normalize the path. For example, object name\n        // my-object//example//photo.user should not be normalized to\n        // my-object/example/photo.user\n        return path\n    }\n\n    /**\n     * Serializes the request's query parameters into their canonical\n     * string version. If the request does not include a query parameters,\n     * returns an empty string.\n     *\n     * @param param0 {HTTPRequest} The request containing the query parameters.\n     * @returns {string} The canonical query string.\n     */\n    private computeCanonicalQuerystring({ query = {} }: HTTPRequest): string {\n        const keys: Array<string> = []\n        const serialized: Record<string, string> = {}\n\n        for (const key of Object.keys(query).sort()) {\n            if (key.toLowerCase() === constants.AMZ_SIGNATURE_HEADER) {\n                continue\n            }\n\n            keys.push(key)\n            const value = query[key]\n\n            if (typeof value === 'string') {\n                serialized[key] = `${escapeURI(key)}=${escapeURI(value)}`\n            } else if (Array.isArray(value)) {\n                serialized[key] = value\n                    .slice(0)\n                    .sort()\n                    .reduce(\n                        (encoded: Array<string>, value: string) =>\n                            encoded.concat([`${escapeURI(key)}=${escapeURI(value)}`]),\n                        []\n                    )\n                    .join('&')\n            }\n        }\n\n        return keys\n            .map((key) => serialized[key])\n            .filter((serialized) => serialized)\n            .join('&')\n    }\n\n    /**\n     * Create the canonical form of the request's headers.\n     * Canonical headers consist of all the HTTP headers you\n     * are including with the signed request.\n     *\n     * @param param0 {HTTPRequest} The request to compute the canonical headers of.\n     * @param unsignableHeaders {Set<string>} The headers that should not be signed.\n     * @param signableHeaders {Set<string>} The headers that should be signed.\n     * @returns {string} The canonical headers.\n     */\n    private computeCanonicalHeaders(\n        { headers }: HTTPRequest,\n        unsignableHeaders?: Set<string>,\n        signableHeaders?: Set<string>\n    ): HTTPHeaderBag {\n        const canonicalHeaders: HTTPHeaderBag = {}\n\n        for (const headerName of Object.keys(headers).sort()) {\n            if (headers[headerName] == undefined) {\n                continue\n            }\n\n            const canonicalHeaderName = headerName.toLowerCase()\n            if (\n                canonicalHeaderName in constants.ALWAYS_UNSIGNABLE_HEADERS ||\n                unsignableHeaders?.has(canonicalHeaderName)\n            ) {\n                if (\n                    !signableHeaders ||\n                    (signableHeaders && !signableHeaders.has(canonicalHeaderName))\n                ) {\n                    continue\n                }\n            }\n\n            if (typeof headers[headerName] === 'string') {\n                canonicalHeaders[canonicalHeaderName] = headers[headerName] = headers[headerName]\n                    .trim()\n                    .replace(/\\s+/g, ' ')\n            }\n        }\n\n        return canonicalHeaders\n    }\n\n    /**\n     * Computes the SHA256 cryptographic hash of the request's body.\n     *\n     * If the headers contain the 'X-Amz-Content-Sha256' header, then\n     * the value of that header is returned instead. This proves useful\n     * when, for example, presiging a URL for S3, as the payload hash\n     * must always be equal to 'UNSIGNED-PAYLOAD'.\n     *\n     * @param param0 {HTTPRequest} The request to compute the payload hash of.\n     * @returns {string} The hex encoded SHA256 payload hash, or the value of the 'X-Amz-Content-Sha256' header.\n     */\n    private computePayloadHash({ headers, body }: HTTPRequest): string {\n        // for (const headerName of Object.keys(headers)) {\n        //     // If the header is present, return its value.\n        //     // So that we let the 'UNSIGNED-PAYLOAD' value pass through.\n        //     if (headerName.toLowerCase() === constants.AMZ_CONTENT_SHA256_HEADER) {\n        //         return headers[headerName]\n        //     }\n        // }\n\n        if (headers[constants.AMZ_CONTENT_SHA256_HEADER]) {\n            return headers[constants.AMZ_CONTENT_SHA256_HEADER]\n        }\n\n        if (body == undefined) {\n            return constants.EMPTY_SHA256\n        }\n\n        if (typeof body === 'string' || isArrayBuffer(body)) {\n            return crypto.sha256(body, 'hex').toLowerCase()\n        }\n\n        if (ArrayBuffer.isView(body)) {\n            // If the request body is a typed array, we need to convert it to a buffer\n            // so that we can calculate the checksum.\n            return crypto.sha256((body as DataView).buffer, 'hex').toLowerCase()\n        }\n\n        return constants.UNSIGNED_PAYLOAD\n    }\n\n    /**\n     * Moves a request's headers to its query parameters.\n     *\n     * The operation will ignore any amazon standard headers, prefixed\n     * with 'X-Amz-'. It will also ignore any headers specified as unhoistable\n     * by the options.\n     *\n     * The operation will delete the headers from the request.\n     *\n     * @param request {HTTPRequest} The request to move the headers from.\n     * @param options\n     * @returns {HTTPRequest} The request with the headers moved to the query parameters.\n     */\n    private moveHeadersToQuery(\n        request: HTTPRequest,\n        options: { unhoistableHeaders?: Set<string> } = {}\n    ): HTTPRequest & { query: QueryParameterBag } {\n        const requestCopy = JSON.parse(JSON.stringify(request))\n        const { headers, query = {} as QueryParameterBag } = requestCopy\n\n        for (const name of Object.keys(headers)) {\n            const lowerCaseName = name.toLowerCase()\n            if (\n                lowerCaseName.slice(0, 6) === 'x-amz-' &&\n                !options.unhoistableHeaders?.has(lowerCaseName)\n            ) {\n                query[name] = headers[name]\n                delete headers[name]\n            }\n        }\n\n        return {\n            ...requestCopy,\n            headers,\n            query,\n        }\n    }\n\n    /**\n     * Serializes a HTTPRequest's query parameter bag into a string.\n     *\n     * @param query {QueryParameterBag} The query parameters to serialize.\n     * @param ignoreKeys {Set<string>} The keys to ignore.\n     * @returns {string} The serialized, and ready to use in a URL, query parameters.\n     */\n    private serializeQueryParameters(query: QueryParameterBag, ignoreKeys?: string[]): string {\n        const keys: Array<string> = []\n        const serialized: Record<string, string> = {}\n\n        for (const key of Object.keys(query).sort()) {\n            if (ignoreKeys?.includes(key.toLowerCase())) {\n                continue\n            }\n\n            keys.push(key)\n            const value = query[key]\n\n            if (typeof value === 'string') {\n                serialized[key] = `${escapeURI(key)}=${escapeURI(value)}`\n            } else if (Array.isArray(value)) {\n                serialized[key] = value\n                    .slice(0)\n                    .sort()\n                    .reduce(\n                        (encoded: Array<string>, value: string) =>\n                            encoded.concat([`${escapeURI(key)}=${escapeURI(value)}`]),\n                        []\n                    )\n                    .join('&')\n            }\n        }\n\n        return keys\n            .map((key) => serialized[key])\n            .filter((serialized) => serialized)\n            .join('&')\n    }\n}\n\n/**\n * Error indicating an Invalid signature has been sent to AWS services\n *\n * Inspired from AWS official error types, as\n * described in:\n *   * https://aws.amazon.com/blogs/developer/service-error-handling-modular-aws-sdk-js/\n *   * https://github.com/aws/aws-sdk-js/blob/master/lib/error.d.ts\n */\nexport class InvalidSignatureError extends AWSError {\n    /**\n     * Constructs an InvalidSignatureError\n     *\n     * @param  {string} message - human readable error message\n     */\n    constructor(message: string, code?: string) {\n        super(message, code)\n        this.name = 'InvalidSignatureError'\n    }\n}\n\nexport interface SignatureV4Options {\n    /**\n     * The name of the service to sign for.\n     */\n    service: string\n\n    /**\n     * The name of the region to sign for.\n     */\n    region: string\n\n    /**\n     * The credentials with which the request should be signed.\n     */\n    credentials: Credentials\n\n    /**\n     * Whether to uri-escape the request URI path as part of computing the\n     * canonical request string. This is required for every AWS service, except\n     * Amazon S3, as of late 2017.\n     *\n     * @default [true]\n     */\n    uriEscapePath?: boolean\n\n    /**\n     * Whether to calculate a checksum of the request body and include it as\n     * either a request header (when signing) or as a query string parameter\n     * (when presigning). This is required for AWS Glacier and Amazon S3 and optional for\n     * every other AWS service as of late 2017.\n     *\n     * @default [true]\n     */\n    applyChecksum?: boolean\n}\n\nexport interface SignOptions {\n    /**\n     * The date and time to be used as signature metadata. This value should be\n     * a Date object, a unix (epoch) timestamp, or a string that can be\n     * understood by the JavaScript `Date` constructor.If not supplied, the\n     * value returned by `new Date()` will be used.\n     */\n    signingDate?: Date\n\n    /**\n     * The service signing name. It will override the service name of the signer\n     * in current invocation\n     */\n    signingService?: string\n\n    /**\n     * The region name to sign the request. It will override the signing region of the\n     * signer in current invocation\n     */\n    signingRegion?: string\n}\n\nexport interface RequestSigningOptions extends SignOptions {\n    /**\n     * A set of strings whose members represents headers that cannot be signed.\n     * All headers in the provided request will have their names converted to\n     * lower case and then checked for existence in the unsignableHeaders set.\n     */\n    unsignableHeaders?: Set<string>\n\n    /**\n     * A set of strings whose members represents headers that should be signed.\n     * Any values passed here will override those provided via unsignableHeaders,\n     * allowing them to be signed.\n     *\n     * All headers in the provided request will have their names converted to\n     * lower case before signing.\n     */\n    signableHeaders?: Set<string>\n}\n\nexport interface PresignOptions extends RequestSigningOptions {\n    /**\n     * The number of seconds before the presigned URL expires\n     */\n    expiresIn?: number\n\n    /**\n     * A set of strings whose representing headers that should not be hoisted\n     * to presigned request's query string. If not supplied, the presigner\n     * moves all the AWS-specific headers (starting with `x-amz-`) to the request\n     * query string. If supplied, these headers remain in the presigned request's\n     * header.\n     * All headers in the provided request will have their names converted to\n     * lower case and then checked for existence in the unhoistableHeaders set.\n     */\n    unhoistableHeaders?: Set<string>\n}\n\nexport interface Credentials {\n    /**\n     * AWS access key ID\n     */\n    readonly accessKeyId: string\n\n    /**\n     * AWS secret access key\n     */\n    readonly secretAccessKey: string\n\n    /**\n     * A security or session token to use with these credentials. Usually\n     * present for temporary credentials.\n     */\n    readonly sessionToken?: string\n}\n\nexport interface DateInfo {\n    /**\n     * ISO8601 formatted date string\n     */\n    longDate: string\n\n    /**\n     * String in the format YYYYMMDD\n     */\n    shortDate: string\n}\n\n/**\n * Escapes a URI following the AWS signature v4 escaping rules.\n *\n * @param URI {string} The URI to escape.\n * @returns {string} The escaped URI.\n */\nfunction escapeURI(URI: string): string {\n    const hexEncode = (c: string): string => {\n        return `%${c.charCodeAt(0).toString(16).toUpperCase()}`\n    }\n\n    return encodeURIComponent(URI).replace(/[!'()*]/g, hexEncode)\n}\n\n/**\n * formatDate formats a Date object into a ISO8601 formatted date string\n * and a string in the format YYYYMMDD.\n *\n * @param date {Date} The date to format.\n * @returns {DateInfo} The formatted date.\n */\nfunction formatDate(date: Date): DateInfo {\n    const longDate = iso8601(date).replace(/[-:]/g, '')\n    return {\n        longDate,\n        shortDate: longDate.slice(0, 8),\n    }\n}\n\n/**\n * Formats a time into an ISO 8601 string.\n *\n * @see https://en.wikipedia.org/wiki/ISO_8601\n *\n * @param time {number | string | Date} The time to format.\n * @returns {string} The ISO 8601 formatted time.\n */\nfunction iso8601(time: number | string | Date): string {\n    return toDate(time)\n        .toISOString()\n        .replace(/\\.\\d{3}Z$/, 'Z')\n}\n\n/**\n * Converts a time value into a Date object.\n *\n * @param time {number | string | Date} The time to convert.\n * @returns {Date} The resulting Date object.\n */\nfunction toDate(time: number | string | Date): Date {\n    if (typeof time === 'number') {\n        return new Date(time * 1000)\n    }\n\n    if (typeof time === 'string') {\n        if (Number(time)) {\n            return new Date(Number(time) * 1000)\n        }\n\n        return new Date(time)\n    }\n\n    return time\n}\n","/**\n *\n * @param value\n * @returns\n */\nexport function isArrayBuffer(value: unknown): value is ArrayBuffer {\n    return (\n        typeof ArrayBuffer === 'function' &&\n        (value instanceof ArrayBuffer ||\n            Object.prototype.toString.call(value) === '[object ArrayBuffer]')\n    )\n}\n\nexport function toFormUrlEncoded(form: Record<string, string | number | boolean>): string {\n    return Object.keys(form)\n        .reduce((params, key) => {\n            const value = form[key]\n            if (value !== undefined && value !== null) {\n                params.push(`${encodeURIComponent(key)}=${encodeURIComponent(value)}`)\n            }\n            return params\n        }, [] as string[])\n        .join('&')\n}\n","module.exports = require(\"k6/crypto\");","module.exports = require(\"k6/html\");","module.exports = require(\"k6/http\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { AWSClient } from './client'\nimport { AWSConfig } from './config'\nimport { InvalidSignatureError, SignatureV4 } from './signature'\nimport { HTTPHeaders, SignedHTTPRequest } from './http'\nimport http, { RefinedResponse, ResponseType } from 'k6/http'\nimport { toFormUrlEncoded } from './utils'\nimport { AWSError } from './error'\n\nconst API_VERSION = '2012-11-05'\n\nexport class SQSClient extends AWSClient {\n    private readonly signature: SignatureV4\n    private readonly commonHeaders: HTTPHeaders\n\n    constructor(awsConfig: AWSConfig) {\n        super(awsConfig, 'sqs')\n\n        this.signature = new SignatureV4({\n            service: this.serviceName,\n            region: this.awsConfig.region,\n            credentials: {\n                accessKeyId: this.awsConfig.accessKeyId,\n                secretAccessKey: this.awsConfig.secretAccessKey,\n                sessionToken: this.awsConfig.sessionToken,\n            },\n            uriEscapePath: true,\n            applyChecksum: true,\n        })\n\n        this.commonHeaders = {\n            'Content-Type': 'application/x-www-form-urlencoded',\n        }\n    }\n\n    /**\n     * Delivers a message to the specified queue.\n     *\n     * @param {string} queueUrl - The URL of the Amazon SQS queue to which a message is sent. Queue URLs and names are case-sensitive.\n     * @param {string} messageBody - The message to send. The minimum size is one character. The maximum size is 256 KB.\n     * @param {Object} options - Options for the request\n     * @param {string} [options.messageDeduplicationId] - The message deduplication id.\n     * @param {string} [options.messageGroupId] - The message group ID for FIFO queues\n     * @returns {Message} - The message that was sent.\n     */\n    async sendMessage(\n        queueUrl: string,\n        messageBody: string,\n        options: SendMessageOptions = {}\n    ): Promise<Message> {\n        const method = 'POST'\n\n        let body: object = {\n            Action: 'SendMessage',\n            Version: API_VERSION,\n            QueueUrl: queueUrl,\n            MessageBody: messageBody,\n        }\n\n        if (typeof options.messageDeduplicationId !== 'undefined') {\n            body = { ...body, MessageDeduplicationId: options.messageDeduplicationId }\n        }\n\n        if (typeof options.messageGroupId !== 'undefined') {\n            body = { ...body, MessageGroupId: options.messageGroupId }\n        }\n\n        if (typeof options.messageAttributes !== 'undefined') {\n            /*\n             * A single message attribute is represented as 3 separate parameters: name, value, and type.\n             * The name of the value parameter varies based on the data type.\n             * See https://docs.aws.amazon.com/AWSSimpleQueueService/latest/APIReference/API_SendMessage.html#SQS-SendMessage-request-MessageAttributes\n             * for more information.\n             */\n            const attributeParameters = Object.entries(options.messageAttributes).reduce(\n                (params, [name, attribute], i) => {\n                    const valueParameterSuffix =\n                        attribute.type === 'Binary' ? 'BinaryValue' : 'StringValue'\n                    return Object.assign(params, {\n                        [`MessageAttribute.${i + 1}.Name`]: name,\n                        [`MessageAttribute.${i + 1}.Value.${valueParameterSuffix}`]:\n                            attribute.value,\n                        [`MessageAttribute.${i + 1}.Value.DataType`]: attribute.type,\n                    })\n                },\n                {} as Record<string, string>\n            )\n            body = { ...body, ...attributeParameters }\n        }\n\n        if (typeof options.delaySeconds !== 'undefined') {\n            body = { ...body, DelaySeconds: options.delaySeconds }\n        }\n\n        const signedRequest: SignedHTTPRequest = this.signature.sign(\n            {\n                method: 'POST',\n                endpoint: this.endpoint,\n                path: '/',\n                headers: {\n                    ...this.commonHeaders,\n                },\n                body: toFormUrlEncoded(body),\n            },\n            {}\n        )\n\n        const res = await http.asyncRequest(method, signedRequest.url, signedRequest.body || '', {\n            headers: signedRequest.headers,\n        })\n        this._handleError('SendMessage', res)\n\n        const parsed = res.html('SendMessageResponse > SendMessageResult')\n        return new Message(parsed.find('MessageId').text(), parsed.find('MD5OfMessageBody').text())\n    }\n\n    /**\n     * Returns a list of your queues in the current region.\n     *\n     * @param {ListQueuesRequestParameters} [parameters={}] request parameters\n     * @param {number} [ListQueuesRequestParameters.maxResults] Maximum number of results to include in the response. Value range is 1 to 1000. You must set maxResults to receive a value for nextToken in the response.\n     * @param {string} [ListQueuesRequestParameters.nextToken] Pagination token to request the next set of results.\n     * @param {string} [ListQueuesRequestParameters.queueNamePrefix] A string to use for filtering the list results. Only those queues whose name begins with the specified string are returned.\n     * @returns {Object}\n     * @returns {string[]} Object.queueUrls - A list of queue URLs, up to 1000 entries.\n     * @returns {string} [Object.nextToken] - In the future, you can use NextToken to request the next set of results.\n     */\n    async listQueues(parameters: ListQueuesRequestParameters = {}): Promise<ListQueuesResponse> {\n        const method = 'POST'\n\n        let body: object = {\n            Action: 'ListQueues',\n            Version: API_VERSION,\n        }\n\n        if (typeof parameters?.maxResults !== 'undefined') {\n            body = { ...body, MaxResults: parameters.maxResults }\n        }\n\n        if (typeof parameters?.nextToken !== 'undefined') {\n            body = { ...body, NextToken: parameters.nextToken }\n        }\n\n        if (typeof parameters?.queueNamePrefix !== 'undefined') {\n            body = { ...body, QueueNamePrefix: parameters.queueNamePrefix }\n        }\n\n        const signedRequest: SignedHTTPRequest = this.signature.sign(\n            {\n                method: 'POST',\n                endpoint: this.endpoint,\n                path: '/',\n                headers: {\n                    ...this.commonHeaders,\n                    Host: this.endpoint.host,\n                },\n                body: toFormUrlEncoded(body),\n            },\n            {}\n        )\n\n        const res = await http.asyncRequest(method, signedRequest.url, signedRequest.body || '', {\n            headers: signedRequest.headers,\n        })\n        this._handleError('ListQueues', res)\n\n        const parsed = res.html()\n        return {\n            urls: parsed\n                .find('QueueUrl')\n                .toArray()\n                .map((e) => e.text()),\n            nextToken: parsed.find('NextToken').text() || undefined,\n        }\n    }\n\n    private _handleError(\n        operation: SQSOperation,\n        response: RefinedResponse<ResponseType | undefined>\n    ) {\n        const errorCode: number = response.error_code\n        const errorMessage: string = response.error\n\n        if (errorMessage == '' && errorCode === 0) {\n            return\n        }\n\n        const awsError = AWSError.parseXML(response.body as string)\n        switch (awsError.code) {\n            case 'AuthorizationHeaderMalformed':\n                throw new InvalidSignatureError(awsError.message, awsError.code)\n            default:\n                throw new SQSServiceError(awsError.message, awsError.code || 'unknown', operation)\n        }\n    }\n}\n\n/**\n * An Amazon SQS message.\n */\nexport class Message {\n    /**\n     * A unique identifier for the message.\n     * A MessageIdis considered unique across all AWS accounts for an extended period of time.\n     */\n    id: string\n\n    /**\n     * An MD5 digest of the non-URL-encoded message body string.\n     */\n    bodyMD5: string\n\n    /**\n     * Instantiates a new Message object.\n     *\n     * @param id\n     * @param md5Ofbody\n     */\n    constructor(id: string, bodyMD5: string) {\n        this.id = id\n        this.bodyMD5 = bodyMD5\n    }\n}\n\n/**\n * SQSServiceError indicates an error occurred while interacting with the SQS API.\n */\nexport class SQSServiceError extends AWSError {\n    operation: SQSOperation\n\n    constructor(message: string, code: string, operation: SQSOperation) {\n        super(message, code)\n        this.name = 'SQSServiceError'\n        this.operation = operation\n    }\n}\n\n/**\n * SQSOperation describes possible SQS operations.\n */\ntype SQSOperation = 'ListQueues' | 'SendMessage'\n\nexport interface SendMessageOptions {\n    /**\n     * The message deduplication ID for FIFO queues\n     */\n    messageDeduplicationId?: string\n\n    /**\n     * The message group ID for FIFO queues\n     */\n    messageGroupId?: string\n\n    /**\n     * The message attributes\n     */\n    messageAttributes?: {\n        [name: string]: { type: 'String' | 'Number' | 'Binary'; value: string }\n    }\n\n    /**\n     * The length of time, in seconds, for which to delay a specific message.\n     */\n    delaySeconds?: number\n}\n\nexport interface ListQueuesRequestParameters {\n    /**\n     * Maximum number of results to include in the response. Value range is 1 to 1000.\n     */\n    maxResults?: number\n    /**\n     * Pagination token to request the next set of results.\n     */\n    nextToken?: string\n    /**\n     * A string to use for filtering the list results. Only those queues whose name begins with the specified string are returned.\n     * Queue URLs and names are case-sensitive.\n     */\n    queueNamePrefix?: string\n}\n\nexport interface ListQueuesResponse {\n    /**\n     * A list of queue URLs, up to 1,000 entries, or the value of MaxResults you sent in the request.\n     */\n    urls: string[]\n    /**\n     * Pagination token to include in the next request.\n     */\n    nextToken?: string\n}\n"],"names":["AWSClient","awsConfig","serviceName","_classCallCheck","_defineProperty","this","undefined","endpoint","_endpoint","key","get","Endpoint","concat","region","set","AWSConfig","options","InvalidAWSConfigError","accessKeyId","length","secretAccessKey","sessionToken","_createClass","value","__ENV","AWS_REGION","AWS_ACCESS_KEY_ID","AWS_SECRET_ACCESS_KEY","AWS_SESSION_TOKEN","_Error","message","_callSuper","_inherits","_wrapNativeSuper","Error","AMZ_ALGORITHM_QUERY_PARAM","AMZ_CREDENTIAL_QUERY_PARAM","AMZ_DATE_QUERY_PARAM","AMZ_EXPIRES_QUERY_PARAM","AMZ_SIGNATURE_QUERY_PARAM","AMZ_SIGNED_HEADERS_QUERY_PARAM","AMZ_TOKEN_QUERY_PARAM","AMZ_CONTENT_SHA256_HEADER","AMZ_DATE_HEADER","toLowerCase","AMZ_SIGNATURE_HEADER","AMZ_TOKEN_HEADER","AUTHORIZATION_HEADER","GENERATED_HEADERS","HOST_HEADER","ALWAYS_UNSIGNABLE_HEADERS","authorization","connection","expect","from","pragma","referer","te","trailer","upgrade","KEY_TYPE_IDENTIFIER","SIGNING_ALGORITHM_IDENTIFIER","MAX_PRESIGNED_TTL","EMPTY_SHA256","UNSIGNED_PAYLOAD","completeUrl","startsWith","DEFAULT_PROTOCOL","protocolMatch","match","hostnameWithPort","_slicedToArray","replace","split","_protocol","slice","_hostname","_port","parseInt","href","_value$split2","hostname","port","protocol","host","AWSError","code","_this","name","xmlDocument","doc","parseHTML","find","text","response","headers","error","json","Message","__type","parseXML","body","hasHeader","soughtHeader","_i","_Object$keys","Object","keys","SignatureV4","_ref","service","credentials","uriEscapePath","applyChecksum","request","arguments","finalOptions","_objectSpread","signingDate","Date","unsignableHeaders","Set","signableHeaders","_formatDate","formatDate","longDate","shortDate","signingService","signingRegion","scope","constants","headerName","indexOf","ArrayBuffer","isView","buffer","payloadHash","computePayloadHash","canonicalHeaders","computeCanonicalHeaders","signature","calculateSignature","deriveSigningKey","createCanonicalRequest","sort","join","url","path","query","serializeQueryParameters","originalRequest","_options$signingDate","_options$expiresIn","expiresIn","unhoistableHeaders","_formatDate2","InvalidSignatureError","moveHeadersToQuery","toString","signingKey","canonicalRequest","sortedHeaders","sortedCanonicalHeaders","map","signedHeaders","method","computeCanonicalURI","computeCanonicalQuerystring","credentialScope","hashedCanonicalRequest","crypto","stringToSign","createStringToSign","kSecret","kDate","kRegion","kService","_ref2","_step","normalizedURISegments","_iterator","_createForOfIteratorHelper","s","n","done","URISegment","pop","push","err","e","f","leading","URI","trailing","endsWith","normalizedURI","encodeURIComponent","_ref3","_step2","_ref3$query","serialized","_loop","escapeURI","Array","isArray","reduce","encoded","_iterator2","filter","_ref4","_step3","_iterator3","canonicalHeaderName","has","trim","_ref5","isArrayBuffer","requestCopy","JSON","parse","stringify","_requestCopy$query","_i2","_Object$keys2","_options$unhoistableH","lowerCaseName","ignoreKeys","_step4","_loop2","includes","_iterator4","_AWSError","c","charCodeAt","toUpperCase","date","time","Number","toDate","toISOString","prototype","call","toFormUrlEncoded","form","params","module","exports","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","getter","__esModule","d","a","definition","o","defineProperty","enumerable","obj","prop","hasOwnProperty","r","Symbol","toStringTag","_regeneratorRuntime","t","i","iterator","asyncIterator","u","define","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","h","l","y","GeneratorFunction","GeneratorFunctionPrototype","p","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","_typeof","resolve","__await","then","callInvokeWithMethodAndArg","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","resetTryEntry","completion","reset","isNaN","displayName","isGeneratorFunction","constructor","mark","setPrototypeOf","__proto__","awrap","async","Promise","reverse","prev","charAt","stop","rval","handle","complete","finish","delegateYield","arr","_arrayWithHoles","_iterableToArrayLimit","minLen","_arrayLikeToArray","test","_unsupportedIterableToArray","_nonIterableRest","len","arr2","ownKeys","getOwnPropertySymbols","getOwnPropertyDescriptor","apply","getOwnPropertyDescriptors","defineProperties","asyncGeneratorStep","gen","reject","_next","_throw","info","_asyncToGenerator","fn","self","args","instance","Constructor","_defineProperties","target","props","descriptor","_toPropertyKey","protoProps","staticProps","_getPrototypeOf","ReferenceError","_assertThisInitialized","_possibleConstructorReturn","_isNativeReflectConstruct","Reflect","construct","Boolean","valueOf","bind","subClass","superClass","_setPrototypeOf","toPrimitive","String","_toPrimitive","API_VERSION","SQSClient","_AWSClient","commonHeaders","_sendMessage","_callee","queueUrl","messageBody","attributeParameters","signedRequest","res","parsed","_args","_context","Action","Version","QueueUrl","MessageBody","messageDeduplicationId","MessageDeduplicationId","messageGroupId","MessageGroupId","messageAttributes","entries","attribute","valueParameterSuffix","assign","delaySeconds","DelaySeconds","sign","http","_handleError","html","_x","_x2","_listQueues","_callee2","parameters","_args2","_context2","maxResults","MaxResults","nextToken","NextToken","queueNamePrefix","QueueNamePrefix","Host","urls","toArray","operation","errorCode","error_code","awsError","SQSServiceError","id","bodyMD5","_this2"],"sourceRoot":""}