{"version":3,"file":"secrets-manager.js","mappings":"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","sources":["webpack://k6-jslib-aws/./node_modules/uuid/index.js","webpack://k6-jslib-aws/./node_modules/uuid/lib/bytesToUuid.js","webpack://k6-jslib-aws/./node_modules/uuid/lib/rng-browser.js","webpack://k6-jslib-aws/./node_modules/uuid/v1.js","webpack://k6-jslib-aws/./node_modules/uuid/v4.js","webpack://k6-jslib-aws/webpack/bootstrap","webpack://k6-jslib-aws/webpack/runtime/compat get default export","webpack://k6-jslib-aws/webpack/runtime/define property getters","webpack://k6-jslib-aws/webpack/runtime/hasOwnProperty shorthand","webpack://k6-jslib-aws/webpack/runtime/make namespace object","webpack://k6-jslib-aws/./src/internal/endpoint.ts","webpack://k6-jslib-aws/./src/internal/config.ts","webpack://k6-jslib-aws/external commonjs \"k6/crypto\"","webpack://k6-jslib-aws/./src/internal/constants.ts","webpack://k6-jslib-aws/external commonjs \"k6/html\"","webpack://k6-jslib-aws/./src/internal/error.ts","webpack://k6-jslib-aws/./src/internal/signature.ts","webpack://k6-jslib-aws/./src/internal/http.ts","webpack://k6-jslib-aws/./src/internal/utils.ts","webpack://k6-jslib-aws/external commonjs \"k6/http\"","webpack://k6-jslib-aws/./src/internal/secrets-manager.ts","webpack://k6-jslib-aws/./src/internal/client.ts"],"sourcesContent":["var v1 = require('./v1');\nvar v4 = require('./v4');\n\nvar uuid = v4;\nuuid.v1 = v1;\nuuid.v4 = v4;\n\nmodule.exports = uuid;\n","/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\nvar byteToHex = [];\nfor (var i = 0; i < 256; ++i) {\n  byteToHex[i] = (i + 0x100).toString(16).substr(1);\n}\n\nfunction bytesToUuid(buf, offset) {\n  var i = offset || 0;\n  var bth = byteToHex;\n  // join used to fix memory issue caused by concatenation: https://bugs.chromium.org/p/v8/issues/detail?id=3175#c4\n  return ([\n    bth[buf[i++]], bth[buf[i++]],\n    bth[buf[i++]], bth[buf[i++]], '-',\n    bth[buf[i++]], bth[buf[i++]], '-',\n    bth[buf[i++]], bth[buf[i++]], '-',\n    bth[buf[i++]], bth[buf[i++]], '-',\n    bth[buf[i++]], bth[buf[i++]],\n    bth[buf[i++]], bth[buf[i++]],\n    bth[buf[i++]], bth[buf[i++]]\n  ]).join('');\n}\n\nmodule.exports = bytesToUuid;\n","// Unique ID creation requires a high quality random # generator.  In the\n// browser this is a little complicated due to unknown quality of Math.random()\n// and inconsistent support for the `crypto` API.  We do the best we can via\n// feature-detection\n\n// getRandomValues needs to be invoked in a context where \"this\" is a Crypto\n// implementation. Also, find the complete implementation of crypto on IE11.\nvar getRandomValues = (typeof(crypto) != 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto)) ||\n                      (typeof(msCrypto) != 'undefined' && typeof window.msCrypto.getRandomValues == 'function' && msCrypto.getRandomValues.bind(msCrypto));\n\nif (getRandomValues) {\n  // WHATWG crypto RNG - http://wiki.whatwg.org/wiki/Crypto\n  var rnds8 = new Uint8Array(16); // eslint-disable-line no-undef\n\n  module.exports = function whatwgRNG() {\n    getRandomValues(rnds8);\n    return rnds8;\n  };\n} else {\n  // Math.random()-based (RNG)\n  //\n  // If all else fails, use Math.random().  It's fast, but is of unspecified\n  // quality.\n  var rnds = new Array(16);\n\n  module.exports = function mathRNG() {\n    for (var i = 0, r; i < 16; i++) {\n      if ((i & 0x03) === 0) r = Math.random() * 0x100000000;\n      rnds[i] = r >>> ((i & 0x03) << 3) & 0xff;\n    }\n\n    return rnds;\n  };\n}\n","var rng = require('./lib/rng');\nvar bytesToUuid = require('./lib/bytesToUuid');\n\n// **`v1()` - Generate time-based UUID**\n//\n// Inspired by https://github.com/LiosK/UUID.js\n// and http://docs.python.org/library/uuid.html\n\nvar _nodeId;\nvar _clockseq;\n\n// Previous uuid creation time\nvar _lastMSecs = 0;\nvar _lastNSecs = 0;\n\n// See https://github.com/uuidjs/uuid for API details\nfunction v1(options, buf, offset) {\n  var i = buf && offset || 0;\n  var b = buf || [];\n\n  options = options || {};\n  var node = options.node || _nodeId;\n  var clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq;\n\n  // node and clockseq need to be initialized to random values if they're not\n  // specified.  We do this lazily to minimize issues related to insufficient\n  // system entropy.  See #189\n  if (node == null || clockseq == null) {\n    var seedBytes = rng();\n    if (node == null) {\n      // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)\n      node = _nodeId = [\n        seedBytes[0] | 0x01,\n        seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]\n      ];\n    }\n    if (clockseq == null) {\n      // Per 4.2.2, randomize (14 bit) clockseq\n      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;\n    }\n  }\n\n  // UUID timestamps are 100 nano-second units since the Gregorian epoch,\n  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so\n  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'\n  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.\n  var msecs = options.msecs !== undefined ? options.msecs : new Date().getTime();\n\n  // Per 4.2.1.2, use count of uuid's generated during the current clock\n  // cycle to simulate higher resolution clock\n  var nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1;\n\n  // Time since last uuid creation (in msecs)\n  var dt = (msecs - _lastMSecs) + (nsecs - _lastNSecs)/10000;\n\n  // Per 4.2.1.2, Bump clockseq on clock regression\n  if (dt < 0 && options.clockseq === undefined) {\n    clockseq = clockseq + 1 & 0x3fff;\n  }\n\n  // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new\n  // time interval\n  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {\n    nsecs = 0;\n  }\n\n  // Per 4.2.1.2 Throw error if too many uuids are requested\n  if (nsecs >= 10000) {\n    throw new Error('uuid.v1(): Can\\'t create more than 10M uuids/sec');\n  }\n\n  _lastMSecs = msecs;\n  _lastNSecs = nsecs;\n  _clockseq = clockseq;\n\n  // Per 4.1.4 - Convert from unix epoch to Gregorian epoch\n  msecs += 12219292800000;\n\n  // `time_low`\n  var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;\n  b[i++] = tl >>> 24 & 0xff;\n  b[i++] = tl >>> 16 & 0xff;\n  b[i++] = tl >>> 8 & 0xff;\n  b[i++] = tl & 0xff;\n\n  // `time_mid`\n  var tmh = (msecs / 0x100000000 * 10000) & 0xfffffff;\n  b[i++] = tmh >>> 8 & 0xff;\n  b[i++] = tmh & 0xff;\n\n  // `time_high_and_version`\n  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version\n  b[i++] = tmh >>> 16 & 0xff;\n\n  // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)\n  b[i++] = clockseq >>> 8 | 0x80;\n\n  // `clock_seq_low`\n  b[i++] = clockseq & 0xff;\n\n  // `node`\n  for (var n = 0; n < 6; ++n) {\n    b[i + n] = node[n];\n  }\n\n  return buf ? buf : bytesToUuid(b);\n}\n\nmodule.exports = v1;\n","var rng = require('./lib/rng');\nvar bytesToUuid = require('./lib/bytesToUuid');\n\nfunction v4(options, buf, offset) {\n  var i = buf && offset || 0;\n\n  if (typeof(options) == 'string') {\n    buf = options === 'binary' ? new Array(16) : null;\n    options = null;\n  }\n  options = options || {};\n\n  var rnds = options.random || (options.rng || rng)();\n\n  // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n  rnds[6] = (rnds[6] & 0x0f) | 0x40;\n  rnds[8] = (rnds[8] & 0x3f) | 0x80;\n\n  // Copy bytes to buffer, if provided\n  if (buf) {\n    for (var ii = 0; ii < 16; ++ii) {\n      buf[i + ii] = rnds[ii];\n    }\n  }\n\n  return buf || bytesToUuid(rnds);\n}\n\nmodule.exports = v4;\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/**\n * Represents an AWS service endpoint, providing utilities for parsing and handling URL details.\n */\nexport class Endpoint {\n    private _protocol: string\n    private _hostname: string\n    private _port?: number\n\n    // Default protocol, this can be globally changed as per application requirements\n    private static readonly DEFAULT_PROTOCOL = 'https' // Set this as per AWS.config\n\n    /**\n    //  * Constructs a new Endpoint instance.\n     *\n     * @param {string} endpoint - The URL to construct an endpoint from. If the URL omits a protocol, the default protocol will be used.\n     */\n    constructor(endpoint: string) {\n        const isDefaultProtocol =\n            !endpoint.startsWith('http://') && !endpoint.startsWith('https://')\n        const completeUrl = isDefaultProtocol\n            ? `${Endpoint.DEFAULT_PROTOCOL}://${endpoint}`\n            : endpoint\n\n        const protocolMatch = completeUrl.match(/^https?:/)\n        const hostAndPath = completeUrl.replace(/^https?:\\/\\//, '')\n        const [hostnameWithPort] = hostAndPath.split('/')\n\n        this._protocol = protocolMatch ? protocolMatch[0].slice(0, -1) : Endpoint.DEFAULT_PROTOCOL\n        this._hostname = hostnameWithPort.split(':')[0]\n        this._port = hostnameWithPort.split(':')[1]\n            ? parseInt(hostnameWithPort.split(':')[1])\n            : undefined\n    }\n\n    /**\n     * Creates a new Endpoint instance that is a copy of the current one.\n     *\n     * @returns {Endpoint} The copied Endpoint.\n     */\n    public copy(): Endpoint {\n        return new Endpoint(this.href)\n    }\n\n    /**\n     * Gets the host portion of the endpoint including the port.\n     *\n     * @returns {string} The host portion of the endpoint including the port.\n     */\n    public get host(): string {\n        return this._port ? `${this._hostname}:${this._port}` : this._hostname\n    }\n\n    /**\n     * Sets the host portion of the endpoint including the port.\n     *\n     * @param {string} value - The value to set for the host.\n     */\n    public set host(value: string) {\n        const [hostname, port] = value.split(':')\n        this._hostname = hostname\n        this._port = port ? parseInt(port) : undefined\n    }\n\n    /**\n     * Gets the host portion of the endpoint without the port.\n     *\n     * @returns {string} The host portion of the endpoint.\n     */\n    public get hostname(): string {\n        return this._hostname\n    }\n\n    /**\n     * Sets the host portion of the endpoint without the port.\n     *\n     * @param {string} value - The value to set for the hostname.\n     */\n    public set hostname(value: string) {\n        this._hostname = value\n    }\n\n    /**\n     * Gets the full URL of the endpoint.\n     *\n     * @returns {string} The full URL of the endpoint.\n     */\n    public get href(): string {\n        return `${this.protocol}://${this.host}`\n    }\n\n    /**\n     * Sets the full URL of the endpoint.\n     *\n     * @param {string} value - The value to set for the full URL.\n     */\n    public set href(value: string) {\n        const protocolMatch = value.match(/^https?:/)\n        const withoutProtocol = value.replace(/^https?:\\/\\//, '')\n        const [hostnameWithPort] = withoutProtocol.split('/')\n\n        this._protocol = protocolMatch ? protocolMatch[0].slice(0, -1) : Endpoint.DEFAULT_PROTOCOL // remove the trailing colon\n        this._hostname = hostnameWithPort.split(':')[0]\n        this._port = hostnameWithPort.split(':')[1]\n            ? parseInt(hostnameWithPort.split(':')[1])\n            : undefined\n    }\n\n    /**\n     * Gets the port of the endpoint.\n     *\n     * @returns {number|undefined} The port of the endpoint.\n     */\n    public get port(): number | undefined {\n        return this._port\n    }\n\n    /**\n     * Sets the port of the endpoint.\n     *\n     * @param {number|undefined} value - The value to set for the port.\n     */\n    public set port(value: number | undefined) {\n        this._port = value\n    }\n\n    /**\n     * Gets the protocol (http or https) of the endpoint URL.\n     *\n     * @returns {string} The protocol of the endpoint URL.\n     */\n    public get protocol(): string {\n        return this._protocol\n    }\n\n    /**\n     * Sets the protocol (http or https) of the endpoint URL.\n     *\n     * @param {string} value - The value to set for the protocol.\n     */\n    public set protocol(value: string) {\n        this._protocol = value\n    }\n}\n","import { HTTPScheme } from './http'\nimport { Endpoint } from './endpoint'\n\n/** Class holding an AWS connection information */\nexport class AWSConfig {\n    /**\n     * The AWS region to connect to, as listed: https://docs.aws.amazon.com/general/latest/gr/rande.html\n     *\n     * @type {string}\n     */\n    region: string\n\n    /**\n     * Your user's AWS access key id credential.\n     *\n     * @type {string}\n     */\n    accessKeyId: string\n\n    /**\n     * Your user's AWS secret access key credential.\n     *\n     * @type {string}\n     */\n    secretAccessKey: string\n\n    /**\n     * Your user's AWS session token credential.\n     *\n     * @type {string}\n     */\n    sessionToken?: string\n\n    /**\n     * The AWS hostname to connect to.\n     *\n     * @type {string} ['amazonaws.com']\n     */\n    endpoint?: Endpoint\n\n    /**\n     * fromEnvironment creates an AWSConfig from the environment variables.\n     *\n     * It expects to find the following compulsory environment variables:\n     *  * AWS_REGION\n     *  * AWS_ACCESS_KEY_ID\n     *  * AWS_SECRET_ACCESS_KEY\n     *\n     * If set, the following optional environment variables are also used:\n     *  * AWS_SESSION_TOKEN\n     *\n     * Finally, the options parameter allows to explicitly set the scheme and endpoint\n     * to use when connecting to AWS.\n     *\n     * @param options {AWSConnectionOptions}\n     * @returns\n     */\n    static fromEnvironment(options?: AWSConnectionOptions): AWSConfig {\n        const region = __ENV.AWS_REGION\n        const accessKeyId = __ENV.AWS_ACCESS_KEY_ID\n        const secretAccessKey = __ENV.AWS_SECRET_ACCESS_KEY\n        const sessionToken: string | undefined = __ENV.AWS_SESSION_TOKEN\n        const endpoint: Endpoint | string | undefined = options?.endpoint\n\n        return new AWSConfig({\n            region,\n            accessKeyId,\n            secretAccessKey,\n            sessionToken,\n            endpoint: endpoint,\n        })\n    }\n\n    /**\n     * Create an AWSConfig.\n     *\n     * @param {AWSConfigOptions} options - configuration attributes to use when interacting with AWS' APIs\n     * @throws {InvalidArgumentException}\n     */\n    constructor(options: AWSConfigOptions) {\n        if (!options.region || options.region === '') {\n            throw new InvalidAWSConfigError(\n                `invalid AWS region; reason: expected a valid AWS region name (e.g. \"us-east-1\"), got \\`${options.region}\\``\n            )\n        }\n\n        if (!options.accessKeyId || options.accessKeyId === '') {\n            throw new InvalidAWSConfigError(\n                `invalid AWS access key ID; reason: expected a non empty string, got \\`${options.accessKeyId}\\``\n            )\n        }\n\n        if (options.accessKeyId.length < 16 || options.accessKeyId.length > 128) {\n            throw new InvalidAWSConfigError(\n                `invalid AWS access key ID; reason: size should be between 16 and 128 characters, got ${options.accessKeyId.length}`\n            )\n        }\n\n        if (!options.secretAccessKey || options.secretAccessKey === '') {\n            throw new InvalidAWSConfigError(\n                `invalid AWS secret access key; reason: expected a non empty string, got \\`${options.secretAccessKey}\\``\n            )\n        }\n\n        this.region = options.region\n        this.accessKeyId = options.accessKeyId\n        this.secretAccessKey = options.secretAccessKey\n\n        if (options.sessionToken !== undefined) {\n            this.sessionToken = options.sessionToken\n        }\n\n        if (options.endpoint !== undefined) {\n            if (typeof options.endpoint === 'string') {\n                this.endpoint = new Endpoint(options.endpoint)\n            } else {\n                this.endpoint = options.endpoint\n            }\n        }\n    }\n}\n\n/**\n * Interface representing AWSConfig options\n */\nexport interface AWSConfigOptions extends AWSConnectionOptions {\n    /**\n     * The AWS region to connect to, as listed: https://docs.aws.amazon.com/general/latest/gr/rande.html\n     *\n     * @type {string}\n     */\n    region: string\n\n    /**\n     * Your user's AWS access key id credential.\n     *\n     * @type {string}\n     */\n    accessKeyId: string\n\n    /**\n     * Your user's AWS secret access key credential.\n     *\n     * @type {string}\n     */\n    secretAccessKey: string\n\n    /**\n     * Your user's AWS session token credential.\n     *\n     * @type {string}\n     */\n    sessionToken?: string\n}\n\n/**\n * Interface representing AWS connection options\n */\nexport interface AWSConnectionOptions {\n    /**\n     * The HTTP scheme to use when connecting to AWS.\n     *\n     * @type {HTTPScheme}\n     */\n    scheme?: HTTPScheme\n\n    /**\n     * The AWS hostname to connect to.\n     *\n     * @type {string}\n     */\n    endpoint?: Endpoint | string\n}\n\n/** Class representing an invalid AWS configuration */\nexport class InvalidAWSConfigError extends Error {\n    constructor(message: string) {\n        super(message)\n    }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"k6/crypto\");","/**\n * Standard Amazon AWS query parameter names\n */\nexport const AMZ_ALGORITHM_QUERY_PARAM = 'X-Amz-Algorithm'\nexport const AMZ_CREDENTIAL_QUERY_PARAM = 'X-Amz-Credential'\nexport const AMZ_DATE_QUERY_PARAM = 'X-Amz-Date'\nexport const AMZ_EXPIRES_QUERY_PARAM = 'X-Amz-Expires'\nexport const AMZ_SIGNATURE_QUERY_PARAM = 'X-Amz-Signature'\nexport const AMZ_SIGNED_HEADERS_QUERY_PARAM = 'X-Amz-SignedHeaders'\nexport const AMZ_TARGET_QUERY_PARAM = 'X-Amz-Target'\nexport const AMZ_TOKEN_QUERY_PARAM = 'X-Amz-Security-Token'\n\n/**\n * Standard Amazon AWS header names\n */\nexport const AMZ_CONTENT_SHA256_HEADER = 'x-amz-content-sha256'\nexport const AMZ_DATE_HEADER = AMZ_DATE_QUERY_PARAM.toLowerCase()\nexport const AMZ_SIGNATURE_HEADER = AMZ_SIGNATURE_QUERY_PARAM.toLowerCase()\nexport const AMZ_TARGET_HEADER = AMZ_TARGET_QUERY_PARAM.toLowerCase()\nexport const AMZ_TOKEN_HEADER = AMZ_TOKEN_QUERY_PARAM.toLowerCase()\n\n/**\n * Common HTTP headers we rely on in the signing process\n */\nexport const AUTHORIZATION_HEADER = 'authorization'\nexport const DATE_HEADER = 'date'\n\n/**\n * Lists the headers that are generated as part of the signature process.\n */\nexport const GENERATED_HEADERS = [AUTHORIZATION_HEADER, AMZ_DATE_HEADER, DATE_HEADER]\nexport const HOST_HEADER = 'host'\n\n/**\n * Lists the headers that should never be included in the\n * request signature signature process.\n */\nexport const ALWAYS_UNSIGNABLE_HEADERS = {\n    authorization: true,\n    'cache-control': true,\n    connection: true,\n    expect: true,\n    from: true,\n    'keep-alive': true,\n    'max-forwards': true,\n    pragma: true,\n    referer: true,\n    te: true,\n    trailer: true,\n    'transfer-encoding': true,\n    upgrade: true,\n    'user-agent': true,\n    'x-amzn-trace-id': true,\n}\n\n/**\n * Signature specific constants included in the signing process\n */\nexport const KEY_TYPE_IDENTIFIER = 'aws4_request'\nexport const SIGNING_ALGORITHM_IDENTIFIER = 'AWS4-HMAC-SHA256'\n\n/**\n * Maximum time to live of a signed request in seconds: 7 days.\n */\nexport const MAX_PRESIGNED_TTL = 60 * 60 * 24 * 7\n\n/**\n * SHA256 hash of an empty string (so we don't waste cycles recomputing it)\n */\nexport const EMPTY_SHA256 = 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\n\n/**\n * SHA256 hash of the unsigned payload constant (so we don't waste cycles recomputing it)\n */\nexport const UNSIGNED_PAYLOAD_SHA256 =\n    '5a41b0751e4537c6ff868564ab44a4d4ecceec2ec5b1c5f74d97422968e04237'\n\nexport const UNSIGNED_PAYLOAD = 'UNSIGNED-PAYLOAD'\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"k6/html\");","import { JSONObject } from './json'\nimport { parseHTML } from 'k6/html'\nimport { Response } from 'k6/http'\n\n/**\n * Base class to derive errors from\n *\n * Inspired from AWS official error types, as\n * described in:\n *   * https://aws.amazon.com/blogs/developer/service-error-handling-modular-aws-sdk-js/\n *   * https://github.com/aws/aws-sdk-js/blob/master/lib/error.d.ts\n */\nexport class AWSError extends Error {\n    /**\n     * Error code issued by the service (if any)\n     */\n    code?: string\n\n    /**\n     * Create an AWSError\n     *\n     * @param {string} message - A longer human readable error message.\n     * @param {string?} code - A unique short code representing the error that was emitted\n     */\n    constructor(message: string, code?: string) {\n        super(message)\n        this.name = 'AWSError'\n        this.code = code\n    }\n\n    /**\n     * Parse an AWSError from an XML document\n     *\n     * @param  {string} xmlDocument - Serialized XML document to parse the error from\n     */\n    static parseXML(xmlDocument: string): AWSError {\n        const doc = parseHTML(xmlDocument)\n        return new AWSError(doc.find('Message').text(), doc.find('Code').text())\n    }\n\n    static parse(response: Response): AWSError {\n        if (response.headers['Content-Type'] === 'application/json') {\n            const error = (response.json() as JSONObject) || {}\n            const message =\n                error.Message ||\n                error.message ||\n                error.__type ||\n                'An error occurred on the server side'\n            const code = response.headers['X-Amzn-Errortype'] || error.__type\n            return new AWSError(message as string, code as string)\n        } else {\n            return AWSError.parseXML(response.body as string)\n        }\n    }\n}\n","import crypto from 'k6/crypto'\n\nimport * as constants from './constants'\nimport { AWSError } from './error'\nimport { hasHeader, HTTPHeaderBag, HTTPRequest, QueryParameterBag, SignedHTTPRequest } from './http'\nimport { isArrayBuffer } from './utils'\n\n/**\n * SignatureV4 can be used to sign HTTP requests and presign URLs using the AWS Signature\n * Version 4 signing process.\n *\n * It offers two signing methods:\n * - sign: signs the request headers and payload\n * - presign: returns a presigned (authorization information contained in the query string) URL\n *\n * @see https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html\n */\nexport class SignatureV4 {\n    /**\n     * The name of the service to sign for.\n     */\n    private readonly service: string\n\n    /**\n     * The name of the region to sign for.\n     */\n    private readonly region: string\n\n    /**\n     * The credentials with which the request should be signed.\n     */\n    private readonly credentials: Credentials\n\n    /**\n     * Whether to uri-escape the request URI path as part of computing the\n     * canonical request string. This is required for every AWS service, except\n     * Amazon S3, as of late 2017.\n     *\n     * @default [true]\n     */\n    private readonly uriEscapePath: boolean\n\n    /**\n     * Whether to calculate a checksum of the request body and include it as\n     * either a request header (when signing) or as a query string parameter\n     * (when presigning). This is required for AWS Glacier and Amazon S3 and optional for\n     * every other AWS service as of late 2017.\n     *\n     * @default [true]\n     */\n    private readonly applyChecksum: boolean\n\n    // TODO: uriEscapePath and applyChecksum should not be present in the constructor\n    constructor({\n        service,\n        region,\n        credentials,\n        uriEscapePath,\n        applyChecksum,\n    }: SignatureV4Options) {\n        this.service = service\n        this.region = region\n        this.credentials = credentials\n        this.uriEscapePath = typeof uriEscapePath === 'boolean' ? uriEscapePath : true\n        this.applyChecksum = typeof applyChecksum === 'boolean' ? applyChecksum : true\n    }\n\n    /**\n     * Includes AWS v4 signing information to the provided HTTP request.\n     *\n     * This method adds an Authorization header to the request, containing\n     * the signature and other signing information. It also returns a preformatted\n     * URL that can be used to make the k6 http request.\n     *\n     * This method mutates the request object.\n     *\n     * @param request {HTTPRequest} The request to sign.\n     * @param options {Partial<RequestSigningOptions>} Options for signing the request.\n     * @returns {SignedHTTPRequest} The signed request.\n     */\n    sign(request: HTTPRequest, options: Partial<RequestSigningOptions> = {}): SignedHTTPRequest {\n        // Set default values for options which are not provided by the user.\n        const defaultOptions = {\n            signingDate: new Date(),\n            unsignableHeaders: new Set<string>(),\n            signableHeaders: new Set<string>(),\n        }\n\n        // Merge default options with the ones maybe provided by the user.\n        const finalOptions = { ...defaultOptions, ...options }\n\n        const { longDate, shortDate }: DateInfo = formatDate(finalOptions.signingDate)\n        const service = finalOptions.signingService || this.service\n        const region = finalOptions.signingRegion || this.region\n        const scope = `${shortDate}/${region}/${service}/${constants.KEY_TYPE_IDENTIFIER}`\n\n        // Required by the specification:\n        //   \"For HTTP/1.1 requests, you must include the host header at a minimum.\n        //   Standard headers like content-type are optional.\n        //   For HTTP/2 requests, you must include the :authority header instead of\n        //   the host header. Different services might require other headers.\"\n        if (!request.headers[constants.HOST_HEADER]) {\n          request.headers[constants.HOST_HEADER] = request.endpoint.hostname\n      }\n        \n\n        // Filter out headers that will be generated and managed by the signing process.\n        // If the user provide any of those as part of the HTTPRequest's headers, they\n        // will be ignored.\n        for (const headerName of Object.keys(request.headers)) {\n            if (constants.GENERATED_HEADERS.indexOf(headerName.toLowerCase()) > -1) {\n                delete request.headers[headerName]\n            }\n        }\n\n        request.headers[constants.AMZ_DATE_HEADER] = longDate\n        if (this.credentials.sessionToken) {\n            request.headers[constants.AMZ_TOKEN_HEADER] = this.credentials.sessionToken\n        }\n\n        // If the request body is a typed array, we need to convert it to a buffer\n        // so that we can calculate the checksum.\n        if (ArrayBuffer.isView(request.body)) {\n            request.body = request.body.buffer\n        }\n\n        // Ensure we avoid passing undefined to the crypto hash function.\n        if (!request.body) {\n            request.body = ''\n        }\n\n        const payloadHash = this.computePayloadHash(request)\n        if (\n            !hasHeader(constants.AMZ_CONTENT_SHA256_HEADER, request.headers) &&\n            this.applyChecksum\n        ) {\n            request.headers[constants.AMZ_CONTENT_SHA256_HEADER] = payloadHash\n        }\n\n        const canonicalHeaders = this.computeCanonicalHeaders(\n            request,\n            finalOptions.unsignableHeaders,\n            finalOptions.signableHeaders\n        )\n        const signature = this.calculateSignature(\n            longDate,\n            scope,\n            this.deriveSigningKey(this.credentials, service, region, shortDate),\n            this.createCanonicalRequest(request, canonicalHeaders, payloadHash)\n        )\n\n        /**\n         * Step 4 of the signing process: add the signature to the HTTP request's headers.\n         *\n         * @see https://docs.aws.amazon.com/general/latest/gr/sigv4-add-signature-to-request.html\n         */\n        request.headers[constants.AUTHORIZATION_HEADER] =\n            `${constants.SIGNING_ALGORITHM_IDENTIFIER} ` +\n            `Credential=${this.credentials.accessKeyId}/${scope}, ` +\n            `SignedHeaders=${Object.keys(canonicalHeaders).sort().join(';')}, ` +\n            `Signature=${signature}`\n\n        // If a request path was provided, add it to the URL\n        let url = request.endpoint.href\n        if (request.path) {\n            url += request.path\n        }\n\n        // If a request query string was provided, add it to the URL\n        if (request.query) {\n            // We exclude the signature from the query string\n            url += `?${this.serializeQueryParameters(request.query)}`\n        }\n\n        return {\n            url: url,\n            ...request,\n        }\n    }\n\n    /**\n     * Produces a presigned URL with AWS v4 signature information for the provided HTTP request.\n     *\n     * A presigned URL is a URL that contains the authorization information\n     * (signature and other signing information) in the query string. This method\n     * returns a preformatted URL that can be used to make the k6 http request.\n     *\n     * @param originalRequest - The original request to presign.\n     * @param options - Options controlling the signing of the request.\n     * @returns A signed request, including the presigned URL.\n     */\n    presign(originalRequest: HTTPRequest, options: PresignOptions = {}): SignedHTTPRequest {\n        const {\n            signingDate = new Date(),\n            expiresIn = 3600,\n            unsignableHeaders,\n            unhoistableHeaders,\n            signableHeaders,\n            signingRegion,\n            signingService,\n        } = options\n        const { longDate, shortDate }: DateInfo = formatDate(signingDate)\n        const region = signingRegion || this.region\n        const service = signingService || this.service\n\n        if (expiresIn > constants.MAX_PRESIGNED_TTL) {\n            throw new InvalidSignatureError(\n                \"Signature version 4 presigned URLs can't be valid for more than 7 days\"\n            )\n        }\n\n        const scope = `${shortDate}/${region}/${service}/${constants.KEY_TYPE_IDENTIFIER}`\n        const request = this.moveHeadersToQuery(originalRequest, { unhoistableHeaders })\n\n        // Required by the specification:\n        //   \"For HTTP/1.1 requests, you must include the host header at a minimum.\n        //   Standard headers like content-type are optional.\n        //   For HTTP/2 requests, you must include the :authority header instead of\n        //   the host header. Different services might require other headers.\"\n        if (!request.headers[constants.HOST_HEADER]) {\n          request.headers[constants.HOST_HEADER] = originalRequest.endpoint.hostname\n      }\n\n        // If the user provided a session token, include it in the signed url query string.\n        if (this.credentials.sessionToken) {\n            request.query[constants.AMZ_TOKEN_QUERY_PARAM] = this.credentials.sessionToken\n        }\n\n        // Add base signing query parameters to the request, as described in the documentation\n        // @see https://docs.aws.amazon.com/general/latest/gr/sigv4-add-signature-to-request.html\n        request.query[constants.AMZ_ALGORITHM_QUERY_PARAM] = constants.SIGNING_ALGORITHM_IDENTIFIER\n        request.query[\n            constants.AMZ_CREDENTIAL_QUERY_PARAM\n        ] = `${this.credentials.accessKeyId}/${scope}`\n        request.query[constants.AMZ_DATE_QUERY_PARAM] = longDate\n        request.query[constants.AMZ_EXPIRES_QUERY_PARAM] = expiresIn.toString(10)\n\n        const canonicalHeaders = this.computeCanonicalHeaders(\n            request,\n            unsignableHeaders,\n            signableHeaders\n        )\n        request.query[constants.AMZ_SIGNED_HEADERS_QUERY_PARAM] = Object.keys(canonicalHeaders)\n            .sort()\n            .join(';')\n\n        const signingKey = this.deriveSigningKey(this.credentials, service, region, shortDate)\n\n        // Computing the payload from the original request. This is required\n        // in the event the user attempts to produce a presigned URL for s3,\n        // which requires the payload hash to be 'UNSIGNED-PAYLOAD'.\n        //\n        // To that effect, users need to set the 'x-amz-content-sha256' header,\n        // and mark it as unhoistable and unsignable. When setup this way,\n        // the computePayloadHash method will then return the string 'UNSIGNED-PAYLOAD'.\n        const payloadHash = this.computePayloadHash(originalRequest)\n        const canonicalRequest = this.createCanonicalRequest(request, canonicalHeaders, payloadHash)\n\n        request.query[constants.AMZ_SIGNATURE_QUERY_PARAM] = this.calculateSignature(\n            longDate,\n            scope,\n            signingKey,\n            canonicalRequest\n        )\n\n        // If a request path was provided, add it to the URL\n        let url = request.endpoint.href\n        if (request.path) {\n            url += request.path\n        }\n\n        // If a request query string was provided, add it to the URL\n        if (request.query) {\n            url += `?${this.serializeQueryParameters(request.query)}`\n        }\n\n        return { url: url, ...request }\n    }\n\n    /**\n     * Create a string including information from your request\n     * in a AWS signature v4 standardized (canonical) format.\n     *\n     * Step 1 of the signing process: create the canonical request string.\n     * @see https://docs.aws.amazon.com/general/latest/gr/sigv4-create-canonical-request.html\n     *\n     * @param request {HTTPRequest} The request to sign.\n     * @param canonicalHeaders {HTTPHeaderBag} The request's canonical headers.\n     * @param payloadHash {string} The hexadecimally encoded request's payload hash .\n     * @returns {string} The canonical request string.\n     */\n    private createCanonicalRequest(\n        request: HTTPRequest,\n        canonicalHeaders: HTTPHeaderBag,\n        payloadHash: string\n    ): string {\n        const sortedHeaders = Object.keys(canonicalHeaders).sort()\n        const sortedCanonicalHeaders = sortedHeaders\n            .map((name) => `${name}:${canonicalHeaders[name]}`)\n            .join('\\n')\n        const signedHeaders = sortedHeaders.join(';')\n\n        return (\n            `${request.method}\\n` +\n            `${this.computeCanonicalURI(request)}\\n` +\n            `${this.computeCanonicalQuerystring(request)}\\n` +\n            `${sortedCanonicalHeaders}\\n\\n` +\n            `${signedHeaders}\\n` +\n            `${payloadHash}`\n        )\n    }\n\n    /**\n     * Create the \"string to sign\" part of the signature Version 4 protocol.\n     *\n     * The \"string to sign\" includes meta information about your request and\n     * about the canonical request that you created with `createCanonicalRequest`.\n     * It is used hand in hand with the signing key to create the request signature.\n     * Step 2 of the signing process: create the string to sign.\n     * @see https://docs.aws.amazon.com/general/latest/gr/sigv4-create-string-to-sign.html\n     *\n     * @param longDate {string} The request's date in iso 8601 format.\n     * @param credentialScope {string} The request's credential scope.\n     * @param canonicalRequest {string} The request's canonical request.\n     * @returns {string} The \"string to sign\".\n     */\n    private createStringToSign(\n        longDate: string,\n        credentialScope: string,\n        canonicalRequest: string\n    ): string {\n        const hashedCanonicalRequest = crypto.sha256(canonicalRequest, 'hex')\n\n        return (\n            `${constants.SIGNING_ALGORITHM_IDENTIFIER}\\n` +\n            `${longDate}\\n` +\n            `${credentialScope}\\n` +\n            `${hashedCanonicalRequest}`\n        )\n    }\n\n    /**\n     * Calculte the signature for AWS signature version 4.\n     *\n     * Step 3 of the signing process: create the signature.\n     * @see https://docs.aws.amazon.com/general/latest/gr/sigv4-calculate-signature.html\n     *\n     * @param longDate {string} The request's date in iso 8601 format.\n     * @param credentialScope {string} The request's credential scope.\n     * @param signingKey {string} the signing key as computed by the deriveSigningKey method.\n     * @param canonicalRequest {string} The request's canonical request.\n     * @returns {string} The signature.\n     */\n    private calculateSignature(\n        longDate: string,\n        credentialScope: string,\n        signingKey: Uint8Array,\n        canonicalRequest: string\n    ): string {\n        const stringToSign = this.createStringToSign(longDate, credentialScope, canonicalRequest)\n        return crypto.hmac('sha256', signingKey, stringToSign, 'hex')\n    }\n\n    /**\n     * Derives the signing key for authenticating requests signed with\n     * the Signature version 4 authentication protocol.\n     *\n     * deriveSigningKey produces a signing key by creating a series of\n     * hash-based message authentication codes (HMACs) represented in\n     * a binary format.\n     *\n     * The derived signing key is specific to the date it's made at, as well as\n     * the service and region it targets.\n     *\n     * @param credentials {AWSCredentials} The credentials to use for signing.\n     * @param service {string} The service the request is targeted at.\n     * @param region {string} The region the request is targeted at.\n     * @param shortDate {string} The request's date in YYYYMMDD format.\n     * @returns {Uint8Array} The derived signing key.\n     */\n    private deriveSigningKey(\n        credentials: Credentials,\n        service: string,\n        region: string,\n        shortDate: string\n    ): Uint8Array {\n        const kSecret: string = credentials.secretAccessKey\n        /**\n         * crypto.hmac returns a value of type `bytes`, which is an alias for\n         * number[]. However, the secret argument to hmac needs to either be\n         * a `string` or ArrayBuffer. The only way to get around this is to\n         * cast the return value of hmac to any, thus, we disable the no-explicit-any\n         * ESLint rule for this function.\n         */\n        /* eslint-disable @typescript-eslint/no-explicit-any */\n        const kDate: any = crypto.hmac('sha256', 'AWS4' + kSecret, shortDate, 'binary')\n        const kRegion: any = crypto.hmac('sha256', kDate, region, 'binary')\n        const kService: any = crypto.hmac('sha256', kRegion, service, 'binary')\n        const kSigning: any = crypto.hmac('sha256', kService, 'aws4_request', 'binary')\n        /* eslint-enable @typescript-eslint/no-explicit-any */\n\n        return kSigning\n    }\n\n    /**\n     * Create a string that includes information from your request\n     * in a AWS signature v4 standardized (canonical) format.\n     *\n     * @param param0 {HTTPRequest} The request to sign.\n     * @returns {string} The canonical URI.\n     */\n    private computeCanonicalURI({ path }: HTTPRequest): string {\n        if (this.uriEscapePath) {\n            // Non-S3 services, we normalize the path and then double URI encode it.\n            // Ref: \"Remove Dot Segments\" https://datatracker.ietf.org/doc/html/rfc3986#section-5.2.4\n            const normalizedURISegments = []\n\n            for (const URISegment of path.split('/')) {\n                if (URISegment?.length === 0) {\n                    continue\n                }\n\n                if (URISegment === '.') {\n                    continue\n                }\n\n                if (URISegment === '..') {\n                    normalizedURISegments.pop()\n                } else {\n                    normalizedURISegments.push(URISegment)\n                }\n            }\n\n            // Normalize the URI\n            const leading = path?.startsWith('/') ? '/' : ''\n            const URI = normalizedURISegments.join('/')\n            const trailing = normalizedURISegments.length > 0 && path?.endsWith('/') ? '/' : ''\n            const normalizedURI = `${leading}${URI}${trailing}`\n\n            const doubleEncoded = encodeURIComponent(normalizedURI)\n\n            return doubleEncoded.replace(/%2F/g, '/')\n        }\n\n        // For S3, we shouldn't normalize the path. For example, object name\n        // my-object//example//photo.user should not be normalized to\n        // my-object/example/photo.user\n        return path\n    }\n\n    /**\n     * Serializes the request's query parameters into their canonical\n     * string version. If the request does not include a query parameters,\n     * returns an empty string.\n     *\n     * @param param0 {HTTPRequest} The request containing the query parameters.\n     * @returns {string} The canonical query string.\n     */\n    private computeCanonicalQuerystring({ query = {} }: HTTPRequest): string {\n        const keys: Array<string> = []\n        const serialized: Record<string, string> = {}\n\n        for (const key of Object.keys(query).sort()) {\n            if (key.toLowerCase() === constants.AMZ_SIGNATURE_HEADER) {\n                continue\n            }\n\n            keys.push(key)\n            const value = query[key]\n\n            if (typeof value === 'string') {\n                serialized[key] = `${escapeURI(key)}=${escapeURI(value)}`\n            } else if (Array.isArray(value)) {\n                serialized[key] = value\n                    .slice(0)\n                    .sort()\n                    .reduce(\n                        (encoded: Array<string>, value: string) =>\n                            encoded.concat([`${escapeURI(key)}=${escapeURI(value)}`]),\n                        []\n                    )\n                    .join('&')\n            }\n        }\n\n        return keys\n            .map((key) => serialized[key])\n            .filter((serialized) => serialized)\n            .join('&')\n    }\n\n    /**\n     * Create the canonical form of the request's headers.\n     * Canonical headers consist of all the HTTP headers you\n     * are including with the signed request.\n     *\n     * @param param0 {HTTPRequest} The request to compute the canonical headers of.\n     * @param unsignableHeaders {Set<string>} The headers that should not be signed.\n     * @param signableHeaders {Set<string>} The headers that should be signed.\n     * @returns {string} The canonical headers.\n     */\n    private computeCanonicalHeaders(\n        { headers }: HTTPRequest,\n        unsignableHeaders?: Set<string>,\n        signableHeaders?: Set<string>\n    ): HTTPHeaderBag {\n        const canonicalHeaders: HTTPHeaderBag = {}\n\n        for (const headerName of Object.keys(headers).sort()) {\n            if (headers[headerName] == undefined) {\n                continue\n            }\n\n            const canonicalHeaderName = headerName.toLowerCase()\n            if (\n                canonicalHeaderName in constants.ALWAYS_UNSIGNABLE_HEADERS ||\n                unsignableHeaders?.has(canonicalHeaderName)\n            ) {\n                if (\n                    !signableHeaders ||\n                    (signableHeaders && !signableHeaders.has(canonicalHeaderName))\n                ) {\n                    continue\n                }\n            }\n\n            if (typeof headers[headerName] === 'string') {\n                canonicalHeaders[canonicalHeaderName] = headers[headerName] = headers[headerName]\n                    .trim()\n                    .replace(/\\s+/g, ' ')\n            }\n        }\n\n        return canonicalHeaders\n    }\n\n    /**\n     * Computes the SHA256 cryptographic hash of the request's body.\n     *\n     * If the headers contain the 'X-Amz-Content-Sha256' header, then\n     * the value of that header is returned instead. This proves useful\n     * when, for example, presiging a URL for S3, as the payload hash\n     * must always be equal to 'UNSIGNED-PAYLOAD'.\n     *\n     * @param param0 {HTTPRequest} The request to compute the payload hash of.\n     * @returns {string} The hex encoded SHA256 payload hash, or the value of the 'X-Amz-Content-Sha256' header.\n     */\n    private computePayloadHash({ headers, body }: HTTPRequest): string {\n        // for (const headerName of Object.keys(headers)) {\n        //     // If the header is present, return its value.\n        //     // So that we let the 'UNSIGNED-PAYLOAD' value pass through.\n        //     if (headerName.toLowerCase() === constants.AMZ_CONTENT_SHA256_HEADER) {\n        //         return headers[headerName]\n        //     }\n        // }\n\n        if (headers[constants.AMZ_CONTENT_SHA256_HEADER]) {\n            return headers[constants.AMZ_CONTENT_SHA256_HEADER]\n        }\n\n        if (body == undefined) {\n            return constants.EMPTY_SHA256\n        }\n\n        if (typeof body === 'string' || isArrayBuffer(body)) {\n            return crypto.sha256(body, 'hex').toLowerCase()\n        }\n\n        if (ArrayBuffer.isView(body)) {\n            // If the request body is a typed array, we need to convert it to a buffer\n            // so that we can calculate the checksum.\n            return crypto.sha256((body as DataView).buffer, 'hex').toLowerCase()\n        }\n\n        return constants.UNSIGNED_PAYLOAD\n    }\n\n    /**\n     * Moves a request's headers to its query parameters.\n     *\n     * The operation will ignore any amazon standard headers, prefixed\n     * with 'X-Amz-'. It will also ignore any headers specified as unhoistable\n     * by the options.\n     *\n     * The operation will delete the headers from the request.\n     *\n     * @param request {HTTPRequest} The request to move the headers from.\n     * @param options\n     * @returns {HTTPRequest} The request with the headers moved to the query parameters.\n     */\n    private moveHeadersToQuery(\n        request: HTTPRequest,\n        options: { unhoistableHeaders?: Set<string> } = {}\n    ): HTTPRequest & { query: QueryParameterBag } {\n        const requestCopy = JSON.parse(JSON.stringify(request))\n        const { headers, query = {} as QueryParameterBag } = requestCopy\n\n        for (const name of Object.keys(headers)) {\n            const lowerCaseName = name.toLowerCase()\n            if (\n                lowerCaseName.slice(0, 6) === 'x-amz-' &&\n                !options.unhoistableHeaders?.has(lowerCaseName)\n            ) {\n                query[name] = headers[name]\n                delete headers[name]\n            }\n        }\n\n        return {\n            ...requestCopy,\n            headers,\n            query,\n        }\n    }\n\n    /**\n     * Serializes a HTTPRequest's query parameter bag into a string.\n     *\n     * @param query {QueryParameterBag} The query parameters to serialize.\n     * @param ignoreKeys {Set<string>} The keys to ignore.\n     * @returns {string} The serialized, and ready to use in a URL, query parameters.\n     */\n    private serializeQueryParameters(query: QueryParameterBag, ignoreKeys?: string[]): string {\n        const keys: Array<string> = []\n        const serialized: Record<string, string> = {}\n\n        for (const key of Object.keys(query).sort()) {\n            if (ignoreKeys?.includes(key.toLowerCase())) {\n                continue\n            }\n\n            keys.push(key)\n            const value = query[key]\n\n            if (typeof value === 'string') {\n                serialized[key] = `${escapeURI(key)}=${escapeURI(value)}`\n            } else if (Array.isArray(value)) {\n                serialized[key] = value\n                    .slice(0)\n                    .sort()\n                    .reduce(\n                        (encoded: Array<string>, value: string) =>\n                            encoded.concat([`${escapeURI(key)}=${escapeURI(value)}`]),\n                        []\n                    )\n                    .join('&')\n            }\n        }\n\n        return keys\n            .map((key) => serialized[key])\n            .filter((serialized) => serialized)\n            .join('&')\n    }\n}\n\n/**\n * Error indicating an Invalid signature has been sent to AWS services\n *\n * Inspired from AWS official error types, as\n * described in:\n *   * https://aws.amazon.com/blogs/developer/service-error-handling-modular-aws-sdk-js/\n *   * https://github.com/aws/aws-sdk-js/blob/master/lib/error.d.ts\n */\nexport class InvalidSignatureError extends AWSError {\n    /**\n     * Constructs an InvalidSignatureError\n     *\n     * @param  {string} message - human readable error message\n     */\n    constructor(message: string, code?: string) {\n        super(message, code)\n        this.name = 'InvalidSignatureError'\n    }\n}\n\nexport interface SignatureV4Options {\n    /**\n     * The name of the service to sign for.\n     */\n    service: string\n\n    /**\n     * The name of the region to sign for.\n     */\n    region: string\n\n    /**\n     * The credentials with which the request should be signed.\n     */\n    credentials: Credentials\n\n    /**\n     * Whether to uri-escape the request URI path as part of computing the\n     * canonical request string. This is required for every AWS service, except\n     * Amazon S3, as of late 2017.\n     *\n     * @default [true]\n     */\n    uriEscapePath?: boolean\n\n    /**\n     * Whether to calculate a checksum of the request body and include it as\n     * either a request header (when signing) or as a query string parameter\n     * (when presigning). This is required for AWS Glacier and Amazon S3 and optional for\n     * every other AWS service as of late 2017.\n     *\n     * @default [true]\n     */\n    applyChecksum?: boolean\n}\n\nexport interface SignOptions {\n    /**\n     * The date and time to be used as signature metadata. This value should be\n     * a Date object, a unix (epoch) timestamp, or a string that can be\n     * understood by the JavaScript `Date` constructor.If not supplied, the\n     * value returned by `new Date()` will be used.\n     */\n    signingDate?: Date\n\n    /**\n     * The service signing name. It will override the service name of the signer\n     * in current invocation\n     */\n    signingService?: string\n\n    /**\n     * The region name to sign the request. It will override the signing region of the\n     * signer in current invocation\n     */\n    signingRegion?: string\n}\n\nexport interface RequestSigningOptions extends SignOptions {\n    /**\n     * A set of strings whose members represents headers that cannot be signed.\n     * All headers in the provided request will have their names converted to\n     * lower case and then checked for existence in the unsignableHeaders set.\n     */\n    unsignableHeaders?: Set<string>\n\n    /**\n     * A set of strings whose members represents headers that should be signed.\n     * Any values passed here will override those provided via unsignableHeaders,\n     * allowing them to be signed.\n     *\n     * All headers in the provided request will have their names converted to\n     * lower case before signing.\n     */\n    signableHeaders?: Set<string>\n}\n\nexport interface PresignOptions extends RequestSigningOptions {\n    /**\n     * The number of seconds before the presigned URL expires\n     */\n    expiresIn?: number\n\n    /**\n     * A set of strings whose representing headers that should not be hoisted\n     * to presigned request's query string. If not supplied, the presigner\n     * moves all the AWS-specific headers (starting with `x-amz-`) to the request\n     * query string. If supplied, these headers remain in the presigned request's\n     * header.\n     * All headers in the provided request will have their names converted to\n     * lower case and then checked for existence in the unhoistableHeaders set.\n     */\n    unhoistableHeaders?: Set<string>\n}\n\nexport interface Credentials {\n    /**\n     * AWS access key ID\n     */\n    readonly accessKeyId: string\n\n    /**\n     * AWS secret access key\n     */\n    readonly secretAccessKey: string\n\n    /**\n     * A security or session token to use with these credentials. Usually\n     * present for temporary credentials.\n     */\n    readonly sessionToken?: string\n}\n\nexport interface DateInfo {\n    /**\n     * ISO8601 formatted date string\n     */\n    longDate: string\n\n    /**\n     * String in the format YYYYMMDD\n     */\n    shortDate: string\n}\n\n/**\n * Escapes a URI following the AWS signature v4 escaping rules.\n *\n * @param URI {string} The URI to escape.\n * @returns {string} The escaped URI.\n */\nfunction escapeURI(URI: string): string {\n    const hexEncode = (c: string): string => {\n        return `%${c.charCodeAt(0).toString(16).toUpperCase()}`\n    }\n\n    return encodeURIComponent(URI).replace(/[!'()*]/g, hexEncode)\n}\n\n/**\n * formatDate formats a Date object into a ISO8601 formatted date string\n * and a string in the format YYYYMMDD.\n *\n * @param date {Date} The date to format.\n * @returns {DateInfo} The formatted date.\n */\nfunction formatDate(date: Date): DateInfo {\n    const longDate = iso8601(date).replace(/[-:]/g, '')\n    return {\n        longDate,\n        shortDate: longDate.slice(0, 8),\n    }\n}\n\n/**\n * Formats a time into an ISO 8601 string.\n *\n * @see https://en.wikipedia.org/wiki/ISO_8601\n *\n * @param time {number | string | Date} The time to format.\n * @returns {string} The ISO 8601 formatted time.\n */\nfunction iso8601(time: number | string | Date): string {\n    return toDate(time)\n        .toISOString()\n        .replace(/\\.\\d{3}Z$/, 'Z')\n}\n\n/**\n * Converts a time value into a Date object.\n *\n * @param time {number | string | Date} The time to convert.\n * @returns {Date} The resulting Date object.\n */\nfunction toDate(time: number | string | Date): Date {\n    if (typeof time === 'number') {\n        return new Date(time * 1000)\n    }\n\n    if (typeof time === 'string') {\n        if (Number(time)) {\n            return new Date(Number(time) * 1000)\n        }\n\n        return new Date(time)\n    }\n\n    return time\n}\n","import { Endpoint } from './endpoint'\n\n/**\n * Type representing HTTP schemes\n */\nexport type HTTPScheme = 'http' | 'https'\n\n/**\n * Type representing HTTP Methods\n *\n */\nexport type HTTPMethod = 'GET' | 'POST' | 'PUT' | 'DELETE'\n\n/**\n * Type alias representing HTTP Headers\n */\nexport type HTTPHeaders = { [key: string]: string }\n\n/**\n * HTTPHeaderBag is a type alias representing HTTP Headers\n */\nexport type HTTPHeaderBag = Record<string, string>\n\nexport function hasHeader(soughtHeader: string, headers: HTTPHeaderBag): boolean {\n    soughtHeader = soughtHeader.toLowerCase()\n\n    for (const headerName of Object.keys(headers)) {\n        if (soughtHeader === headerName.toLowerCase()) {\n            return true\n        }\n    }\n\n    return false\n}\n\n/**\n * QueryParameterBag is a type alias representing HTTP Query Parameters\n */\nexport type QueryParameterBag = Record<string, string | Array<string>>\n\n/**\n * HTTPRequest represents an HTTP request\n */\nexport interface HTTPRequest {\n    /**\n     * The HTTP method to use\n     */\n    method: HTTPMethod\n\n    /**\n     * Represents an AWS service endpoint, providing utilities for parsing and handling URL details.\n     */\n    endpoint: Endpoint\n\n    /**\n     * The path to the resource\n     */\n    path: string\n\n    /**\n     * The query parameters to include in the request\n     */\n    query?: QueryParameterBag\n\n    /**\n     * The headers to include in the request\n     */\n    headers: HTTPHeaderBag\n\n    /**\n     * The body of the request\n     */\n    body?: string | ArrayBuffer | null\n}\n\n/**\n * SignedHTTPRequest represents an HTTP request that has been signed\n * with an AWS signature. It is a superset of HTTPRequest adding\n * the following fields:\n * - url: the fully qualified URL of the request that can be used in a k6 http.request.\n */\nexport interface SignedHTTPRequest extends HTTPRequest {\n    url: string\n}\n","/**\n *\n * @param value\n * @returns\n */\nexport function isArrayBuffer(value: unknown): value is ArrayBuffer {\n    return (\n        typeof ArrayBuffer === 'function' &&\n        (value instanceof ArrayBuffer ||\n            Object.prototype.toString.call(value) === '[object ArrayBuffer]')\n    )\n}\n\nexport function toFormUrlEncoded(form: Record<string, string | number | boolean>): string {\n    return Object.keys(form)\n        .reduce((params, key) => {\n            const value = form[key]\n            if (value !== undefined && value !== null) {\n                params.push(`${encodeURIComponent(key)}=${encodeURIComponent(value)}`)\n            }\n            return params\n        }, [] as string[])\n        .join('&')\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"k6/http\");","import { JSONArray, JSONObject } from 'k6'\nimport http, { RefinedResponse, ResponseType } from 'k6/http'\n\nimport { v4 as uuidv4 } from 'uuid'\nimport { AWSClient } from './client'\nimport { AWSConfig } from './config'\nimport { AMZ_TARGET_HEADER } from './constants'\nimport { AWSError } from './error'\nimport { HTTPHeaders, HTTPMethod } from './http'\nimport { InvalidSignatureError, SignatureV4 } from './signature'\n\n/**\n * Class allowing to interact with Amazon AWS's SecretsManager service\n */\nexport class SecretsManagerClient extends AWSClient {\n    private readonly signature: SignatureV4\n    private readonly method: HTTPMethod\n    private readonly commonHeaders: HTTPHeaders\n\n    /**\n     * Create a SecretsManagerClient\n     * @param  {AWSConfig} awsConfig - configuration attributes to use when interacting with AWS' APIs\n     */\n    constructor(awsConfig: AWSConfig) {\n        super(awsConfig, 'secretsmanager')\n\n        this.signature = new SignatureV4({\n            service: this.serviceName,\n            region: this.awsConfig.region,\n            credentials: {\n                accessKeyId: this.awsConfig.accessKeyId,\n                secretAccessKey: this.awsConfig.secretAccessKey,\n                sessionToken: this.awsConfig.sessionToken,\n            },\n            uriEscapePath: true,\n            applyChecksum: false,\n        })\n\n        // All interactions with the Secrets Manager service\n        // are made via the GET or POST method.\n        this.method = 'POST'\n        this.commonHeaders = {\n            'Content-Type': 'application/x-amz-json-1.1',\n        }\n    }\n\n    /**\n     * Returns a list of all secrets owned by the authenticated sender of the request.\n     * To use this operation, you must have the secretsmanager:ListSecrets permission.\n     *\n     * @return  {Array.<Secret>} secrets - An array of objects describing Secret Manager's secrets\n     * @throws  {SecretsManagerServiceError}\n     * @throws  {InvalidSignatureError}\n     */\n    async listSecrets(): Promise<Array<Secret>> {\n        const signedRequest = this.signature.sign(\n            {\n                method: this.method,\n                endpoint: this.endpoint,\n                path: '/',\n                headers: {\n                    ...this.commonHeaders,\n                    [AMZ_TARGET_HEADER]: `${this.serviceName}.ListSecrets`,\n                },\n                body: JSON.stringify({}),\n            },\n            {}\n        )\n\n        const res = await http.asyncRequest(this.method, signedRequest.url, signedRequest.body, {\n            headers: signedRequest.headers,\n        })\n        this._handle_error(SecretsManagerOperation.ListSecrets, res)\n        const json: JSONArray = res.json('SecretList') as JSONArray\n\n        return json.map((s) => Secret.fromJSON(s as JSONObject))\n    }\n\n    /**\n     * Retrieves a secret from Amazon Sercets Manager\n     *\n     * @param {string} id - The ARN or name of the secret to retrieve.\n     * @returns {Secret} - returns the content of the fetched Secret object.\n     * @throws {SecretsManagerServiceError}\n     * @throws {InvalidSignatureError}\n     */\n    async getSecret(id: string): Promise<Secret | undefined> {\n        const signedRequest = this.signature.sign(\n            {\n                method: this.method,\n                endpoint: this.endpoint,\n                path: '/',\n                headers: {\n                    ...this.commonHeaders,\n                    [AMZ_TARGET_HEADER]: `${this.serviceName}.GetSecretValue`,\n                },\n                body: JSON.stringify({ SecretId: id }),\n            },\n            {}\n        )\n\n        const res = await http.asyncRequest(this.method, signedRequest.url, signedRequest.body, {\n            headers: signedRequest.headers,\n        })\n\n        this._handle_error(SecretsManagerOperation.GetSecretValue, res)\n\n        return Secret.fromJSON(res.json() as JSONObject)\n    }\n\n    /**\n     * Creates a new secret\n     *\n     * Note that this method only supports string-based values at the moment.\n     *\n     * @param  {string} name - The name of the new secret.\n     *     The secret name can contain ASCII letters, numbers, and the following characters: /_+=.@\n     * @param  {string} secret - The text data to encrypt and store in this new version of the secret.\n     * @param  {string} description - The description of the secret.\n     * @param  {string} versionID=null - Version of the secret. This value helps ensure idempotency.\n     *     As a default, if no versionID is provided, one will be created for you using the UUID v4\n     *     algorithm.\n     * @param  {Array.<Object>} tags=[] - A list of tags to attach to the secret. Each tag is a key and\n     *     value pair of strings in a JSON text string. Note that tag key names are case sensitive.\n     * @returns {Secret} - returns the created secret\n     * @throws {SecretsManagerServiceError}\n     * @throws {InvalidSignatureError}\n     */\n    async createSecret(\n        name: string,\n        secret: string,\n        description: string,\n        versionID?: string,\n        tags?: Array<object>\n    ): Promise<Secret> {\n        versionID = versionID || uuidv4()\n\n        const signedRequest = this.signature.sign(\n            {\n                method: this.method,\n                endpoint: this.endpoint,\n                path: '/',\n                headers: {\n                    ...this.commonHeaders,\n                    [AMZ_TARGET_HEADER]: `${this.serviceName}.CreateSecret`,\n                },\n                body: JSON.stringify({\n                    Name: name,\n                    Description: description,\n                    SecretString: secret,\n                    ClientRequestToken: versionID,\n                    Tags: tags,\n                }),\n            },\n            {}\n        )\n\n        // Ensure to include the desired 'Action' in the X-Amz-Target\n        // header field, as documented by the AWS API docs.\n        // headers['X-Amz-Target'] = `${this.serviceName}.CreateSecret`\n\n        const res = await http.asyncRequest(this.method, signedRequest.url, signedRequest.body, {\n            headers: signedRequest.headers,\n        })\n        this._handle_error(SecretsManagerOperation.CreateSecret, res)\n\n        return Secret.fromJSON(res.json() as JSONObject)\n    }\n    /**\n     * Update a secret's value.\n     *\n     * Note that this method only support string-based values at the moment.\n     *\n     * @param  {string} id - The ARN or name of the secret to update.\n     * @param  {string} secret - The text data to encrypt and store in this new version of the secret.\n     * @param  {} versionID=null  - A unique identifier for the new version of the secret. This value helps ensure idempotency.\n     *     As a default, if no versionID is provided, one will be created for you using the UUID v4\n     * @throws {SecretsManagerServiceError}\n     * @throws {InvalidSignatureError}\n     */\n    async putSecretValue(id: string, secret: string, versionID?: string): Promise<Secret> {\n        versionID = versionID || uuidv4()\n\n        const signedRequest = this.signature.sign(\n            {\n                method: this.method,\n                endpoint: this.endpoint,\n                path: '/',\n                headers: {\n                    ...this.commonHeaders,\n                    [AMZ_TARGET_HEADER]: `${this.serviceName}.PutSecretValue`,\n                },\n                body: JSON.stringify({\n                    SecretId: id,\n                    SecretString: secret,\n                    ClientRequestToken: versionID,\n                }),\n            },\n            {}\n        )\n\n        const res = await http.asyncRequest(this.method, signedRequest.url, signedRequest.body, {\n            headers: signedRequest.headers,\n        })\n        this._handle_error(SecretsManagerOperation.PutSecretValue, res)\n\n        return Secret.fromJSON(res.json() as JSONObject)\n    }\n\n    /**\n     * Deletes a secret and all of its versions.\n     *\n     * You can specify a recovery window during which you can restore the secret.\n     * The minimum recovery window is 7 days. The default recovery window is 30 days.\n     *\n     * @param {string} secretID - The ARN or name of the secret to delete.\n     * @param {number} recoveryWindow - The number of days from 7 to 30 that Secrets Manager\n     *     waits before permanently deleting the secret.\n     * @throws {SecretsManagerServiceError}\n     * @throws {InvalidSignatureError}\n     */\n    async deleteSecret(\n        id: string,\n        { recoveryWindow = 30, noRecovery = false }: { recoveryWindow: number; noRecovery: boolean }\n    ): Promise<void> {\n        const payload: { [key: string]: string | boolean | number } = {\n            SecretId: id,\n        }\n\n        // noRecovery and recoveryWindow are exclusive parameters\n        if (noRecovery === true) {\n            payload['ForceDeleteWithoutRecovery'] = true\n        } else {\n            payload['RecoveryWindowInDays'] = recoveryWindow\n        }\n\n        const signedRequest = this.signature.sign(\n            {\n                method: this.method,\n                endpoint: this.endpoint,\n                path: '/',\n                headers: {\n                    ...this.commonHeaders,\n                    [AMZ_TARGET_HEADER]: `${this.serviceName}.DeleteSecret`,\n                },\n                body: JSON.stringify(payload),\n            },\n            {}\n        )\n\n        const res = await http.asyncRequest(this.method, signedRequest.url, signedRequest.body, {\n            headers: signedRequest.headers,\n        })\n        this._handle_error(SecretsManagerOperation.DeleteSecret, res)\n    }\n\n    _handle_error(\n        operation: SecretsManagerOperation,\n        response: RefinedResponse<ResponseType | undefined>\n    ) {\n        const errorCode = response.error_code\n        if (errorCode === 0) {\n            return\n        }\n\n        const error = response.json() as JSONObject\n        if (errorCode >= 1400 && errorCode <= 1499) {\n            // In the event of certain errors, the message is not set.\n            // Also, note the inconsistency in casing...\n            const errorMessage: string =\n                (error.Message as string) || (error.message as string) || (error.__type as string)\n\n            // Handle specifically the case of an invalid signature\n            if (error.__type === 'InvalidSignatureException') {\n                throw new InvalidSignatureError(errorMessage, error.__type)\n            }\n\n            // Otherwise throw a standard service error\n            throw new SecretsManagerServiceError(errorMessage, error.__type as string, operation)\n        }\n\n        if (errorCode === 1500) {\n            throw new SecretsManagerServiceError(\n                'An error occured on the server side',\n                'InternalServiceError',\n                operation\n            )\n        }\n    }\n}\n\n// TODO: create a Tags type\n\n/**\n * Class representing a Secret Manager's secret\n */\nexport class Secret {\n    name: string\n    arn: string\n    secret: string\n    createdDate: number\n    lastAccessedDate: number\n    lastChangedDate: number\n    tags: Array<{ [key: string]: string }>\n\n    /**\n     * Constructs a Secret Manager's Secret\n     *\n     * @param  {string} name - The friendly name of the secret.\n     * @param  {string} arn - The ARN of the secret.\n     * @param  {number} createdDate - The date and time that this version of the secret was created.\n     * @param  {number} lastAccessedDate - The last date that this secret was accessed. This value is\n     *     truncated to midnight of the date and therefore shows only the date, not the time.\n     * @param  {number} lastChangedDate - The last date and time that this secret was modified in any way.\n     * @param  {Array.<Object>} tags - The list of user-defined tags associated with the secret.\n     */\n    constructor(\n        name: string,\n        arn: string,\n        secretString: string,\n        createdDate: number,\n        lastAccessedDate: number,\n        lastChangedDate: number,\n        tags: Array<{ [key: string]: string }> = []\n    ) {\n        this.name = name\n        this.arn = arn\n        this.secret = secretString\n        this.createdDate = createdDate\n        this.lastAccessedDate = lastAccessedDate\n        this.lastChangedDate = lastChangedDate\n        this.tags = tags\n    }\n\n    /**\n     * Parses and constructs a Secret Manager's Secret from the content\n     * of a JSON response returned by the AWS service\n     *\n     * @param  {Object} json - JSON object as returned and parsed from\n     *     the AWS service's API call.\n     * @returns {Secret}\n     */\n    static fromJSON(json: JSONObject) {\n        return new Secret(\n            json.Name as string,\n            json.ARN as string,\n            json.SecretString as string,\n            json.CreatedDate as number,\n            json.LastAccessedDate as number,\n            json.LastChangedDate as number,\n            json.Tags as Array<{ [key: string]: string }>\n        )\n    }\n}\n\nexport class SecretsManagerServiceError extends AWSError {\n    operation: SecretsManagerOperation\n\n    /**\n     * Constructs a SecretsManagerServiceError\n     *\n     * @param  {string} message - human readable error message\n     * @param  {string} code - A unique short code representing the error that was emitted\n     * @param  {string} operation - Name of the failed Operation\n     */\n    constructor(message: string, code: string, operation: SecretsManagerOperation) {\n        super(message, code)\n        this.name = 'SecretsManagerServiceError'\n        this.operation = operation\n    }\n}\n\n/**\n *  SecretsManagerOperation defines all currently implemented Secrets Manager Service operations.\n */\nenum SecretsManagerOperation {\n    ListSecrets = 'ListSecrets',\n    GetSecretValue = 'GetSecretValue',\n    CreateSecret = 'CreateSecret',\n    PutSecretValue = 'PutSecretValue',\n    DeleteSecret = 'DeleteSecret',\n}\n","import { AWSConfig } from './config'\nimport { Endpoint } from './endpoint'\nimport { HTTPHeaders } from './http'\n\n/**\n * Class allowing to build requests targeting AWS APIs\n *\n * This class is meant to be used as a base class for specific\n * services clients. See S3Client or SecretsManagerClient for\n * usage examples.\n */\nexport class AWSClient {\n    readonly awsConfig: AWSConfig\n    readonly serviceName: string\n\n    private _endpoint?: Endpoint\n\n    /**\n     * @param {AWSConfig} awsConfig - configuration attributes to use when interacting with AWS' APIs\n     * @param  {string} serviceName - name of the service to target.\n     * @param  {URIEncodingConfig} URIencodingConfig - configures how requests URIs should be encoded.\n     */\n    constructor(awsConfig: AWSConfig, serviceName: string) {\n        this.awsConfig = awsConfig\n        this.serviceName = serviceName\n\n        // If an endpoint is provided in the config, set it\n        // to ensure the default endpoint is not used.\n        if (awsConfig.endpoint != undefined) {\n            this._endpoint = awsConfig.endpoint\n        }\n    }\n\n    /**\n     * Represents the endpoint URL of the AWS service.\n     *\n     * If no custom endpoint is set, a default endpoint will be constructed\n     * using the service name and region provided in the AWS config.\n     *\n     * @type {Endpoint}\n     * @public\n     */\n    public get endpoint() {\n        if (this._endpoint == undefined) {\n            this._endpoint = new Endpoint(\n                `https://${this.serviceName}.${this.awsConfig.region}.amazonaws.com`\n            )\n        }\n        return this._endpoint\n    }\n\n    /**\n     * Updates the endpoint URL of the AWS service.\n     *\n     * This can be used to override the default AWS service endpoint or set a custom endpoint.\n     *\n     * @param {Endpoint} endpoint - The new endpoint to set for the AWS service.\n     * @public\n     */\n    public set endpoint(endpoint: Endpoint) {\n        this._endpoint = endpoint\n    }\n}\n\n/**\n * Type alias representing the result of an AWSClient.buildRequest call\n */\nexport interface AWSRequest {\n    readonly url: string\n    readonly headers: HTTPHeaders\n}\n"],"names":["v1","v4","uuid","module","exports","byteToHex","i","toString","substr","buf","offset","bth","join","getRandomValues","crypto","bind","window","msCrypto","rnds8","Uint8Array","rnds","Array","r","Math","random","_nodeId","_clockseq","rng","bytesToUuid","_lastMSecs","_lastNSecs","options","b","node","clockseq","undefined","seedBytes","msecs","Date","getTime","nsecs","dt","Error","tl","tmh","n","ii","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","getter","__esModule","d","a","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","Endpoint","endpoint","_classCallCheck","_defineProperty","completeUrl","startsWith","concat","DEFAULT_PROTOCOL","protocolMatch","match","hostnameWithPort","_slicedToArray","replace","split","this","_protocol","slice","_hostname","_port","parseInt","href","set","_value$split2","hostname","port","protocol","host","AWSConfig","region","InvalidAWSConfigError","accessKeyId","length","secretAccessKey","sessionToken","_createClass","__ENV","AWS_REGION","AWS_ACCESS_KEY_ID","AWS_SECRET_ACCESS_KEY","AWS_SESSION_TOKEN","_Error","message","_callSuper","_inherits","_wrapNativeSuper","require","AMZ_DATE_QUERY_PARAM","AMZ_SIGNATURE_QUERY_PARAM","AMZ_TOKEN_QUERY_PARAM","AMZ_CONTENT_SHA256_HEADER","AMZ_DATE_HEADER","toLowerCase","AMZ_SIGNATURE_HEADER","AMZ_TARGET_HEADER","AMZ_TOKEN_HEADER","AUTHORIZATION_HEADER","GENERATED_HEADERS","HOST_HEADER","ALWAYS_UNSIGNABLE_HEADERS","authorization","connection","expect","from","pragma","referer","te","trailer","upgrade","KEY_TYPE_IDENTIFIER","SIGNING_ALGORITHM_IDENTIFIER","AWSError","code","_this","name","xmlDocument","doc","parseHTML","find","text","response","headers","error","json","Message","__type","parseXML","body","SignatureV4","_ref","service","credentials","uriEscapePath","applyChecksum","request","arguments","finalOptions","_objectSpread","signingDate","unsignableHeaders","Set","signableHeaders","_formatDate","formatDate","longDate","shortDate","signingService","signingRegion","scope","constants","_i","_Object$keys","keys","headerName","indexOf","ArrayBuffer","isView","buffer","payloadHash","computePayloadHash","soughtHeader","hasHeader","canonicalHeaders","computeCanonicalHeaders","signature","calculateSignature","deriveSigningKey","createCanonicalRequest","sort","url","path","query","serializeQueryParameters","originalRequest","_options$signingDate","_options$expiresIn","expiresIn","unhoistableHeaders","_formatDate2","InvalidSignatureError","moveHeadersToQuery","signingKey","canonicalRequest","sortedHeaders","sortedCanonicalHeaders","map","signedHeaders","method","computeCanonicalURI","computeCanonicalQuerystring","credentialScope","hashedCanonicalRequest","stringToSign","createStringToSign","kSecret","kDate","kRegion","kService","_ref2","_step","normalizedURISegments","_iterator","_createForOfIteratorHelper","s","done","URISegment","pop","push","err","e","f","leading","URI","trailing","endsWith","normalizedURI","encodeURIComponent","_ref3","_step2","_ref3$query","serialized","_loop","escapeURI","isArray","reduce","encoded","_iterator2","filter","_ref4","_step3","_iterator3","canonicalHeaderName","has","trim","_ref5","requestCopy","JSON","parse","stringify","_requestCopy$query","_i2","_Object$keys2","_options$unhoistableH","lowerCaseName","ignoreKeys","_step4","_loop2","includes","_iterator4","_AWSError","c","charCodeAt","toUpperCase","date","time","Number","toDate","toISOString","_regeneratorRuntime","t","iterator","asyncIterator","u","define","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","h","l","y","GeneratorFunction","GeneratorFunctionPrototype","p","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","_typeof","resolve","__await","then","callInvokeWithMethodAndArg","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","resetTryEntry","completion","reset","isNaN","displayName","isGeneratorFunction","constructor","mark","setPrototypeOf","__proto__","awrap","async","Promise","reverse","prev","charAt","stop","rval","handle","complete","finish","delegateYield","ownKeys","getOwnPropertySymbols","getOwnPropertyDescriptor","apply","getOwnPropertyDescriptors","defineProperties","asyncGeneratorStep","gen","reject","_next","_throw","info","_asyncToGenerator","fn","self","args","instance","Constructor","_defineProperties","target","props","descriptor","_toPropertyKey","protoProps","staticProps","_getPrototypeOf","ReferenceError","_assertThisInitialized","_possibleConstructorReturn","_isNativeReflectConstruct","Reflect","construct","Boolean","valueOf","subClass","superClass","_setPrototypeOf","toPrimitive","String","_toPrimitive","SecretsManagerClient","_AWSClient","awsConfig","serviceName","commonHeaders","_listSecrets","_callee","signedRequest","res","_context","sign","http","_handle_error","SecretsManagerOperation","ListSecrets","Secret","fromJSON","_getSecret","_callee2","id","_context2","SecretId","GetSecretValue","_x","_createSecret","_callee3","secret","description","versionID","tags","_context3","uuidv4","Name","Description","SecretString","ClientRequestToken","Tags","CreateSecret","_x2","_x3","_x4","_x5","_x6","_putSecretValue","_callee4","_context4","PutSecretValue","_x7","_x8","_x9","_deleteSecret","_callee5","_ref$recoveryWindow","recoveryWindow","_ref$noRecovery","payload","_context5","noRecovery","DeleteSecret","_x10","_x11","operation","errorCode","error_code","errorMessage","SecretsManagerServiceError","AWSClient","_endpoint","arn","secretString","createdDate","lastAccessedDate","lastChangedDate","ARN","CreatedDate","LastAccessedDate","LastChangedDate","_this2"],"sourceRoot":""}