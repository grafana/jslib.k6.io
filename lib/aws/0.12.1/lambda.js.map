{"version":3,"file":"lambda.js","mappings":"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","sources":["webpack://k6-jslib-aws/./src/internal/client.ts","webpack://k6-jslib-aws/./src/internal/config.ts","webpack://k6-jslib-aws/./src/internal/constants.ts","webpack://k6-jslib-aws/./src/internal/endpoint.ts","webpack://k6-jslib-aws/./src/internal/error.ts","webpack://k6-jslib-aws/./src/internal/http.ts","webpack://k6-jslib-aws/./src/internal/signature.ts","webpack://k6-jslib-aws/./src/internal/utils.ts","webpack://k6-jslib-aws/external commonjs \"k6/crypto\"","webpack://k6-jslib-aws/external commonjs \"k6/html\"","webpack://k6-jslib-aws/external commonjs \"k6/http\"","webpack://k6-jslib-aws/webpack/bootstrap","webpack://k6-jslib-aws/webpack/runtime/compat get default export","webpack://k6-jslib-aws/webpack/runtime/define property getters","webpack://k6-jslib-aws/webpack/runtime/hasOwnProperty shorthand","webpack://k6-jslib-aws/webpack/runtime/make namespace object","webpack://k6-jslib-aws/external commonjs \"k6/encoding\"","webpack://k6-jslib-aws/./src/internal/lambda.ts"],"sourcesContent":["import { AWSConfig } from './config'\nimport { Endpoint } from './endpoint'\nimport { HTTPHeaders } from './http'\n\n/**\n * Class allowing to build requests targeting AWS APIs\n *\n * This class is meant to be used as a base class for specific\n * services clients. See S3Client or SecretsManagerClient for\n * usage examples.\n */\nexport class AWSClient {\n    readonly awsConfig: AWSConfig\n    readonly serviceName: string\n\n    private _endpoint?: Endpoint\n\n    /**\n     * @param {AWSConfig} awsConfig - configuration attributes to use when interacting with AWS' APIs\n     * @param  {string} serviceName - name of the service to target.\n     * @param  {URIEncodingConfig} URIencodingConfig - configures how requests URIs should be encoded.\n     */\n    constructor(awsConfig: AWSConfig, serviceName: string) {\n        this.awsConfig = awsConfig\n        this.serviceName = serviceName\n\n        // If an endpoint is provided in the config, set it\n        // to ensure the default endpoint is not used.\n        if (awsConfig.endpoint != undefined) {\n            this._endpoint = awsConfig.endpoint\n        }\n    }\n\n    /**\n     * Represents the endpoint URL of the AWS service.\n     *\n     * If no custom endpoint is set, a default endpoint will be constructed\n     * using the service name and region provided in the AWS config.\n     *\n     * @type {Endpoint}\n     * @public\n     */\n    public get endpoint() {\n        if (this._endpoint == undefined) {\n            this._endpoint = new Endpoint(\n                `https://${this.serviceName}.${this.awsConfig.region}.amazonaws.com`\n            )\n        }\n        return this._endpoint\n    }\n\n    /**\n     * Updates the endpoint URL of the AWS service.\n     *\n     * This can be used to override the default AWS service endpoint or set a custom endpoint.\n     *\n     * @param {Endpoint} endpoint - The new endpoint to set for the AWS service.\n     * @public\n     */\n    public set endpoint(endpoint: Endpoint) {\n        this._endpoint = endpoint\n    }\n}\n\n/**\n * Type alias representing the result of an AWSClient.buildRequest call\n */\nexport interface AWSRequest {\n    readonly url: string\n    readonly headers: HTTPHeaders\n}\n","import { HTTPScheme } from './http'\nimport { Endpoint } from './endpoint'\n\n/** Class holding an AWS connection information */\nexport class AWSConfig {\n    /**\n     * The AWS region to connect to, as listed: https://docs.aws.amazon.com/general/latest/gr/rande.html\n     *\n     * @type {string}\n     */\n    region: string\n\n    /**\n     * Your user's AWS access key id credential.\n     *\n     * @type {string}\n     */\n    accessKeyId: string\n\n    /**\n     * Your user's AWS secret access key credential.\n     *\n     * @type {string}\n     */\n    secretAccessKey: string\n\n    /**\n     * Your user's AWS session token credential.\n     *\n     * @type {string}\n     */\n    sessionToken?: string\n\n    /**\n     * The AWS hostname to connect to.\n     *\n     * @type {string} ['amazonaws.com']\n     */\n    endpoint?: Endpoint\n\n    /**\n     * fromEnvironment creates an AWSConfig from the environment variables.\n     *\n     * It expects to find the following compulsory environment variables:\n     *  * AWS_REGION\n     *  * AWS_ACCESS_KEY_ID\n     *  * AWS_SECRET_ACCESS_KEY\n     *\n     * If set, the following optional environment variables are also used:\n     *  * AWS_SESSION_TOKEN\n     *\n     * Finally, the options parameter allows to explicitly set the scheme and endpoint\n     * to use when connecting to AWS.\n     *\n     * @param options {AWSConnectionOptions}\n     * @returns\n     */\n    static fromEnvironment(options?: AWSConnectionOptions): AWSConfig {\n        const region = __ENV.AWS_REGION\n        const accessKeyId = __ENV.AWS_ACCESS_KEY_ID\n        const secretAccessKey = __ENV.AWS_SECRET_ACCESS_KEY\n        const sessionToken: string | undefined = __ENV.AWS_SESSION_TOKEN\n        const endpoint: Endpoint | string | undefined = options?.endpoint\n\n        return new AWSConfig({\n            region,\n            accessKeyId,\n            secretAccessKey,\n            sessionToken,\n            endpoint: endpoint,\n        })\n    }\n\n    /**\n     * Create an AWSConfig.\n     *\n     * @param {AWSConfigOptions} options - configuration attributes to use when interacting with AWS' APIs\n     * @throws {InvalidArgumentException}\n     */\n    constructor(options: AWSConfigOptions) {\n        if (!options.region || options.region === '') {\n            throw new InvalidAWSConfigError(\n                `invalid AWS region; reason: expected a valid AWS region name (e.g. \"us-east-1\"), got \\`${options.region}\\``\n            )\n        }\n\n        if (!options.accessKeyId || options.accessKeyId === '') {\n            throw new InvalidAWSConfigError(\n                `invalid AWS access key ID; reason: expected a non empty string, got \\`${options.accessKeyId}\\``\n            )\n        }\n\n        if (options.accessKeyId.length < 16 || options.accessKeyId.length > 128) {\n            throw new InvalidAWSConfigError(\n                `invalid AWS access key ID; reason: size should be between 16 and 128 characters, got ${options.accessKeyId.length}`\n            )\n        }\n\n        if (!options.secretAccessKey || options.secretAccessKey === '') {\n            throw new InvalidAWSConfigError(\n                `invalid AWS secret access key; reason: expected a non empty string, got \\`${options.secretAccessKey}\\``\n            )\n        }\n\n        this.region = options.region\n        this.accessKeyId = options.accessKeyId\n        this.secretAccessKey = options.secretAccessKey\n\n        if (options.sessionToken !== undefined) {\n            this.sessionToken = options.sessionToken\n        }\n\n        if (options.endpoint !== undefined) {\n            if (typeof options.endpoint === 'string') {\n                this.endpoint = new Endpoint(options.endpoint)\n            } else {\n                this.endpoint = options.endpoint\n            }\n        }\n    }\n}\n\n/**\n * Interface representing AWSConfig options\n */\nexport interface AWSConfigOptions extends AWSConnectionOptions {\n    /**\n     * The AWS region to connect to, as listed: https://docs.aws.amazon.com/general/latest/gr/rande.html\n     *\n     * @type {string}\n     */\n    region: string\n\n    /**\n     * Your user's AWS access key id credential.\n     *\n     * @type {string}\n     */\n    accessKeyId: string\n\n    /**\n     * Your user's AWS secret access key credential.\n     *\n     * @type {string}\n     */\n    secretAccessKey: string\n\n    /**\n     * Your user's AWS session token credential.\n     *\n     * @type {string}\n     */\n    sessionToken?: string\n}\n\n/**\n * Interface representing AWS connection options\n */\nexport interface AWSConnectionOptions {\n    /**\n     * The HTTP scheme to use when connecting to AWS.\n     *\n     * @type {HTTPScheme}\n     */\n    scheme?: HTTPScheme\n\n    /**\n     * The AWS hostname to connect to.\n     *\n     * @type {string}\n     */\n    endpoint?: Endpoint | string\n}\n\n/** Class representing an invalid AWS configuration */\nexport class InvalidAWSConfigError extends Error {\n    constructor(message: string) {\n        super(message)\n    }\n}\n","/**\n * Standard Amazon AWS query parameter names\n */\nexport const AMZ_ALGORITHM_QUERY_PARAM = 'X-Amz-Algorithm'\nexport const AMZ_CREDENTIAL_QUERY_PARAM = 'X-Amz-Credential'\nexport const AMZ_DATE_QUERY_PARAM = 'X-Amz-Date'\nexport const AMZ_EXPIRES_QUERY_PARAM = 'X-Amz-Expires'\nexport const AMZ_SIGNATURE_QUERY_PARAM = 'X-Amz-Signature'\nexport const AMZ_SIGNED_HEADERS_QUERY_PARAM = 'X-Amz-SignedHeaders'\nexport const AMZ_TARGET_QUERY_PARAM = 'X-Amz-Target'\nexport const AMZ_TOKEN_QUERY_PARAM = 'X-Amz-Security-Token'\n\n/**\n * Standard Amazon AWS header names\n */\nexport const AMZ_CONTENT_SHA256_HEADER = 'x-amz-content-sha256'\nexport const AMZ_DATE_HEADER = AMZ_DATE_QUERY_PARAM.toLowerCase()\nexport const AMZ_SIGNATURE_HEADER = AMZ_SIGNATURE_QUERY_PARAM.toLowerCase()\nexport const AMZ_TARGET_HEADER = AMZ_TARGET_QUERY_PARAM.toLowerCase()\nexport const AMZ_TOKEN_HEADER = AMZ_TOKEN_QUERY_PARAM.toLowerCase()\n\n/**\n * Common HTTP headers we rely on in the signing process\n */\nexport const AUTHORIZATION_HEADER = 'authorization'\nexport const DATE_HEADER = 'date'\n\n/**\n * Lists the headers that are generated as part of the signature process.\n */\nexport const GENERATED_HEADERS = [AUTHORIZATION_HEADER, AMZ_DATE_HEADER, DATE_HEADER]\nexport const HOST_HEADER = 'host'\n\n/**\n * Lists the headers that should never be included in the\n * request signature signature process.\n */\nexport const ALWAYS_UNSIGNABLE_HEADERS = {\n    authorization: true,\n    'cache-control': true,\n    connection: true,\n    expect: true,\n    from: true,\n    'keep-alive': true,\n    'max-forwards': true,\n    pragma: true,\n    referer: true,\n    te: true,\n    trailer: true,\n    'transfer-encoding': true,\n    upgrade: true,\n    'user-agent': true,\n    'x-amzn-trace-id': true,\n}\n\n/**\n * Signature specific constants included in the signing process\n */\nexport const KEY_TYPE_IDENTIFIER = 'aws4_request'\nexport const SIGNING_ALGORITHM_IDENTIFIER = 'AWS4-HMAC-SHA256'\n\n/**\n * Maximum time to live of a signed request in seconds: 7 days.\n */\nexport const MAX_PRESIGNED_TTL = 60 * 60 * 24 * 7\n\n/**\n * SHA256 hash of an empty string (so we don't waste cycles recomputing it)\n */\nexport const EMPTY_SHA256 = 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\n\n/**\n * SHA256 hash of the unsigned payload constant (so we don't waste cycles recomputing it)\n */\nexport const UNSIGNED_PAYLOAD_SHA256 =\n    '5a41b0751e4537c6ff868564ab44a4d4ecceec2ec5b1c5f74d97422968e04237'\n\nexport const UNSIGNED_PAYLOAD = 'UNSIGNED-PAYLOAD'\n","/**\n * Represents an AWS service endpoint, providing utilities for parsing and handling URL details.\n */\nexport class Endpoint {\n    private _protocol: string\n    private _hostname: string\n    private _port?: number\n\n    // Default protocol, this can be globally changed as per application requirements\n    private static readonly DEFAULT_PROTOCOL = 'https' // Set this as per AWS.config\n\n    /**\n    //  * Constructs a new Endpoint instance.\n     *\n     * @param {string} endpoint - The URL to construct an endpoint from. If the URL omits a protocol, the default protocol will be used.\n     */\n    constructor(endpoint: string) {\n        const isDefaultProtocol =\n            !endpoint.startsWith('http://') && !endpoint.startsWith('https://')\n        const completeUrl = isDefaultProtocol\n            ? `${Endpoint.DEFAULT_PROTOCOL}://${endpoint}`\n            : endpoint\n\n        const protocolMatch = completeUrl.match(/^https?:/)\n        const hostAndPath = completeUrl.replace(/^https?:\\/\\//, '')\n        const [hostnameWithPort] = hostAndPath.split('/')\n\n        this._protocol = protocolMatch ? protocolMatch[0].slice(0, -1) : Endpoint.DEFAULT_PROTOCOL\n        this._hostname = hostnameWithPort.split(':')[0]\n        this._port = hostnameWithPort.split(':')[1]\n            ? parseInt(hostnameWithPort.split(':')[1])\n            : undefined\n    }\n\n    /**\n     * Creates a new Endpoint instance that is a copy of the current one.\n     *\n     * @returns {Endpoint} The copied Endpoint.\n     */\n    public copy(): Endpoint {\n        return new Endpoint(this.href)\n    }\n\n    /**\n     * Gets the host portion of the endpoint including the port.\n     *\n     * @returns {string} The host portion of the endpoint including the port.\n     */\n    public get host(): string {\n        return this._port ? `${this._hostname}:${this._port}` : this._hostname\n    }\n\n    /**\n     * Sets the host portion of the endpoint including the port.\n     *\n     * @param {string} value - The value to set for the host.\n     */\n    public set host(value: string) {\n        const [hostname, port] = value.split(':')\n        this._hostname = hostname\n        this._port = port ? parseInt(port) : undefined\n    }\n\n    /**\n     * Gets the host portion of the endpoint without the port.\n     *\n     * @returns {string} The host portion of the endpoint.\n     */\n    public get hostname(): string {\n        return this._hostname\n    }\n\n    /**\n     * Sets the host portion of the endpoint without the port.\n     *\n     * @param {string} value - The value to set for the hostname.\n     */\n    public set hostname(value: string) {\n        this._hostname = value\n    }\n\n    /**\n     * Gets the full URL of the endpoint.\n     *\n     * @returns {string} The full URL of the endpoint.\n     */\n    public get href(): string {\n        return `${this.protocol}://${this.host}`\n    }\n\n    /**\n     * Sets the full URL of the endpoint.\n     *\n     * @param {string} value - The value to set for the full URL.\n     */\n    public set href(value: string) {\n        const protocolMatch = value.match(/^https?:/)\n        const withoutProtocol = value.replace(/^https?:\\/\\//, '')\n        const [hostnameWithPort] = withoutProtocol.split('/')\n\n        this._protocol = protocolMatch ? protocolMatch[0].slice(0, -1) : Endpoint.DEFAULT_PROTOCOL // remove the trailing colon\n        this._hostname = hostnameWithPort.split(':')[0]\n        this._port = hostnameWithPort.split(':')[1]\n            ? parseInt(hostnameWithPort.split(':')[1])\n            : undefined\n    }\n\n    /**\n     * Gets the port of the endpoint.\n     *\n     * @returns {number|undefined} The port of the endpoint.\n     */\n    public get port(): number | undefined {\n        return this._port\n    }\n\n    /**\n     * Sets the port of the endpoint.\n     *\n     * @param {number|undefined} value - The value to set for the port.\n     */\n    public set port(value: number | undefined) {\n        this._port = value\n    }\n\n    /**\n     * Gets the protocol (http or https) of the endpoint URL.\n     *\n     * @returns {string} The protocol of the endpoint URL.\n     */\n    public get protocol(): string {\n        return this._protocol\n    }\n\n    /**\n     * Sets the protocol (http or https) of the endpoint URL.\n     *\n     * @param {string} value - The value to set for the protocol.\n     */\n    public set protocol(value: string) {\n        this._protocol = value\n    }\n}\n","import { JSONObject } from './json'\nimport { parseHTML } from 'k6/html'\nimport { Response } from 'k6/http'\n\n/**\n * Base class to derive errors from\n *\n * Inspired from AWS official error types, as\n * described in:\n *   * https://aws.amazon.com/blogs/developer/service-error-handling-modular-aws-sdk-js/\n *   * https://github.com/aws/aws-sdk-js/blob/master/lib/error.d.ts\n */\nexport class AWSError extends Error {\n    /**\n     * Error code issued by the service (if any)\n     */\n    code?: string\n\n    /**\n     * Create an AWSError\n     *\n     * @param {string} message - A longer human readable error message.\n     * @param {string?} code - A unique short code representing the error that was emitted\n     */\n    constructor(message: string, code?: string) {\n        super(message)\n        this.name = 'AWSError'\n        this.code = code\n    }\n\n    /**\n     * Parse an AWSError from an XML document\n     *\n     * @param  {string} xmlDocument - Serialized XML document to parse the error from\n     */\n    static parseXML(xmlDocument: string): AWSError {\n        const doc = parseHTML(xmlDocument)\n        return new AWSError(doc.find('Message').text(), doc.find('Code').text())\n    }\n\n    static parse(response: Response): AWSError {\n        if (response.headers['Content-Type'] === 'application/json') {\n            const error = (response.json() as JSONObject) || {}\n            const message =\n                error.Message ||\n                error.message ||\n                error.__type ||\n                'An error occurred on the server side'\n            const code = response.headers['X-Amzn-Errortype'] || error.__type\n            return new AWSError(message as string, code as string)\n        } else {\n            return AWSError.parseXML(response.body as string)\n        }\n    }\n}\n","import { Endpoint } from './endpoint'\n\n/**\n * Type representing HTTP schemes\n */\nexport type HTTPScheme = 'http' | 'https'\n\n/**\n * Type representing HTTP Methods\n *\n */\nexport type HTTPMethod = 'GET' | 'POST' | 'PUT' | 'DELETE'\n\n/**\n * Type alias representing HTTP Headers\n */\nexport type HTTPHeaders = { [key: string]: string }\n\n/**\n * HTTPHeaderBag is a type alias representing HTTP Headers\n */\nexport type HTTPHeaderBag = Record<string, string>\n\nexport function hasHeader(soughtHeader: string, headers: HTTPHeaderBag): boolean {\n    soughtHeader = soughtHeader.toLowerCase()\n\n    for (const headerName of Object.keys(headers)) {\n        if (soughtHeader === headerName.toLowerCase()) {\n            return true\n        }\n    }\n\n    return false\n}\n\n/**\n * QueryParameterBag is a type alias representing HTTP Query Parameters\n */\nexport type QueryParameterBag = Record<string, string | Array<string>>\n\n/**\n * HTTPRequest represents an HTTP request\n */\nexport interface HTTPRequest {\n    /**\n     * The HTTP method to use\n     */\n    method: HTTPMethod\n\n    /**\n     * Represents an AWS service endpoint, providing utilities for parsing and handling URL details.\n     */\n    endpoint: Endpoint\n\n    /**\n     * The path to the resource\n     */\n    path: string\n\n    /**\n     * The query parameters to include in the request\n     */\n    query?: QueryParameterBag\n\n    /**\n     * The headers to include in the request\n     */\n    headers: HTTPHeaderBag\n\n    /**\n     * The body of the request\n     */\n    body?: string | ArrayBuffer | null\n}\n\n/**\n * SignedHTTPRequest represents an HTTP request that has been signed\n * with an AWS signature. It is a superset of HTTPRequest adding\n * the following fields:\n * - url: the fully qualified URL of the request that can be used in a k6 http.request.\n */\nexport interface SignedHTTPRequest extends HTTPRequest {\n    url: string\n}\n","import crypto from 'k6/crypto'\n\nimport * as constants from './constants'\nimport { AWSError } from './error'\nimport { hasHeader, HTTPHeaderBag, HTTPRequest, QueryParameterBag, SignedHTTPRequest } from './http'\nimport { isArrayBuffer } from './utils'\n\n/**\n * SignatureV4 can be used to sign HTTP requests and presign URLs using the AWS Signature\n * Version 4 signing process.\n *\n * It offers two signing methods:\n * - sign: signs the request headers and payload\n * - presign: returns a presigned (authorization information contained in the query string) URL\n *\n * @see https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html\n */\nexport class SignatureV4 {\n    /**\n     * The name of the service to sign for.\n     */\n    private readonly service: string\n\n    /**\n     * The name of the region to sign for.\n     */\n    private readonly region: string\n\n    /**\n     * The credentials with which the request should be signed.\n     */\n    private readonly credentials: Credentials\n\n    /**\n     * Whether to uri-escape the request URI path as part of computing the\n     * canonical request string. This is required for every AWS service, except\n     * Amazon S3, as of late 2017.\n     *\n     * @default [true]\n     */\n    private readonly uriEscapePath: boolean\n\n    /**\n     * Whether to calculate a checksum of the request body and include it as\n     * either a request header (when signing) or as a query string parameter\n     * (when presigning). This is required for AWS Glacier and Amazon S3 and optional for\n     * every other AWS service as of late 2017.\n     *\n     * @default [true]\n     */\n    private readonly applyChecksum: boolean\n\n    // TODO: uriEscapePath and applyChecksum should not be present in the constructor\n    constructor({\n        service,\n        region,\n        credentials,\n        uriEscapePath,\n        applyChecksum,\n    }: SignatureV4Options) {\n        this.service = service\n        this.region = region\n        this.credentials = credentials\n        this.uriEscapePath = typeof uriEscapePath === 'boolean' ? uriEscapePath : true\n        this.applyChecksum = typeof applyChecksum === 'boolean' ? applyChecksum : true\n    }\n\n    /**\n     * Includes AWS v4 signing information to the provided HTTP request.\n     *\n     * This method adds an Authorization header to the request, containing\n     * the signature and other signing information. It also returns a preformatted\n     * URL that can be used to make the k6 http request.\n     *\n     * This method mutates the request object.\n     *\n     * @param request {HTTPRequest} The request to sign.\n     * @param options {Partial<RequestSigningOptions>} Options for signing the request.\n     * @returns {SignedHTTPRequest} The signed request.\n     */\n    sign(request: HTTPRequest, options: Partial<RequestSigningOptions> = {}): SignedHTTPRequest {\n        // Set default values for options which are not provided by the user.\n        const defaultOptions = {\n            signingDate: new Date(),\n            unsignableHeaders: new Set<string>(),\n            signableHeaders: new Set<string>(),\n        }\n\n        // Merge default options with the ones maybe provided by the user.\n        const finalOptions = { ...defaultOptions, ...options }\n\n        const { longDate, shortDate }: DateInfo = formatDate(finalOptions.signingDate)\n        const service = finalOptions.signingService || this.service\n        const region = finalOptions.signingRegion || this.region\n        const scope = `${shortDate}/${region}/${service}/${constants.KEY_TYPE_IDENTIFIER}`\n\n        // Required by the specification:\n        //   \"For HTTP/1.1 requests, you must include the host header at a minimum.\n        //   Standard headers like content-type are optional.\n        //   For HTTP/2 requests, you must include the :authority header instead of\n        //   the host header. Different services might require other headers.\"\n        if (!request.headers[constants.HOST_HEADER]) {\n          request.headers[constants.HOST_HEADER] = request.endpoint.hostname\n      }\n        \n\n        // Filter out headers that will be generated and managed by the signing process.\n        // If the user provide any of those as part of the HTTPRequest's headers, they\n        // will be ignored.\n        for (const headerName of Object.keys(request.headers)) {\n            if (constants.GENERATED_HEADERS.indexOf(headerName.toLowerCase()) > -1) {\n                delete request.headers[headerName]\n            }\n        }\n\n        request.headers[constants.AMZ_DATE_HEADER] = longDate\n        if (this.credentials.sessionToken) {\n            request.headers[constants.AMZ_TOKEN_HEADER] = this.credentials.sessionToken\n        }\n\n        // If the request body is a typed array, we need to convert it to a buffer\n        // so that we can calculate the checksum.\n        if (ArrayBuffer.isView(request.body)) {\n            request.body = request.body.buffer\n        }\n\n        // Ensure we avoid passing undefined to the crypto hash function.\n        if (!request.body) {\n            request.body = ''\n        }\n\n        const payloadHash = this.computePayloadHash(request)\n        if (\n            !hasHeader(constants.AMZ_CONTENT_SHA256_HEADER, request.headers) &&\n            this.applyChecksum\n        ) {\n            request.headers[constants.AMZ_CONTENT_SHA256_HEADER] = payloadHash\n        }\n\n        const canonicalHeaders = this.computeCanonicalHeaders(\n            request,\n            finalOptions.unsignableHeaders,\n            finalOptions.signableHeaders\n        )\n        const signature = this.calculateSignature(\n            longDate,\n            scope,\n            this.deriveSigningKey(this.credentials, service, region, shortDate),\n            this.createCanonicalRequest(request, canonicalHeaders, payloadHash)\n        )\n\n        /**\n         * Step 4 of the signing process: add the signature to the HTTP request's headers.\n         *\n         * @see https://docs.aws.amazon.com/general/latest/gr/sigv4-add-signature-to-request.html\n         */\n        request.headers[constants.AUTHORIZATION_HEADER] =\n            `${constants.SIGNING_ALGORITHM_IDENTIFIER} ` +\n            `Credential=${this.credentials.accessKeyId}/${scope}, ` +\n            `SignedHeaders=${Object.keys(canonicalHeaders).sort().join(';')}, ` +\n            `Signature=${signature}`\n\n        // If a request path was provided, add it to the URL\n        let url = request.endpoint.href\n        if (request.path) {\n            url += request.path\n        }\n\n        // If a request query string was provided, add it to the URL\n        if (request.query) {\n            // We exclude the signature from the query string\n            url += `?${this.serializeQueryParameters(request.query)}`\n        }\n\n        return {\n            url: url,\n            ...request,\n        }\n    }\n\n    /**\n     * Produces a presigned URL with AWS v4 signature information for the provided HTTP request.\n     *\n     * A presigned URL is a URL that contains the authorization information\n     * (signature and other signing information) in the query string. This method\n     * returns a preformatted URL that can be used to make the k6 http request.\n     *\n     * @param originalRequest - The original request to presign.\n     * @param options - Options controlling the signing of the request.\n     * @returns A signed request, including the presigned URL.\n     */\n    presign(originalRequest: HTTPRequest, options: PresignOptions = {}): SignedHTTPRequest {\n        const {\n            signingDate = new Date(),\n            expiresIn = 3600,\n            unsignableHeaders,\n            unhoistableHeaders,\n            signableHeaders,\n            signingRegion,\n            signingService,\n        } = options\n        const { longDate, shortDate }: DateInfo = formatDate(signingDate)\n        const region = signingRegion || this.region\n        const service = signingService || this.service\n\n        if (expiresIn > constants.MAX_PRESIGNED_TTL) {\n            throw new InvalidSignatureError(\n                \"Signature version 4 presigned URLs can't be valid for more than 7 days\"\n            )\n        }\n\n        const scope = `${shortDate}/${region}/${service}/${constants.KEY_TYPE_IDENTIFIER}`\n        const request = this.moveHeadersToQuery(originalRequest, { unhoistableHeaders })\n\n        // Required by the specification:\n        //   \"For HTTP/1.1 requests, you must include the host header at a minimum.\n        //   Standard headers like content-type are optional.\n        //   For HTTP/2 requests, you must include the :authority header instead of\n        //   the host header. Different services might require other headers.\"\n        if (!request.headers[constants.HOST_HEADER]) {\n          request.headers[constants.HOST_HEADER] = originalRequest.endpoint.hostname\n      }\n\n        // If the user provided a session token, include it in the signed url query string.\n        if (this.credentials.sessionToken) {\n            request.query[constants.AMZ_TOKEN_QUERY_PARAM] = this.credentials.sessionToken\n        }\n\n        // Add base signing query parameters to the request, as described in the documentation\n        // @see https://docs.aws.amazon.com/general/latest/gr/sigv4-add-signature-to-request.html\n        request.query[constants.AMZ_ALGORITHM_QUERY_PARAM] = constants.SIGNING_ALGORITHM_IDENTIFIER\n        request.query[\n            constants.AMZ_CREDENTIAL_QUERY_PARAM\n        ] = `${this.credentials.accessKeyId}/${scope}`\n        request.query[constants.AMZ_DATE_QUERY_PARAM] = longDate\n        request.query[constants.AMZ_EXPIRES_QUERY_PARAM] = expiresIn.toString(10)\n\n        const canonicalHeaders = this.computeCanonicalHeaders(\n            request,\n            unsignableHeaders,\n            signableHeaders\n        )\n        request.query[constants.AMZ_SIGNED_HEADERS_QUERY_PARAM] = Object.keys(canonicalHeaders)\n            .sort()\n            .join(';')\n\n        const signingKey = this.deriveSigningKey(this.credentials, service, region, shortDate)\n\n        // Computing the payload from the original request. This is required\n        // in the event the user attempts to produce a presigned URL for s3,\n        // which requires the payload hash to be 'UNSIGNED-PAYLOAD'.\n        //\n        // To that effect, users need to set the 'x-amz-content-sha256' header,\n        // and mark it as unhoistable and unsignable. When setup this way,\n        // the computePayloadHash method will then return the string 'UNSIGNED-PAYLOAD'.\n        const payloadHash = this.computePayloadHash(originalRequest)\n        const canonicalRequest = this.createCanonicalRequest(request, canonicalHeaders, payloadHash)\n\n        request.query[constants.AMZ_SIGNATURE_QUERY_PARAM] = this.calculateSignature(\n            longDate,\n            scope,\n            signingKey,\n            canonicalRequest\n        )\n\n        // If a request path was provided, add it to the URL\n        let url = request.endpoint.href\n        if (request.path) {\n            url += request.path\n        }\n\n        // If a request query string was provided, add it to the URL\n        if (request.query) {\n            url += `?${this.serializeQueryParameters(request.query)}`\n        }\n\n        return { url: url, ...request }\n    }\n\n    /**\n     * Create a string including information from your request\n     * in a AWS signature v4 standardized (canonical) format.\n     *\n     * Step 1 of the signing process: create the canonical request string.\n     * @see https://docs.aws.amazon.com/general/latest/gr/sigv4-create-canonical-request.html\n     *\n     * @param request {HTTPRequest} The request to sign.\n     * @param canonicalHeaders {HTTPHeaderBag} The request's canonical headers.\n     * @param payloadHash {string} The hexadecimally encoded request's payload hash .\n     * @returns {string} The canonical request string.\n     */\n    private createCanonicalRequest(\n        request: HTTPRequest,\n        canonicalHeaders: HTTPHeaderBag,\n        payloadHash: string\n    ): string {\n        const sortedHeaders = Object.keys(canonicalHeaders).sort()\n        const sortedCanonicalHeaders = sortedHeaders\n            .map((name) => `${name}:${canonicalHeaders[name]}`)\n            .join('\\n')\n        const signedHeaders = sortedHeaders.join(';')\n\n        return (\n            `${request.method}\\n` +\n            `${this.computeCanonicalURI(request)}\\n` +\n            `${this.computeCanonicalQuerystring(request)}\\n` +\n            `${sortedCanonicalHeaders}\\n\\n` +\n            `${signedHeaders}\\n` +\n            `${payloadHash}`\n        )\n    }\n\n    /**\n     * Create the \"string to sign\" part of the signature Version 4 protocol.\n     *\n     * The \"string to sign\" includes meta information about your request and\n     * about the canonical request that you created with `createCanonicalRequest`.\n     * It is used hand in hand with the signing key to create the request signature.\n     * Step 2 of the signing process: create the string to sign.\n     * @see https://docs.aws.amazon.com/general/latest/gr/sigv4-create-string-to-sign.html\n     *\n     * @param longDate {string} The request's date in iso 8601 format.\n     * @param credentialScope {string} The request's credential scope.\n     * @param canonicalRequest {string} The request's canonical request.\n     * @returns {string} The \"string to sign\".\n     */\n    private createStringToSign(\n        longDate: string,\n        credentialScope: string,\n        canonicalRequest: string\n    ): string {\n        const hashedCanonicalRequest = crypto.sha256(canonicalRequest, 'hex')\n\n        return (\n            `${constants.SIGNING_ALGORITHM_IDENTIFIER}\\n` +\n            `${longDate}\\n` +\n            `${credentialScope}\\n` +\n            `${hashedCanonicalRequest}`\n        )\n    }\n\n    /**\n     * Calculte the signature for AWS signature version 4.\n     *\n     * Step 3 of the signing process: create the signature.\n     * @see https://docs.aws.amazon.com/general/latest/gr/sigv4-calculate-signature.html\n     *\n     * @param longDate {string} The request's date in iso 8601 format.\n     * @param credentialScope {string} The request's credential scope.\n     * @param signingKey {string} the signing key as computed by the deriveSigningKey method.\n     * @param canonicalRequest {string} The request's canonical request.\n     * @returns {string} The signature.\n     */\n    private calculateSignature(\n        longDate: string,\n        credentialScope: string,\n        signingKey: Uint8Array,\n        canonicalRequest: string\n    ): string {\n        const stringToSign = this.createStringToSign(longDate, credentialScope, canonicalRequest)\n        return crypto.hmac('sha256', signingKey, stringToSign, 'hex')\n    }\n\n    /**\n     * Derives the signing key for authenticating requests signed with\n     * the Signature version 4 authentication protocol.\n     *\n     * deriveSigningKey produces a signing key by creating a series of\n     * hash-based message authentication codes (HMACs) represented in\n     * a binary format.\n     *\n     * The derived signing key is specific to the date it's made at, as well as\n     * the service and region it targets.\n     *\n     * @param credentials {AWSCredentials} The credentials to use for signing.\n     * @param service {string} The service the request is targeted at.\n     * @param region {string} The region the request is targeted at.\n     * @param shortDate {string} The request's date in YYYYMMDD format.\n     * @returns {Uint8Array} The derived signing key.\n     */\n    private deriveSigningKey(\n        credentials: Credentials,\n        service: string,\n        region: string,\n        shortDate: string\n    ): Uint8Array {\n        const kSecret: string = credentials.secretAccessKey\n        /**\n         * crypto.hmac returns a value of type `bytes`, which is an alias for\n         * number[]. However, the secret argument to hmac needs to either be\n         * a `string` or ArrayBuffer. The only way to get around this is to\n         * cast the return value of hmac to any, thus, we disable the no-explicit-any\n         * ESLint rule for this function.\n         */\n        /* eslint-disable @typescript-eslint/no-explicit-any */\n        const kDate: any = crypto.hmac('sha256', 'AWS4' + kSecret, shortDate, 'binary')\n        const kRegion: any = crypto.hmac('sha256', kDate, region, 'binary')\n        const kService: any = crypto.hmac('sha256', kRegion, service, 'binary')\n        const kSigning: any = crypto.hmac('sha256', kService, 'aws4_request', 'binary')\n        /* eslint-enable @typescript-eslint/no-explicit-any */\n\n        return kSigning\n    }\n\n    /**\n     * Create a string that includes information from your request\n     * in a AWS signature v4 standardized (canonical) format.\n     *\n     * @param param0 {HTTPRequest} The request to sign.\n     * @returns {string} The canonical URI.\n     */\n    private computeCanonicalURI({ path }: HTTPRequest): string {\n        if (this.uriEscapePath) {\n            // Non-S3 services, we normalize the path and then double URI encode it.\n            // Ref: \"Remove Dot Segments\" https://datatracker.ietf.org/doc/html/rfc3986#section-5.2.4\n            const normalizedURISegments = []\n\n            for (const URISegment of path.split('/')) {\n                if (URISegment?.length === 0) {\n                    continue\n                }\n\n                if (URISegment === '.') {\n                    continue\n                }\n\n                if (URISegment === '..') {\n                    normalizedURISegments.pop()\n                } else {\n                    normalizedURISegments.push(URISegment)\n                }\n            }\n\n            // Normalize the URI\n            const leading = path?.startsWith('/') ? '/' : ''\n            const URI = normalizedURISegments.join('/')\n            const trailing = normalizedURISegments.length > 0 && path?.endsWith('/') ? '/' : ''\n            const normalizedURI = `${leading}${URI}${trailing}`\n\n            const doubleEncoded = encodeURIComponent(normalizedURI)\n\n            return doubleEncoded.replace(/%2F/g, '/')\n        }\n\n        // For S3, we shouldn't normalize the path. For example, object name\n        // my-object//example//photo.user should not be normalized to\n        // my-object/example/photo.user\n        return path\n    }\n\n    /**\n     * Serializes the request's query parameters into their canonical\n     * string version. If the request does not include a query parameters,\n     * returns an empty string.\n     *\n     * @param param0 {HTTPRequest} The request containing the query parameters.\n     * @returns {string} The canonical query string.\n     */\n    private computeCanonicalQuerystring({ query = {} }: HTTPRequest): string {\n        const keys: Array<string> = []\n        const serialized: Record<string, string> = {}\n\n        for (const key of Object.keys(query).sort()) {\n            if (key.toLowerCase() === constants.AMZ_SIGNATURE_HEADER) {\n                continue\n            }\n\n            keys.push(key)\n            const value = query[key]\n\n            if (typeof value === 'string') {\n                serialized[key] = `${escapeURI(key)}=${escapeURI(value)}`\n            } else if (Array.isArray(value)) {\n                serialized[key] = value\n                    .slice(0)\n                    .sort()\n                    .reduce(\n                        (encoded: Array<string>, value: string) =>\n                            encoded.concat([`${escapeURI(key)}=${escapeURI(value)}`]),\n                        []\n                    )\n                    .join('&')\n            }\n        }\n\n        return keys\n            .map((key) => serialized[key])\n            .filter((serialized) => serialized)\n            .join('&')\n    }\n\n    /**\n     * Create the canonical form of the request's headers.\n     * Canonical headers consist of all the HTTP headers you\n     * are including with the signed request.\n     *\n     * @param param0 {HTTPRequest} The request to compute the canonical headers of.\n     * @param unsignableHeaders {Set<string>} The headers that should not be signed.\n     * @param signableHeaders {Set<string>} The headers that should be signed.\n     * @returns {string} The canonical headers.\n     */\n    private computeCanonicalHeaders(\n        { headers }: HTTPRequest,\n        unsignableHeaders?: Set<string>,\n        signableHeaders?: Set<string>\n    ): HTTPHeaderBag {\n        const canonicalHeaders: HTTPHeaderBag = {}\n\n        for (const headerName of Object.keys(headers).sort()) {\n            if (headers[headerName] == undefined) {\n                continue\n            }\n\n            const canonicalHeaderName = headerName.toLowerCase()\n            if (\n                canonicalHeaderName in constants.ALWAYS_UNSIGNABLE_HEADERS ||\n                unsignableHeaders?.has(canonicalHeaderName)\n            ) {\n                if (\n                    !signableHeaders ||\n                    (signableHeaders && !signableHeaders.has(canonicalHeaderName))\n                ) {\n                    continue\n                }\n            }\n\n            if (typeof headers[headerName] === 'string') {\n                canonicalHeaders[canonicalHeaderName] = headers[headerName] = headers[headerName]\n                    .trim()\n                    .replace(/\\s+/g, ' ')\n            }\n        }\n\n        return canonicalHeaders\n    }\n\n    /**\n     * Computes the SHA256 cryptographic hash of the request's body.\n     *\n     * If the headers contain the 'X-Amz-Content-Sha256' header, then\n     * the value of that header is returned instead. This proves useful\n     * when, for example, presiging a URL for S3, as the payload hash\n     * must always be equal to 'UNSIGNED-PAYLOAD'.\n     *\n     * @param param0 {HTTPRequest} The request to compute the payload hash of.\n     * @returns {string} The hex encoded SHA256 payload hash, or the value of the 'X-Amz-Content-Sha256' header.\n     */\n    private computePayloadHash({ headers, body }: HTTPRequest): string {\n        // for (const headerName of Object.keys(headers)) {\n        //     // If the header is present, return its value.\n        //     // So that we let the 'UNSIGNED-PAYLOAD' value pass through.\n        //     if (headerName.toLowerCase() === constants.AMZ_CONTENT_SHA256_HEADER) {\n        //         return headers[headerName]\n        //     }\n        // }\n\n        if (headers[constants.AMZ_CONTENT_SHA256_HEADER]) {\n            return headers[constants.AMZ_CONTENT_SHA256_HEADER]\n        }\n\n        if (body == undefined) {\n            return constants.EMPTY_SHA256\n        }\n\n        if (typeof body === 'string' || isArrayBuffer(body)) {\n            return crypto.sha256(body, 'hex').toLowerCase()\n        }\n\n        if (ArrayBuffer.isView(body)) {\n            // If the request body is a typed array, we need to convert it to a buffer\n            // so that we can calculate the checksum.\n            return crypto.sha256((body as DataView).buffer, 'hex').toLowerCase()\n        }\n\n        return constants.UNSIGNED_PAYLOAD\n    }\n\n    /**\n     * Moves a request's headers to its query parameters.\n     *\n     * The operation will ignore any amazon standard headers, prefixed\n     * with 'X-Amz-'. It will also ignore any headers specified as unhoistable\n     * by the options.\n     *\n     * The operation will delete the headers from the request.\n     *\n     * @param request {HTTPRequest} The request to move the headers from.\n     * @param options\n     * @returns {HTTPRequest} The request with the headers moved to the query parameters.\n     */\n    private moveHeadersToQuery(\n        request: HTTPRequest,\n        options: { unhoistableHeaders?: Set<string> } = {}\n    ): HTTPRequest & { query: QueryParameterBag } {\n        const requestCopy = JSON.parse(JSON.stringify(request))\n        const { headers, query = {} as QueryParameterBag } = requestCopy\n\n        for (const name of Object.keys(headers)) {\n            const lowerCaseName = name.toLowerCase()\n            if (\n                lowerCaseName.slice(0, 6) === 'x-amz-' &&\n                !options.unhoistableHeaders?.has(lowerCaseName)\n            ) {\n                query[name] = headers[name]\n                delete headers[name]\n            }\n        }\n\n        return {\n            ...requestCopy,\n            headers,\n            query,\n        }\n    }\n\n    /**\n     * Serializes a HTTPRequest's query parameter bag into a string.\n     *\n     * @param query {QueryParameterBag} The query parameters to serialize.\n     * @param ignoreKeys {Set<string>} The keys to ignore.\n     * @returns {string} The serialized, and ready to use in a URL, query parameters.\n     */\n    private serializeQueryParameters(query: QueryParameterBag, ignoreKeys?: string[]): string {\n        const keys: Array<string> = []\n        const serialized: Record<string, string> = {}\n\n        for (const key of Object.keys(query).sort()) {\n            if (ignoreKeys?.includes(key.toLowerCase())) {\n                continue\n            }\n\n            keys.push(key)\n            const value = query[key]\n\n            if (typeof value === 'string') {\n                serialized[key] = `${escapeURI(key)}=${escapeURI(value)}`\n            } else if (Array.isArray(value)) {\n                serialized[key] = value\n                    .slice(0)\n                    .sort()\n                    .reduce(\n                        (encoded: Array<string>, value: string) =>\n                            encoded.concat([`${escapeURI(key)}=${escapeURI(value)}`]),\n                        []\n                    )\n                    .join('&')\n            }\n        }\n\n        return keys\n            .map((key) => serialized[key])\n            .filter((serialized) => serialized)\n            .join('&')\n    }\n}\n\n/**\n * Error indicating an Invalid signature has been sent to AWS services\n *\n * Inspired from AWS official error types, as\n * described in:\n *   * https://aws.amazon.com/blogs/developer/service-error-handling-modular-aws-sdk-js/\n *   * https://github.com/aws/aws-sdk-js/blob/master/lib/error.d.ts\n */\nexport class InvalidSignatureError extends AWSError {\n    /**\n     * Constructs an InvalidSignatureError\n     *\n     * @param  {string} message - human readable error message\n     */\n    constructor(message: string, code?: string) {\n        super(message, code)\n        this.name = 'InvalidSignatureError'\n    }\n}\n\nexport interface SignatureV4Options {\n    /**\n     * The name of the service to sign for.\n     */\n    service: string\n\n    /**\n     * The name of the region to sign for.\n     */\n    region: string\n\n    /**\n     * The credentials with which the request should be signed.\n     */\n    credentials: Credentials\n\n    /**\n     * Whether to uri-escape the request URI path as part of computing the\n     * canonical request string. This is required for every AWS service, except\n     * Amazon S3, as of late 2017.\n     *\n     * @default [true]\n     */\n    uriEscapePath?: boolean\n\n    /**\n     * Whether to calculate a checksum of the request body and include it as\n     * either a request header (when signing) or as a query string parameter\n     * (when presigning). This is required for AWS Glacier and Amazon S3 and optional for\n     * every other AWS service as of late 2017.\n     *\n     * @default [true]\n     */\n    applyChecksum?: boolean\n}\n\nexport interface SignOptions {\n    /**\n     * The date and time to be used as signature metadata. This value should be\n     * a Date object, a unix (epoch) timestamp, or a string that can be\n     * understood by the JavaScript `Date` constructor.If not supplied, the\n     * value returned by `new Date()` will be used.\n     */\n    signingDate?: Date\n\n    /**\n     * The service signing name. It will override the service name of the signer\n     * in current invocation\n     */\n    signingService?: string\n\n    /**\n     * The region name to sign the request. It will override the signing region of the\n     * signer in current invocation\n     */\n    signingRegion?: string\n}\n\nexport interface RequestSigningOptions extends SignOptions {\n    /**\n     * A set of strings whose members represents headers that cannot be signed.\n     * All headers in the provided request will have their names converted to\n     * lower case and then checked for existence in the unsignableHeaders set.\n     */\n    unsignableHeaders?: Set<string>\n\n    /**\n     * A set of strings whose members represents headers that should be signed.\n     * Any values passed here will override those provided via unsignableHeaders,\n     * allowing them to be signed.\n     *\n     * All headers in the provided request will have their names converted to\n     * lower case before signing.\n     */\n    signableHeaders?: Set<string>\n}\n\nexport interface PresignOptions extends RequestSigningOptions {\n    /**\n     * The number of seconds before the presigned URL expires\n     */\n    expiresIn?: number\n\n    /**\n     * A set of strings whose representing headers that should not be hoisted\n     * to presigned request's query string. If not supplied, the presigner\n     * moves all the AWS-specific headers (starting with `x-amz-`) to the request\n     * query string. If supplied, these headers remain in the presigned request's\n     * header.\n     * All headers in the provided request will have their names converted to\n     * lower case and then checked for existence in the unhoistableHeaders set.\n     */\n    unhoistableHeaders?: Set<string>\n}\n\nexport interface Credentials {\n    /**\n     * AWS access key ID\n     */\n    readonly accessKeyId: string\n\n    /**\n     * AWS secret access key\n     */\n    readonly secretAccessKey: string\n\n    /**\n     * A security or session token to use with these credentials. Usually\n     * present for temporary credentials.\n     */\n    readonly sessionToken?: string\n}\n\nexport interface DateInfo {\n    /**\n     * ISO8601 formatted date string\n     */\n    longDate: string\n\n    /**\n     * String in the format YYYYMMDD\n     */\n    shortDate: string\n}\n\n/**\n * Escapes a URI following the AWS signature v4 escaping rules.\n *\n * @param URI {string} The URI to escape.\n * @returns {string} The escaped URI.\n */\nfunction escapeURI(URI: string): string {\n    const hexEncode = (c: string): string => {\n        return `%${c.charCodeAt(0).toString(16).toUpperCase()}`\n    }\n\n    return encodeURIComponent(URI).replace(/[!'()*]/g, hexEncode)\n}\n\n/**\n * formatDate formats a Date object into a ISO8601 formatted date string\n * and a string in the format YYYYMMDD.\n *\n * @param date {Date} The date to format.\n * @returns {DateInfo} The formatted date.\n */\nfunction formatDate(date: Date): DateInfo {\n    const longDate = iso8601(date).replace(/[-:]/g, '')\n    return {\n        longDate,\n        shortDate: longDate.slice(0, 8),\n    }\n}\n\n/**\n * Formats a time into an ISO 8601 string.\n *\n * @see https://en.wikipedia.org/wiki/ISO_8601\n *\n * @param time {number | string | Date} The time to format.\n * @returns {string} The ISO 8601 formatted time.\n */\nfunction iso8601(time: number | string | Date): string {\n    return toDate(time)\n        .toISOString()\n        .replace(/\\.\\d{3}Z$/, 'Z')\n}\n\n/**\n * Converts a time value into a Date object.\n *\n * @param time {number | string | Date} The time to convert.\n * @returns {Date} The resulting Date object.\n */\nfunction toDate(time: number | string | Date): Date {\n    if (typeof time === 'number') {\n        return new Date(time * 1000)\n    }\n\n    if (typeof time === 'string') {\n        if (Number(time)) {\n            return new Date(Number(time) * 1000)\n        }\n\n        return new Date(time)\n    }\n\n    return time\n}\n","/**\n *\n * @param value\n * @returns\n */\nexport function isArrayBuffer(value: unknown): value is ArrayBuffer {\n    return (\n        typeof ArrayBuffer === 'function' &&\n        (value instanceof ArrayBuffer ||\n            Object.prototype.toString.call(value) === '[object ArrayBuffer]')\n    )\n}\n\nexport function toFormUrlEncoded(form: Record<string, string | number | boolean>): string {\n    return Object.keys(form)\n        .reduce((params, key) => {\n            const value = form[key]\n            if (value !== undefined && value !== null) {\n                params.push(`${encodeURIComponent(key)}=${encodeURIComponent(value)}`)\n            }\n            return params\n        }, [] as string[])\n        .join('&')\n}\n","module.exports = require(\"k6/crypto\");","module.exports = require(\"k6/html\");","module.exports = require(\"k6/http\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"k6/encoding\");","import http, { RefinedResponse, ResponseType } from 'k6/http'\nimport encoding from 'k6/encoding'\n\nimport { AWSClient } from './client'\nimport { AWSConfig } from './config'\nimport { AWSError } from './error'\nimport { InvalidSignatureError, SignatureV4 } from './signature'\nimport { AMZ_TARGET_HEADER } from './constants'\nimport { HTTPHeaders, HTTPMethod, QueryParameterBag } from './http'\n\n/**\n * Class allowing to interact with Amazon AWS's Lambda service\n */\nexport class LambdaClient extends AWSClient {\n    private readonly signature: SignatureV4\n    private readonly commonHeaders: HTTPHeaders\n    private readonly method: HTTPMethod\n\n    constructor(awsConfig: AWSConfig) {\n        super(awsConfig, 'lambda')\n\n        this.signature = new SignatureV4({\n            service: this.serviceName,\n            region: this.awsConfig.region,\n            credentials: {\n                accessKeyId: this.awsConfig.accessKeyId,\n                secretAccessKey: this.awsConfig.secretAccessKey,\n                sessionToken: this.awsConfig.sessionToken,\n            },\n            uriEscapePath: true,\n            applyChecksum: false,\n        })\n\n        this.method = 'POST'\n        this.commonHeaders = {\n            'Content-Type': 'application/x-amz-json-1.1',\n        }\n    }\n\n    /**\n     * Invoke an AWS Lambda function\n     *\n     * @param {string} name - The name of the function\n     * @param {string} payload - The payload to send to function\n     * @param {InvocationOptions} options - Additional options to customize invocation\n     *\n     * @throws {LambdaInvocationError}\n     */\n    async invoke(\n        name: string,\n        payload: string,\n        options: InvocationOptions = {}\n    ): Promise<InvocationResponse> {\n        const query: QueryParameterBag = {}\n        const invocationType = options.invocationType || 'RequestResponse'\n        const headers = {\n            ...this.commonHeaders,\n            [AMZ_TARGET_HEADER]: `AWSLambda.${invocationType}`,\n            'X-Amz-Invocation-Type': invocationType,\n            'X-Amz-Log-Type': options.logType || 'None',\n        }\n        if (options.clientContext) {\n            headers['X-Amz-Client-Context'] = options.clientContext\n        }\n        if (options.qualifier) {\n            query['Qualifier'] = options.qualifier\n        }\n\n        const signedRequest = this.signature.sign(\n            {\n                method: this.method,\n                endpoint: this.endpoint,\n                path: `/2015-03-31/functions/${name}/invocations`,\n                query,\n                headers,\n                body: payload || '',\n            },\n            {}\n        )\n\n        const res = await http.asyncRequest(this.method, signedRequest.url, signedRequest.body, {\n            headers: signedRequest.headers,\n        })\n        this._handle_error(res)\n\n        const logResult = res.headers['X-Amz-Log-Result']\n        const response = {\n            executedVersion: res.headers['X-Amz-Executed-Version'],\n            logResult: logResult ? encoding.b64decode(logResult, 'std', 's') : undefined,\n            statusCode: res.status,\n            payload: res.body as string,\n        }\n\n        const functionError = res.headers['X-Amz-Function-Error']\n        if (functionError) {\n            throw new LambdaInvocationError(functionError, response)\n        } else {\n            return response\n        }\n    }\n\n    private _handle_error(response: RefinedResponse<ResponseType | undefined>) {\n        const errorCode: number = response.error_code\n        const errorMessage: string = response.error\n\n        if (errorMessage == '' && errorCode === 0) {\n            return\n        }\n\n        const awsError = AWSError.parse(response)\n        switch (awsError.code) {\n            case 'AuthorizationHeaderMalformed':\n            case 'InvalidSignatureException':\n                throw new InvalidSignatureError(awsError.message, awsError.code)\n            default:\n                throw awsError\n        }\n    }\n}\n\nexport class LambdaInvocationError extends Error {\n    response: InvocationResponse\n\n    constructor(message: string, response: InvocationResponse) {\n        super(`${message}: ${response.payload}`)\n        this.response = response\n    }\n}\n\ninterface InvocationOptions {\n    /**\n     * Defines whether the function is invoked synchronously or asynchronously.\n     * - `RequestResponse` (default): Invoke the function synchronously.\n     * - `Event`: Invoke the function asynchronously.\n     * - `DryRun`: Validate parameter values and verify that the user or role has permission to invoke the function.\n     */\n    invocationType?: 'RequestResponse' | 'Event' | 'DryRun'\n    /**\n     * Set to `Tail` to include the execution log in the response. Applies to synchronously invoked functions only.\n     */\n    logType?: 'None' | 'Tail'\n    /**\n     * Up to 3,583 bytes of base64-encoded data about the invoking client to pass to the function in the context object.\n     */\n    clientContext?: string\n    /**\n     * Specify a version or alias to invoke a published version of the function.\n     */\n    qualifier?: string\n}\n\ninterface InvocationResponse {\n    statusCode: number\n    executedVersion?: string\n    logResult?: string\n    payload?: string\n}\n"],"names":["AWSClient","awsConfig","serviceName","_classCallCheck","_defineProperty","this","undefined","endpoint","_endpoint","key","get","Endpoint","concat","region","set","AWSConfig","options","InvalidAWSConfigError","accessKeyId","length","secretAccessKey","sessionToken","_createClass","value","__ENV","AWS_REGION","AWS_ACCESS_KEY_ID","AWS_SECRET_ACCESS_KEY","AWS_SESSION_TOKEN","_Error","message","_callSuper","_inherits","_wrapNativeSuper","Error","AMZ_ALGORITHM_QUERY_PARAM","AMZ_CREDENTIAL_QUERY_PARAM","AMZ_DATE_QUERY_PARAM","AMZ_EXPIRES_QUERY_PARAM","AMZ_SIGNATURE_QUERY_PARAM","AMZ_SIGNED_HEADERS_QUERY_PARAM","AMZ_TOKEN_QUERY_PARAM","AMZ_CONTENT_SHA256_HEADER","AMZ_DATE_HEADER","toLowerCase","AMZ_SIGNATURE_HEADER","AMZ_TARGET_HEADER","AMZ_TOKEN_HEADER","AUTHORIZATION_HEADER","GENERATED_HEADERS","HOST_HEADER","ALWAYS_UNSIGNABLE_HEADERS","authorization","connection","expect","from","pragma","referer","te","trailer","upgrade","KEY_TYPE_IDENTIFIER","SIGNING_ALGORITHM_IDENTIFIER","MAX_PRESIGNED_TTL","EMPTY_SHA256","UNSIGNED_PAYLOAD","completeUrl","startsWith","DEFAULT_PROTOCOL","protocolMatch","match","hostnameWithPort","_slicedToArray","replace","split","_protocol","slice","_hostname","_port","parseInt","href","_value$split2","hostname","port","protocol","host","AWSError","code","_this","name","xmlDocument","doc","parseHTML","find","text","response","headers","error","json","Message","__type","parseXML","body","hasHeader","soughtHeader","_i","_Object$keys","Object","keys","SignatureV4","_ref","service","credentials","uriEscapePath","applyChecksum","request","arguments","finalOptions","_objectSpread","signingDate","Date","unsignableHeaders","Set","signableHeaders","_formatDate","formatDate","longDate","shortDate","signingService","signingRegion","scope","constants","headerName","indexOf","ArrayBuffer","isView","buffer","payloadHash","computePayloadHash","canonicalHeaders","computeCanonicalHeaders","signature","calculateSignature","deriveSigningKey","createCanonicalRequest","sort","join","url","path","query","serializeQueryParameters","originalRequest","_options$signingDate","_options$expiresIn","expiresIn","unhoistableHeaders","_formatDate2","InvalidSignatureError","moveHeadersToQuery","toString","signingKey","canonicalRequest","sortedHeaders","sortedCanonicalHeaders","map","signedHeaders","method","computeCanonicalURI","computeCanonicalQuerystring","credentialScope","hashedCanonicalRequest","crypto","stringToSign","createStringToSign","kSecret","kDate","kRegion","kService","_ref2","_step","normalizedURISegments","_iterator","_createForOfIteratorHelper","s","n","done","URISegment","pop","push","err","e","f","leading","URI","trailing","endsWith","normalizedURI","encodeURIComponent","_ref3","_step2","_ref3$query","serialized","_loop","escapeURI","Array","isArray","reduce","encoded","_iterator2","filter","_ref4","_step3","_iterator3","canonicalHeaderName","has","trim","_ref5","isArrayBuffer","requestCopy","JSON","parse","stringify","_requestCopy$query","_i2","_Object$keys2","_options$unhoistableH","lowerCaseName","ignoreKeys","_step4","_loop2","includes","_iterator4","_AWSError","c","charCodeAt","toUpperCase","date","time","Number","toDate","toISOString","prototype","call","module","exports","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","getter","__esModule","d","a","definition","o","defineProperty","enumerable","obj","prop","hasOwnProperty","r","Symbol","toStringTag","_regeneratorRuntime","t","i","iterator","asyncIterator","u","define","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","h","l","y","GeneratorFunction","GeneratorFunctionPrototype","p","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","_typeof","resolve","__await","then","callInvokeWithMethodAndArg","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","resetTryEntry","completion","reset","isNaN","displayName","isGeneratorFunction","constructor","mark","setPrototypeOf","__proto__","awrap","async","Promise","reverse","prev","charAt","stop","rval","handle","complete","finish","delegateYield","ownKeys","getOwnPropertySymbols","getOwnPropertyDescriptor","apply","getOwnPropertyDescriptors","defineProperties","asyncGeneratorStep","gen","reject","_next","_throw","info","instance","Constructor","_defineProperties","target","props","descriptor","_toPropertyKey","protoProps","staticProps","_getPrototypeOf","self","ReferenceError","_assertThisInitialized","_possibleConstructorReturn","_isNativeReflectConstruct","Reflect","construct","Boolean","valueOf","bind","subClass","superClass","_setPrototypeOf","toPrimitive","String","_toPrimitive","LambdaClient","_AWSClient","commonHeaders","fn","_callee","payload","invocationType","signedRequest","res","logResult","functionError","_args","_context","logType","clientContext","qualifier","sign","http","_handle_error","executedVersion","encoding","statusCode","status","LambdaInvocationError","args","_x","_x2","errorCode","error_code","awsError","_this2"],"sourceRoot":""}